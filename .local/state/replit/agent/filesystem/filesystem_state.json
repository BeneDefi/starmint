{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"start-server.sh":{"content":"#!/bin/bash\n# Wrapper script to start the server with proper PATH\nexport PATH=$PATH:$(pwd)/node_modules/.bin\nexec npx tsx server/index.ts","size_bytes":137},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n  base: \"./\", \n  assetsInclude: [\n    \"**/*.gltf\",\n    \"**/*.glb\",\n    \"**/*.mp3\",\n    \"**/*.ogg\",\n    \"**/*.wav\",\n  ],\n  server: {\n    port: 5000,\n    strictPort: true,\n    host: \"0.0.0.0\",\n    allowedHosts: true,\n  },\n  preview: {\n    port: 5000,\n    strictPort: true,\n    host: \"0.0.0.0\",\n    allowedHosts: true,\n  },\n});\n","size_bytes":1076},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport rateLimit from \"express-rate-limit\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { existsSync } from \"fs\";\n\nconst app = express();\n\n// ✅ Required for __dirname in ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// ✅ Trust proxy: enable for Replit environment\nif (process.env.NODE_ENV === \"production\" || process.env.REPL_ID) {\n  app.set(\"trust proxy\", 1); // trust first proxy (Render, Heroku, Replit, etc.)\n} else {\n  app.set(\"trust proxy\", false); // local dev\n}\n\n// Security middleware\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n        imgSrc: [\"'self'\", \"data:\", \"blob:\"],\n        connectSrc: [\"'self'\", \"ws:\", \"wss:\"],\n        fontSrc: [\"'self'\", \"data:\"],\n        mediaSrc: [\"'self'\"],\n        frameAncestors: [\n          \"'self'\",\n          \"https://warpcast.com\",\n          \"https://*.warpcast.com\",\n          \"https://farcaster.xyz\",\n          \"https://*.farcaster.xyz\",\n          \"https://frames.neynar.com\",\n          \"https://*.frames.neynar.com\",\n          \"https://client.warpcast.com\",\n          \"https://miniapp.warpcast.com\",\n          \"https://*.replit.com\",\n          \"https://*.repl.co\",\n          \"https://*.replit.dev\",\n          \"https://*.onrender.com\",\n          \"*\" // Allow all origins for maximum compatibility\n        ],\n      },\n    },\n    crossOriginEmbedderPolicy: false,\n    frameguard: false, // Disable X-Frame-Options since we're using CSP frame-ancestors\n  })\n);\n\napp.use(\n  cors({\n    origin: true, // Allow all origins for frame embedding compatibility\n    credentials: true,\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\n  })\n);\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 1000,\n  message: { error: \"Too many requests from this IP, please try again later.\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: { error: \"Too many API requests, please try again later.\" },\n});\n\napp.use(limiter);\napp.use(\"/api\", apiLimiter);\n\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"10mb\" }));\n\n// Request logging\napp.use((req, res, next) => {\n  const start = Date.now();\n  const pathUrl = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (pathUrl.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${pathUrl} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // ✅ Always serve Farcaster manifest (dev + prod)\n  const manifestPath = path.resolve(process.cwd(), \"public/.well-known\");\n  console.log(\"Serving Farcaster manifest from:\", manifestPath);\n  app.use(\"/.well-known\", express.static(manifestPath));\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n\n    // ✅ Catch-all fallback for React Router\n    const clientDist = path.resolve(process.cwd(), \"client/dist\");\n    app.get(\"*\", (req, res) => {\n      const indexPath = path.join(clientDist, \"index.html\");\n      if (existsSync(indexPath)) {\n        res.sendFile(indexPath);\n      } else {\n        res.status(404).send(\"index.html not found\");\n      }\n    });\n  }\n\n  const port = Number(process.env.PORT) ||5000;\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    }\n  );\n})();\n","size_bytes":4743},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { body, param, query, validationResult } from \"express-validator\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, type User } from \"@shared/schema\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport CryptoJS from \"crypto-js\";\nimport path from \"path\";\n\nconst JWT_SECRET = process.env.JWT_SECRET;\nconst GAME_ENCRYPTION_KEY = process.env.GAME_ENCRYPTION_KEY;\n\nif (!JWT_SECRET || !GAME_ENCRYPTION_KEY) {\n  console.error('Missing required environment variables: JWT_SECRET and/or GAME_ENCRYPTION_KEY');\n  process.exit(1);\n}\n\n// Type-safe constants after validation\nconst VALIDATED_JWT_SECRET: string = JWT_SECRET;\nconst VALIDATED_GAME_ENCRYPTION_KEY: string = GAME_ENCRYPTION_KEY;\n\n// Middleware for JWT authentication\nconst authenticateToken = (req: Request, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid or expired token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Input validation middleware\nconst handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      error: 'Validation failed', \n      details: errors.array() \n    });\n  }\n  next();\n};\n\n// Game state encryption/decryption utilities\nconst encryptGameState = (gameState: any): string => {\n  return CryptoJS.AES.encrypt(JSON.stringify(gameState), VALIDATED_GAME_ENCRYPTION_KEY).toString();\n};\n\nconst decryptGameState = (encryptedData: string): any => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, VALIDATED_GAME_ENCRYPTION_KEY);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  } catch (error) {\n    throw new Error('Invalid game state data');\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n    // Farcaster manifest - serve local file\n  app.get('/.well-known/farcaster.json', (req: Request, res: Response) => {\n    res.sendFile(path.resolve(process.cwd(), 'client/public/.well-known/farcaster.json'));\n  });\n  // User Registration\n  app.post('/api/auth/register', [\n    body('username')\n      .isLength({ min: 3, max: 50 })\n      .matches(/^[a-zA-Z0-9_-]+$/)\n      .withMessage('Username must be 3-50 characters and contain only letters, numbers, hyphens, and underscores'),\n    body('password')\n      .isLength({ min: 8 })\n      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n      .withMessage('Password must be at least 8 characters with uppercase, lowercase, number, and special character'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(409).json({ error: 'Username already exists' });\n      }\n      \n      // Hash password\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n      \n      // Create user\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword\n      });\n      \n      // Generate JWT\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        VALIDATED_JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n      \n      res.status(201).json({ \n        message: 'User created successfully', \n        token, \n        user: { id: user.id, username: user.username } \n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // User Login\n  app.post('/api/auth/login', [\n    body('username').notEmpty().withMessage('Username is required'),\n    body('password').notEmpty().withMessage('Password is required'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Find user\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      // Verify password\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      // Generate JWT\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        VALIDATED_JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n      \n      res.json({ \n        message: 'Login successful', \n        token, \n        user: { id: user.id, username: user.username } \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get current user\n  app.get('/api/auth/me', authenticateToken, (req: Request, res: Response) => {\n    res.json({ user: req.user });\n  });\n\n  // Game Score Submission (Server-side validation)\n  app.post('/api/game/submit-score', [\n    authenticateToken,\n    body('encryptedGameState').notEmpty().withMessage('Game state is required'),\n    body('score').isInt({ min: 0, max: 1000000 }).withMessage('Invalid score'),\n    body('level').isInt({ min: 1, max: 100 }).withMessage('Invalid level'),\n    body('gameTime').isInt({ min: 0, max: 7200000 }).withMessage('Invalid game time'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { encryptedGameState, score, level, gameTime } = req.body;\n      \n      // Decrypt and validate game state\n      const gameState = decryptGameState(encryptedGameState);\n      \n      // Server-side validation of game state\n      const expectedScore = validateGameState(gameState);\n      const scoreTolerance = Math.max(50, expectedScore * 0.05); // 5% tolerance\n      \n      if (Math.abs(score - expectedScore) > scoreTolerance) {\n        return res.status(400).json({ \n          error: 'Score validation failed',\n          details: 'Submitted score does not match game state' \n        });\n      }\n      \n      // Additional anti-cheat checks\n      if (gameTime < level * 30000) { // Minimum time per level\n        return res.status(400).json({ error: 'Impossible completion time' });\n      }\n      \n      if (score > level * 10000) { // Maximum reasonable score per level\n        return res.status(400).json({ error: 'Score too high for level' });\n      }\n      \n      // Save high score (would typically be in database)\n      await storage.saveHighScore?.(req.user.userId, {\n        score,\n        level,\n        gameTime,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json({ \n        message: 'Score submitted successfully',\n        verified: true,\n        score,\n        level \n      });\n    } catch (error) {\n      console.error('Score submission error:', error);\n      if (error instanceof Error && error.message === 'Invalid game state data') {\n        return res.status(400).json({ error: 'Invalid game data' });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Enhanced leaderboard endpoint with filtering\n  app.get('/api/game/leaderboard', [\n    query('limit').optional().isInt({ min: 1, max: 100 }).withMessage('Invalid limit'),\n    query('timeframe').optional().isIn(['daily', 'weekly', 'monthly', 'all']).withMessage('Invalid timeframe'),\n    query('category').optional().isIn(['score', 'level', 'enemies']).withMessage('Invalid category'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const timeframe = (req.query.timeframe as string) || 'all';\n      const category = (req.query.category as string) || 'score';\n      \n      const leaderboard = await storage.getTopPlayers?.(category, timeframe as any, limit) || [];\n      res.json({ \n        leaderboard,\n        metadata: {\n          timeframe,\n          category,\n          limit,\n          total: leaderboard.length\n        }\n      });\n    } catch (error) {\n      console.error('Leaderboard error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Player profile endpoint\n  app.get('/api/player/:userId/profile', [\n    param('userId').isInt().withMessage('Invalid user ID'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const profile = await storage.getPlayerProfile?.(userId);\n      \n      if (!profile || !profile.user) {\n        return res.status(404).json({ error: 'Player not found' });\n      }\n      \n      res.json(profile);\n    } catch (error) {\n      console.error('Player profile error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Player stats endpoint\n  app.get('/api/player/:userId/stats', [\n    param('userId').isInt().withMessage('Invalid user ID'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const stats = await storage.getPlayerStats?.(userId);\n      \n      if (!stats) {\n        return res.status(404).json({ error: 'Player stats not found' });\n      }\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Player stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Search players endpoint\n  app.get('/api/players/search', [\n    query('q').notEmpty().withMessage('Search query is required'),\n    query('limit').optional().isInt({ min: 1, max: 50 }).withMessage('Invalid limit'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const query = req.query.q as string;\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      const players = await storage.searchPlayers?.(query, limit) || [];\n      res.json({ players, query, limit });\n    } catch (error) {\n      console.error('Player search error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Farcaster FID-based player stats endpoints (required by frontend)\n  \n  // GET player stats by Farcaster FID\n  app.get('/api/player-stats/:farcasterFid', [\n    param('farcasterFid').isInt().withMessage('Invalid Farcaster FID'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const farcasterFid = parseInt(req.params.farcasterFid);\n      \n      // Find user by Farcaster FID\n      const user = await storage.getUserByFarcasterFid?.(farcasterFid);\n      if (!user) {\n        // Return default stats for new users\n        return res.json({\n          totalScore: 0,\n          highScore: 0,\n          enemiesDestroyed: 0,\n          gamesPlayed: 0,\n          timePlayedMinutes: 0,\n          socialShares: 0,\n          friendsInvited: 0,\n          farcasterFid\n        });\n      }\n      \n      const stats = await storage.getPlayerStats?.(user.id);\n      if (!stats) {\n        // Initialize stats if they don't exist\n        await storage.updatePlayerStats?.(user.id, {\n          totalScore: 0,\n          highScore: 0,\n          enemiesDestroyed: 0,\n          gamesPlayed: 0,\n          timePlayedMinutes: 0,\n          streakDays: 1,\n          socialShares: 0,\n          friendsInvited: 0,\n        });\n        \n        return res.json({\n          totalScore: 0,\n          highScore: 0,\n          enemiesDestroyed: 0,\n          gamesPlayed: 0,\n          timePlayedMinutes: 0,\n          socialShares: 0,\n          friendsInvited: 0,\n          farcasterFid\n        });\n      }\n      \n      res.json({\n        ...stats,\n        farcasterFid\n      });\n    } catch (error) {\n      console.error('Farcaster player stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // POST/UPDATE player stats by Farcaster FID  \n  app.post('/api/player-stats', [\n    body('farcasterFid').isInt().withMessage('Farcaster FID is required'),\n    body('totalScore').optional().isInt({ min: 0 }).withMessage('Invalid total score'),\n    body('highScore').optional().isInt({ min: 0 }).withMessage('Invalid high score'),\n    body('enemiesDestroyed').optional().isInt({ min: 0 }).withMessage('Invalid enemies destroyed'),\n    body('gamesPlayed').optional().isInt({ min: 0 }).withMessage('Invalid games played'),\n    body('timePlayedMinutes').optional().isInt({ min: 0 }).withMessage('Invalid time played'),\n    body('socialShares').optional().isInt({ min: 0 }).withMessage('Invalid social shares'),\n    body('friendsInvited').optional().isInt({ min: 0 }).withMessage('Invalid friends invited'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { farcasterFid, ...statsData } = req.body;\n      \n      // Find or create user by Farcaster FID\n      let user = await storage.getUserByFarcasterFid?.(farcasterFid);\n      if (!user) {\n        // Create a new user for this Farcaster FID\n        user = await storage.createUser({\n          username: `farcaster_${farcasterFid}`,\n          password: Math.random().toString(36), // Random password for Farcaster users\n          farcasterFid,\n          displayName: `Player ${farcasterFid}`,\n        });\n      }\n      \n      // Update player stats\n      await storage.updatePlayerStats?.(user.id, {\n        ...statsData,\n        updatedAt: new Date(),\n      });\n      \n      res.json({ \n        message: 'Player stats updated successfully',\n        farcasterFid,\n        userId: user.id\n      });\n    } catch (error) {\n      console.error('Update Farcaster player stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Daily login tracking\n  app.post('/api/daily-login', [\n    body('farcasterFid').isInt().withMessage('Valid Farcaster FID required'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { farcasterFid } = req.body;\n\n      // Find user by Farcaster FID\n      let user = await storage.getUserByFarcasterFid(farcasterFid);\n      \n      if (!user) {\n        // Create user if doesn't exist\n        const userData = {\n          username: `farcaster_${farcasterFid}`,\n          password: 'farcaster-user', // placeholder for Farcaster users\n          displayName: `Player ${farcasterFid}`,\n          farcasterFid: farcasterFid,\n        };\n        user = await storage.createUser(userData);\n      }\n\n      // Handle daily login\n      const loginResult = await storage.handleDailyLogin?.(user.id) || { streakDays: 1, dailyLogins: 1 };\n\n      res.json({\n        success: true,\n        streakDays: loginResult.streakDays,\n        dailyLogins: loginResult.dailyLogins,\n        message: `Login streak: ${loginResult.streakDays} days`\n      });\n\n    } catch (error) {\n      console.error('Daily login error:', error);\n      res.status(500).json({ \n        error: 'Failed to process daily login',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Farcaster authentication endpoint - create/find user and return JWT\n  app.post('/api/farcaster/auth', [\n    body('fid').isInt({ min: 1 }).withMessage('Valid Farcaster FID required'),\n    body('username').optional().isString().trim(),\n    body('displayName').optional().isString().trim(),\n    body('pfpUrl').optional().isURL().withMessage('Valid profile picture URL required'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { fid, username, displayName, pfpUrl } = req.body;\n      \n      // Find existing user by Farcaster FID\n      let user = await storage.getUserByFarcasterFid?.(fid);\n      \n      if (!user) {\n        // Create new user for this Farcaster account\n        const userData = {\n          username: username || `farcaster_${fid}`,\n          password: 'farcaster_auth', // Placeholder - not used for Farcaster auth\n          displayName: displayName || `Player ${fid}`,\n          profilePicture: pfpUrl,\n          farcasterFid: fid,\n        };\n        user = await storage.createUser(userData);\n        \n        // Initialize player stats for new user\n        const statsExist = await storage.getPlayerStats(user.id);\n        if (!statsExist) {\n          await storage.updatePlayerStats(user.id, {\n            totalScore: 0,\n            highScore: 0,\n            enemiesDestroyed: 0,\n            gamesPlayed: 0,\n            timePlayedMinutes: 0,\n            streakDays: 1,\n            maxStreak: 1,\n            dailyLogins: 1,\n            socialShares: 0,\n            friendsInvited: 0,\n            lastLoginAt: new Date(),\n            lastPlayedAt: null,\n          });\n        }\n      } else {\n        // Update existing user's profile data if provided\n        if (displayName || pfpUrl) {\n          // Note: We'd need to add an updateUser method to storage for this\n          console.log('User profile update needed for FID:', fid);\n        }\n      }\n      \n      // Generate JWT for authenticated requests\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, farcasterFid: fid },\n        VALIDATED_JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          displayName: user.displayName,\n          farcasterFid: user.farcasterFid\n        }\n      });\n    } catch (error) {\n      console.error('Farcaster auth error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get game sessions by Farcaster FID for profile page\n  app.get('/api/player-sessions/:farcasterFid', [\n    param('farcasterFid').isInt().withMessage('Invalid Farcaster FID'),\n    query('limit').optional().isInt({ min: 1, max: 50 }).withMessage('Invalid limit'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const farcasterFid = parseInt(req.params.farcasterFid);\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      // Find user by Farcaster FID\n      const user = await storage.getUserByFarcasterFid?.(farcasterFid);\n      if (!user) {\n        return res.json({ sessions: [], totalGames: 0 });\n      }\n      \n      // Get player profile which includes recent sessions\n      const profile = await storage.getPlayerProfile?.(user.id);\n      if (!profile || !profile.recentSessions) {\n        return res.json({ sessions: [], totalGames: 0 });\n      }\n      \n      res.json({\n        sessions: profile.recentSessions.slice(0, limit),\n        totalGames: profile.stats?.gamesPlayed || 0,\n        player: {\n          displayName: user.displayName,\n          username: user.username,\n          farcasterFid: user.farcasterFid\n        }\n      });\n    } catch (error) {\n      console.error('Game sessions error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // GET purchase history by Farcaster FID\n  app.get('/api/purchase-history/:farcasterFid', [\n    param('farcasterFid').isInt().withMessage('Invalid Farcaster FID'),\n    query('limit').optional().isInt({ min: 1, max: 50 }).withMessage('Invalid limit'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const farcasterFid = parseInt(req.params.farcasterFid);\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      // Find user by Farcaster FID\n      const user = await storage.getUserByFarcasterFid?.(farcasterFid);\n      if (!user) {\n        return res.json({ purchases: [] });\n      }\n      \n      // Get purchase history\n      const purchases = await storage.getPurchaseHistory?.(user.id, limit) || [];\n      \n      res.json({ \n        purchases,\n        total: purchases.length,\n        player: {\n          displayName: user.displayName,\n          username: user.username,\n          farcasterFid: user.farcasterFid\n        }\n      });\n    } catch (error) {\n      console.error('Purchase history error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Enhanced game session submission\n  app.post('/api/game/session', [\n    authenticateToken,\n    body('score').isInt({ min: 0, max: 1000000 }).withMessage('Invalid score'),\n    body('level').isInt({ min: 1, max: 100 }).withMessage('Invalid level'),\n    body('gameTime').isInt({ min: 0, max: 7200000 }).withMessage('Invalid game time'),\n    body('enemiesKilled').isInt({ min: 0 }).withMessage('Invalid enemies killed count'),\n    body('powerUpsCollected').optional().isInt({ min: 0 }).withMessage('Invalid power-ups count'),\n    body('accuracy').optional().isFloat({ min: 0, max: 1 }).withMessage('Invalid accuracy'),\n    handleValidationErrors\n  ], async (req: Request, res: Response) => {\n    try {\n      const { score, level, gameTime, enemiesKilled, powerUpsCollected = 0, accuracy } = req.body;\n      \n      // Save detailed game session\n      await storage.saveGameSession?.(req.user.userId, {\n        score,\n        level,\n        enemiesKilled,\n        gameTime,\n        powerUpsCollected,\n        accuracy,\n        gameData: null, // Could store encrypted game replay data\n        isValid: true,\n      });\n      \n      res.json({ \n        message: 'Game session saved successfully',\n        score,\n        level,\n        gameTime\n      });\n    } catch (error) {\n      console.error('Game session error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Game state validation function\nfunction validateGameState(gameState: any): number {\n  let expectedScore = 0;\n  \n  // Basic validation - would be more sophisticated in production\n  if (gameState.enemiesKilled) {\n    expectedScore += gameState.enemiesKilled * (3 + (gameState.level - 1) * 4);\n  }\n  \n  if (gameState.powerUpsCollected) {\n    expectedScore += gameState.powerUpsCollected * 50;\n  }\n  \n  if (gameState.bossesKilled) {\n    expectedScore += gameState.bossesKilled * (100 + gameState.level * 50);\n  }\n  \n  return Math.max(0, expectedScore);\n}\n\n// Extend Request interface for TypeScript\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n","size_bytes":22737},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, desc, and, gte, lte, ilike, or, sql as drizzleSql } from \"drizzle-orm\";\nimport { \n  users, \n  playerStats, \n  gameSessions, \n  playerRankings,\n  userAchievements,\n  highScores,\n  dailyLogins,\n  purchaseHistory,\n  type User, \n  type InsertUser, \n  type HighScore,\n  type PlayerStats,\n  type GameSession,\n  type PlayerRanking,\n  type DailyLogin,\n  type PurchaseHistory\n} from \"@shared/schema\";\n\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByFarcasterFid(farcasterFid: number): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  saveHighScore?(userId: number, scoreData: Omit<HighScore, 'id' | 'userId'>): Promise<void>;\n  getLeaderboard?(limit: number): Promise<HighScore[]>;\n  \n  // Enhanced player data methods\n  getPlayerStats(userId: number): Promise<PlayerStats | undefined>;\n  updatePlayerStats(userId: number, stats: Partial<PlayerStats>): Promise<void>;\n  saveGameSession(userId: number, sessionData: Omit<GameSession, 'id' | 'userId' | 'playedAt'>): Promise<void>;\n  getPlayerRankings(userId: number): Promise<PlayerRanking[]>;\n  getTopPlayers(category: string, timeframe?: 'daily' | 'weekly' | 'monthly' | 'all', limit?: number): Promise<any[]>;\n  getPlayerProfile(userId: number): Promise<any>;\n  searchPlayers(query: string, limit?: number): Promise<User[]>;\n  updatePlayerRankings(): Promise<void>;\n  \n  // Daily login and purchase tracking\n  handleDailyLogin(userId: number): Promise<{ streakDays: number; dailyLogins: number }>;\n  savePurchase(userId: number, purchase: any): Promise<void>;\n  getPurchaseHistory(userId: number, limit?: number): Promise<any[]>;\n}\n\n// Database connection is imported from db.ts\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByFarcasterFid(farcasterFid: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.farcasterFid, farcasterFid)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    const newUser = result[0];\n    \n    // Initialize player stats for new user\n    await db.insert(playerStats).values({\n      userId: newUser.id,\n      totalScore: 0,\n      highScore: 0,\n      enemiesDestroyed: 0,\n      gamesPlayed: 0,\n      timePlayedMinutes: 0,\n      streakDays: 1,\n      socialShares: 0,\n      friendsInvited: 0,\n    });\n    \n    return newUser;\n  }\n\n  async getPlayerStats(userId: number): Promise<PlayerStats | undefined> {\n    const result = await db.select().from(playerStats).where(eq(playerStats.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async updatePlayerStats(userId: number, stats: Partial<PlayerStats>): Promise<void> {\n    await db.update(playerStats)\n      .set({ ...stats, updatedAt: new Date() })\n      .where(eq(playerStats.userId, userId));\n  }\n\n  async saveGameSession(userId: number, sessionData: Omit<GameSession, 'id' | 'userId' | 'playedAt'>): Promise<void> {\n    await db.insert(gameSessions).values({\n      userId,\n      ...sessionData,\n    });\n    \n    // Update player stats\n    const currentStats = await this.getPlayerStats(userId);\n    if (currentStats) {\n      const updatedStats = {\n        gamesPlayed: currentStats.gamesPlayed + 1,\n        totalScore: currentStats.totalScore + sessionData.score,\n        enemiesDestroyed: currentStats.enemiesDestroyed + sessionData.enemiesKilled,\n        timePlayedMinutes: currentStats.timePlayedMinutes + Math.round(sessionData.gameTime / 60000),\n        lastPlayedAt: new Date(),\n      };\n      \n      if (sessionData.score > currentStats.highScore) {\n        (updatedStats as any).highScore = sessionData.score;\n      }\n      \n      await this.updatePlayerStats(userId, updatedStats);\n    }\n  }\n\n  async getPlayerRankings(userId: number): Promise<PlayerRanking[]> {\n    return await db.select().from(playerRankings).where(eq(playerRankings.userId, userId));\n  }\n\n  async handleDailyLogin(userId: number): Promise<{ streakDays: number; dailyLogins: number }> {\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    \n    // Check if user already logged in today\n    const todayLogin = await db.select().from(dailyLogins)\n      .where(and(eq(dailyLogins.userId, userId), eq(dailyLogins.loginDate, today)))\n      .limit(1);\n    \n    if (todayLogin.length > 0) {\n      // Already logged in today, return current streak\n      const stats = await this.getPlayerStats(userId);\n      return {\n        streakDays: stats?.streakDays || 1,\n        dailyLogins: stats?.dailyLogins || 1\n      };\n    }\n    \n    // Check yesterday's login for streak calculation\n    const yesterdayLogin = await db.select().from(dailyLogins)\n      .where(and(eq(dailyLogins.userId, userId), eq(dailyLogins.loginDate, yesterday)))\n      .limit(1);\n    \n    const currentStats = await this.getPlayerStats(userId);\n    let newStreak = 1;\n    let newDailyLogins = (currentStats?.dailyLogins || 0) + 1;\n    \n    if (yesterdayLogin.length > 0) {\n      // Continue streak\n      newStreak = (currentStats?.streakDays || 1) + 1;\n    }\n    \n    // Record today's login\n    await db.insert(dailyLogins).values({\n      userId,\n      loginDate: today,\n      loginCount: 1,\n      streakDay: newStreak,\n    });\n    \n    // Update player stats\n    await this.updatePlayerStats(userId, {\n      streakDays: newStreak,\n      maxStreak: Math.max(currentStats?.maxStreak || 1, newStreak),\n      dailyLogins: newDailyLogins,\n      lastLoginAt: new Date(),\n    });\n    \n    return { streakDays: newStreak, dailyLogins: newDailyLogins };\n  }\n  \n  async savePurchase(userId: number, purchase: {\n    itemId: number;\n    itemName: string;\n    itemType: string;\n    price: number;\n    currency: string;\n  }): Promise<void> {\n    await db.insert(purchaseHistory).values({\n      userId,\n      ...purchase,\n    });\n  }\n  \n  async getPurchaseHistory(userId: number, limit: number = 50): Promise<any[]> {\n    return await db.select().from(purchaseHistory)\n      .where(eq(purchaseHistory.userId, userId))\n      .orderBy(desc(purchaseHistory.purchasedAt))\n      .limit(limit);\n  }\n\n  async getTopPlayers(category: string = 'score', timeframe: 'daily' | 'weekly' | 'monthly' | 'all' = 'all', limit: number = 10): Promise<any[]> {\n    let dateFilter = undefined;\n    const now = new Date();\n    \n    switch (timeframe) {\n      case 'daily':\n        dateFilter = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case 'weekly':\n        dateFilter = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'monthly':\n        dateFilter = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n    }\n    \n    if (timeframe === 'all') {\n      // Get overall rankings\n      return await db\n        .select({\n          userId: users.id,\n          username: users.username,\n          displayName: users.displayName,\n          profilePicture: users.profilePicture,\n          score: playerStats.highScore,\n          totalScore: playerStats.totalScore,\n          level: playerStats.gamesPlayed,\n          enemiesDestroyed: playerStats.enemiesDestroyed,\n          gamesPlayed: playerStats.gamesPlayed,\n          timePlayedMinutes: playerStats.timePlayedMinutes,\n        })\n        .from(playerStats)\n        .innerJoin(users, eq(playerStats.userId, users.id))\n        .orderBy(desc(playerStats.highScore))\n        .limit(limit);\n    } else {\n      // Get time-based rankings from game sessions\n      return await db\n        .select({\n          userId: users.id,\n          username: users.username,\n          displayName: users.displayName,\n          profilePicture: users.profilePicture,\n          score: gameSessions.score,\n          level: gameSessions.level,\n          enemiesKilled: gameSessions.enemiesKilled,\n          gameTime: gameSessions.gameTime,\n          playedAt: gameSessions.playedAt,\n        })\n        .from(gameSessions)\n        .innerJoin(users, eq(gameSessions.userId, users.id))\n        .where(dateFilter ? gte(gameSessions.playedAt, dateFilter) : undefined)\n        .orderBy(desc(gameSessions.score))\n        .limit(limit);\n    }\n  }\n\n  async getPlayerProfile(userId: number): Promise<any> {\n    const user = await this.getUser(userId);\n    const stats = await this.getPlayerStats(userId);\n    const rankings = await this.getPlayerRankings(userId);\n    \n    // Get recent game sessions\n    const recentSessions = await db\n      .select()\n      .from(gameSessions)\n      .where(eq(gameSessions.userId, userId))\n      .orderBy(desc(gameSessions.playedAt))\n      .limit(10);\n      \n    return {\n      user,\n      stats,\n      rankings,\n      recentSessions,\n    };\n  }\n\n  async searchPlayers(query: string, limit: number = 20): Promise<User[]> {\n    // Simple text search - in production you'd use full-text search\n    return await db\n      .select()\n      .from(users)\n      .where(\n        or(\n          ilike(users.username, `%${query}%`),\n          ilike(users.displayName, `%${query}%`)\n        )\n      )\n      .limit(limit);\n  }\n\n  async updatePlayerRankings(): Promise<void> {\n    // This would typically be run as a scheduled job\n    // For now, we'll calculate rankings on-demand\n    console.log('Player rankings updated');\n  }\n\n  async saveHighScore(userId: number, scoreData: Omit<HighScore, 'id' | 'userId'>): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    await db.insert(highScores).values({\n      userId,\n      ...scoreData,\n    });\n  }\n\n  async getLeaderboard(limit: number = 10): Promise<HighScore[]> {\n    return await db\n      .select()\n      .from(highScores)\n      .orderBy(desc(highScores.score), desc(highScores.level))\n      .limit(limit);\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private highScores: HighScore[];\n  private playerStats: Map<number, PlayerStats>;\n  private gameSessions: Map<number, GameSession[]>;\n  currentId: number;\n  currentStatsId: number;\n  currentSessionId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.highScores = [];\n    this.playerStats = new Map();\n    this.gameSessions = new Map();\n    this.currentId = 1;\n    this.currentStatsId = 1;\n    this.currentSessionId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByFarcasterFid(farcasterFid: number): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.farcasterFid === farcasterFid,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      displayName: null,\n      profilePicture: null,\n      farcasterFid: null,\n      createdAt: now,\n      lastActive: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getPlayerStats(userId: number): Promise<PlayerStats | undefined> {\n    return this.playerStats.get(userId);\n  }\n\n  async updatePlayerStats(userId: number, stats: Partial<PlayerStats>): Promise<void> {\n    const currentStats = this.playerStats.get(userId);\n    if (currentStats) {\n      this.playerStats.set(userId, { ...currentStats, ...stats, updatedAt: new Date() });\n    } else {\n      // Create new stats\n      const newStats: PlayerStats = {\n        id: this.currentStatsId++,\n        userId,\n        totalScore: 0,\n        highScore: 0,\n        enemiesDestroyed: 0,\n        gamesPlayed: 0,\n        timePlayedMinutes: 0,\n        streakDays: 1,\n        maxStreak: 1,\n        dailyLogins: 1,\n        socialShares: 0,\n        friendsInvited: 0,\n        lastLoginAt: new Date(),\n        lastPlayedAt: null,\n        updatedAt: new Date(),\n        ...stats\n      };\n      this.playerStats.set(userId, newStats);\n    }\n  }\n\n  async saveGameSession(userId: number, sessionData: Omit<GameSession, 'id' | 'userId' | 'playedAt'>): Promise<void> {\n    const session: GameSession = {\n      id: this.currentSessionId++,\n      userId,\n      playedAt: new Date(),\n      ...sessionData\n    };\n    \n    const userSessions = this.gameSessions.get(userId) || [];\n    userSessions.push(session);\n    this.gameSessions.set(userId, userSessions);\n    \n    // Update player stats\n    const currentStats = this.playerStats.get(userId);\n    if (currentStats) {\n      const updatedStats = {\n        gamesPlayed: currentStats.gamesPlayed + 1,\n        totalScore: currentStats.totalScore + sessionData.score,\n        enemiesDestroyed: currentStats.enemiesDestroyed + sessionData.enemiesKilled,\n        timePlayedMinutes: currentStats.timePlayedMinutes + Math.round(sessionData.gameTime / 60000),\n        lastPlayedAt: new Date(),\n      };\n      \n      if (sessionData.score > currentStats.highScore) {\n        (updatedStats as any).highScore = sessionData.score;\n      }\n      \n      await this.updatePlayerStats(userId, updatedStats);\n    }\n  }\n\n  async getPlayerRankings(): Promise<PlayerRanking[]> {\n    return [];\n  }\n\n  async getTopPlayers(): Promise<any[]> {\n    return [];\n  }\n\n  async getPlayerProfile(userId: number): Promise<any> {\n    const user = await this.getUser(userId);\n    const stats = await this.getPlayerStats(userId);\n    const userSessions = this.gameSessions.get(userId) || [];\n    \n    return {\n      user,\n      stats,\n      rankings: [],\n      recentSessions: userSessions.slice(-10).reverse() // Last 10 sessions, newest first\n    };\n  }\n\n  async searchPlayers(): Promise<User[]> {\n    return [];\n  }\n\n  async updatePlayerRankings(): Promise<void> {\n    // Mock implementation\n  }\n\n  async handleDailyLogin(userId: number): Promise<{ streakDays: number; dailyLogins: number }> {\n    const stats = await this.getPlayerStats(userId);\n    if (stats) {\n      const newStreak = stats.streakDays + 1;\n      const newDailyLogins = stats.dailyLogins + 1;\n      \n      await this.updatePlayerStats(userId, {\n        streakDays: newStreak,\n        maxStreak: Math.max(stats.maxStreak, newStreak),\n        dailyLogins: newDailyLogins,\n        lastLoginAt: new Date()\n      });\n      \n      return { streakDays: newStreak, dailyLogins: newDailyLogins };\n    }\n    return { streakDays: 1, dailyLogins: 1 };\n  }\n\n  async savePurchase(): Promise<void> {\n    // Mock implementation\n  }\n\n  async getPurchaseHistory(): Promise<any[]> {\n    // Mock implementation\n    return [];\n  }\n\n  async saveHighScore(userId: number, scoreData: Omit<HighScore, 'id' | 'userId'>): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const highScore: HighScore = {\n      id: this.highScores.length + 1,\n      userId,\n      ...scoreData\n    };\n\n    // Remove any existing score from this user for this session\n    this.highScores = this.highScores.filter(score => \n      !(score.userId === userId && Math.abs(new Date(score.timestamp).getTime() - Date.now()) < 60000)\n    );\n\n    this.highScores.push(highScore);\n  }\n\n  async getLeaderboard(limit: number = 10): Promise<HighScore[]> {\n    return this.highScores\n      .sort((a, b) => {\n        // Sort by score descending, then by level descending\n        if (a.score !== b.score) return b.score - a.score;\n        if (a.level !== b.level) return b.level - a.level;\n        return a.gameTime - b.gameTime; // Faster time wins for same score/level\n      })\n      .slice(0, limit);\n  }\n}\n\n// Use DatabaseStorage for real database connectivity\nexport const storage = process.env.NODE_ENV === 'production' || process.env.DATABASE_URL \n  ? new DatabaseStorage() \n  : new MemStorage();\n","size_bytes":16369},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname);\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2399},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, real, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  displayName: text(\"display_name\"),\n  profilePicture: text(\"profile_picture\"),\n  farcasterFid: integer(\"farcaster_fid\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastActive: timestamp(\"last_active\").defaultNow().notNull(),\n});\n\n// Player statistics table\nexport const playerStats = pgTable(\"player_stats\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  totalScore: integer(\"total_score\").default(0).notNull(),\n  highScore: integer(\"high_score\").default(0).notNull(),\n  enemiesDestroyed: integer(\"enemies_destroyed\").default(0).notNull(),\n  gamesPlayed: integer(\"games_played\").default(0).notNull(),\n  timePlayedMinutes: integer(\"time_played_minutes\").default(0).notNull(),\n  streakDays: integer(\"streak_days\").default(1).notNull(),\n  maxStreak: integer(\"max_streak\").default(1).notNull(),\n  dailyLogins: integer(\"daily_logins\").default(1).notNull(),\n  socialShares: integer(\"social_shares\").default(0).notNull(),\n  friendsInvited: integer(\"friends_invited\").default(0).notNull(),\n  lastLoginAt: timestamp(\"last_login_at\").defaultNow().notNull(),\n  lastPlayedAt: timestamp(\"last_played_at\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Game sessions for detailed tracking\nexport const gameSessions = pgTable(\"game_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  score: integer(\"score\").notNull(),\n  level: integer(\"level\").notNull(),\n  enemiesKilled: integer(\"enemies_killed\").notNull(),\n  gameTime: integer(\"game_time\").notNull(), // in milliseconds\n  powerUpsCollected: integer(\"power_ups_collected\").default(0).notNull(),\n  accuracy: real(\"accuracy\"), // percentage\n  gameData: json(\"game_data\"), // encrypted game state for validation\n  isValid: boolean(\"is_valid\").default(true).notNull(),\n  playedAt: timestamp(\"played_at\").defaultNow().notNull(),\n});\n\n// High score schema for game leaderboard (keeping for compatibility)\nexport const highScores = pgTable(\"high_scores\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  score: integer(\"score\").notNull(),\n  level: integer(\"level\").notNull(),\n  gameTime: integer(\"game_time\").notNull(), // in milliseconds\n  timestamp: text(\"timestamp\").notNull(),\n});\n\n// Achievements tracking\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  achievementId: text(\"achievement_id\").notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow().notNull(),\n  rewardClaimed: boolean(\"reward_claimed\").default(false).notNull(),\n});\n\n// Player rankings cache for performance\nexport const playerRankings = pgTable(\"player_rankings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  globalRank: integer(\"global_rank\").notNull(),\n  weeklyRank: integer(\"weekly_rank\"),\n  monthlyRank: integer(\"monthly_rank\"),\n  category: text(\"category\").notNull(), // 'score', 'level', 'enemies', etc.\n  value: integer(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  displayName: true,\n  profilePicture: true,\n  farcasterFid: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type PlayerStats = typeof playerStats.$inferSelect;\nexport type GameSession = typeof gameSessions.$inferSelect;\nexport type HighScore = typeof highScores.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type PlayerRanking = typeof playerRankings.$inferSelect;\n\n// Daily login tracking\nexport const dailyLogins = pgTable(\"daily_logins\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  loginDate: text(\"login_date\").notNull(), // YYYY-MM-DD format\n  loginCount: integer(\"login_count\").default(1).notNull(),\n  streakDay: integer(\"streak_day\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Purchase history table\nexport const purchaseHistory = pgTable(\"purchase_history\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  itemId: integer(\"item_id\").notNull(),\n  itemName: text(\"item_name\").notNull(),\n  itemType: text(\"item_type\").notNull(), // weapon, defense, upgrade\n  price: integer(\"price\").notNull(),\n  currency: text(\"currency\").default(\"STARMINT\").notNull(),\n  purchasedAt: timestamp(\"purchased_at\").defaultNow().notNull(),\n});\n\nexport type DailyLogin = typeof dailyLogins.$inferSelect;\nexport type PurchaseHistory = typeof purchaseHistory.$inferSelect;\n","size_bytes":5184},"client/src/App.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport Game from \"./components/Game\";\nimport MainMenu from \"./components/MainMenu\";\nimport MiniAppGame from \"./components/MiniAppGame\";\nimport MiniAppHeader from \"./components/MiniAppHeader\";\nimport { MiniKitProvider, useMiniKit } from \"./lib/miniapp/minikit\";\nimport { useAudio } from \"./lib/stores/useAudio\";\nimport { useGameState } from \"./lib/stores/useGameState\";\nimport { GameAccessibility } from \"./lib/accessibility/GameAccessibility\";\nimport { AdvancedHaptics } from \"./lib/ux/AdvancedHaptics\";\nimport \"@fontsource/inter\";\nimport \"./index.css\";\nimport \"./styles/accessibility.css\";\n\nfunction AppContent() {\n  const [showMenu, setShowMenu] = useState(true);\n  const [isMiniApp, setIsMiniApp] = useState(false);\n  const { gamePhase } = useGameState();\n  const { setBackgroundMusic, setHitSound, setSuccessSound, setShootSound, setGameOverSound } = useAudio();\n  const { isReady, context, notifyReady } = useMiniKit();\n\n  useEffect(() => {\n    // Check if running in Mini App context\n    if (context || window.location.search.includes('miniapp=true')) {\n      setIsMiniApp(true);\n      setShowMenu(false);\n    }\n\n    // Initialize advanced systems\n    GameAccessibility.initialize();\n    AdvancedHaptics.initialize();\n\n    // Initialize audio elements\n    const backgroundMusic = new Audio(\"/sounds/acrade_background.mp3\");\n    const hitSound = new Audio(\"/sounds/hit.mp3\");\n    const successSound = new Audio(\"/sounds/success.mp3\");\n    const shootSound = new Audio(\"/sounds/hit.mp3\"); // Use hit sound for shooting with different settings\n    const gameOverSound = new Audio(\"/sounds/game_over.mp3\");\n\n    backgroundMusic.loop = true;\n    backgroundMusic.volume = 0.3;\n\n    setBackgroundMusic(backgroundMusic);\n    setHitSound(hitSound);\n    setSuccessSound(successSound);\n    setShootSound(shootSound);\n    setGameOverSound(gameOverSound);\n  }, [setBackgroundMusic, setHitSound, setSuccessSound, setShootSound, setGameOverSound]);\n\n  // Call sdk.actions.ready() when app content is fully loaded and visible\n  useEffect(() => {\n    if (isReady) {\n      const timer = setTimeout(() => {\n        (async () => {\n          await notifyReady();\n        })();\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [isReady, notifyReady]);\n\n  // Return to menu when game ends\n  useEffect(() => {\n    if (gamePhase === \"ended\") {\n      const timer = setTimeout(() => {\n        setShowMenu(true);\n      }, 3000); // Show menu after 3 seconds\n      return () => clearTimeout(timer);\n    }\n  }, [gamePhase]);\n\n  const handleStartGame = () => {\n    setShowMenu(false);\n  };\n\n  const handleBackToMenu = () => {\n    setShowMenu(true);\n  };\n\n  return (\n    <div className={`w-full h-full bg-black ${showMenu ? 'overflow-y-auto' : 'overflow-hidden'}`}>\n      <MiniAppHeader\n        title=\"Galaxiga Classic Space Shooter\"\n        description=\"Battle aliens in space, earn tokens, compete with friends in this classic arcade shooter reimagined for Web3.\"\n        imageUrl=\"https://galaxiga.game/og-image.png\"\n      />\n\n      {!isReady ? (\n        <div className=\"flex items-center justify-center h-full bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-12 h-12 border-4 border-cyan-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-white\">Loading Galaxiga...</p>\n          </div>\n        </div>\n      ) : isMiniApp ? (\n        <MiniAppGame />\n      ) : showMenu ? (\n        <MainMenu onStartGame={handleStartGame} />\n      ) : (\n        <Game onBackToMenu={handleBackToMenu} />\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <MiniKitProvider>\n      <AppContent />\n    </MiniKitProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3809},"client/src/index.css":{"content":"@import './styles/miniapp.css';\n@import './styles/modern-ui.css';\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: auto;\n    width: 100vw;\n    min-height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":522},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n\nconsole.log('✅ main.tsx loaded, React root mounted');\n\nwindow.addEventListener('load', () => {\n  const canvas = document.createElement('canvas');\n  canvas.width = 200;\n  canvas.height = 200;\n  document.body.appendChild(canvas);\n  const ctx = canvas.getContext('2d');\n  if (ctx) {\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(10, 10, 100, 100);\n    console.log('✅ Canvas smoke test successful');\n  } else {\n    console.error('❌ Canvas context creation failed');\n  }\n});\n","size_bytes":633},"client/src/components/Game.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport GameCanvas from \"./GameCanvas\";\nimport GameUI from \"./GameUI\";\nimport TouchControls from \"./TouchControls\";\nimport { useGameState } from \"../lib/stores/useGameState\";\nimport { useAudio } from \"../lib/stores/useAudio\";\nimport { useVibration } from \"../lib/stores/useVibration\";\n\ninterface GameProps {\n  onBackToMenu?: () => void;\n}\n\nexport default function Game({ onBackToMenu }: GameProps) {\n  const { gamePhase, startGame } = useGameState();\n  const { backgroundMusic, isMuted, playShoot, playGameOver } = useAudio();\n  const { \n    checkVibrationSupport, \n    vibrateShoot, \n    vibrateHit, \n    vibrateEnemyDestroyed, \n    vibratePlayerHit, \n    vibrateGameOver \n  } = useVibration();\n  const musicStarted = useRef(false);\n\n  useEffect(() => {\n    // Check vibration support on component mount\n    checkVibrationSupport();\n  }, [checkVibrationSupport]);\n\n  useEffect(() => {\n    // Control background music based on game phase and mute state\n    if (backgroundMusic) {\n      if (gamePhase === \"playing\" && !isMuted && !musicStarted.current) {\n        backgroundMusic.play().catch(console.log);\n        musicStarted.current = true;\n      } else if (gamePhase === \"playing\" && isMuted && musicStarted.current) {\n        backgroundMusic.pause();\n        backgroundMusic.currentTime = 0;\n      } else if (gamePhase !== \"playing\") {\n        backgroundMusic.pause();\n        backgroundMusic.currentTime = 0;\n        musicStarted.current = false;\n      }\n    }\n    \n    // Play game over sound and vibration when game ends\n    if (gamePhase === \"ended\") {\n      playGameOver();\n      vibrateGameOver();\n    }\n  }, [gamePhase, backgroundMusic, isMuted, playGameOver, vibrateGameOver]);\n\n  useEffect(() => {\n    // Listen for game events from game engine\n    const handleShootSound = () => {\n      playShoot();\n      vibrateShoot();\n    };\n    \n    const handleHitSound = () => {\n      vibrateHit();\n    };\n    \n    const handleEnemyDestroyed = () => {\n      vibrateEnemyDestroyed();\n    };\n    \n    const handlePlayerHit = () => {\n      vibratePlayerHit();\n    };\n    \n    window.addEventListener('playShootSound', handleShootSound);\n    window.addEventListener('playHitSound', handleHitSound);\n    window.addEventListener('enemyDestroyed', handleEnemyDestroyed);\n    window.addEventListener('playerHit', handlePlayerHit);\n    \n    return () => {\n      window.removeEventListener('playShootSound', handleShootSound);\n      window.removeEventListener('playHitSound', handleHitSound);\n      window.removeEventListener('enemyDestroyed', handleEnemyDestroyed);\n      window.removeEventListener('playerHit', handlePlayerHit);\n    };\n  }, [playShoot, vibrateShoot, vibrateHit, vibrateEnemyDestroyed, vibratePlayerHit]);\n\n  const handleStart = () => {\n    startGame();\n  };\n\n  return (\n    <div className=\"relative w-full h-full bg-gradient-to-b from-black via-purple-900/20 to-black\" data-game-phase={gamePhase}>\n      <GameCanvas />\n      <GameUI onStart={handleStart} onBackToMenu={onBackToMenu} />\n      {gamePhase === \"playing\" && <TouchControls />}\n    </div>\n  );\n}\n","size_bytes":3111},"client/src/components/GameCanvas.tsx":{"content":"import { useEffect, useRef, useCallback } from \"react\";\nimport { GameEngine } from \"../lib/gameEngine/GameEngine\";\nimport { useGameState } from \"../lib/stores/useGameState\";\n\nexport default function GameCanvas() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameEngineRef = useRef<GameEngine | null>(null);\n  const animationFrameRef = useRef<number>();\n  const { gamePhase, setScore, setLevel, setLives, endGame, incrementEnemiesKilled, incrementPowerUpsCollected, incrementBulletStats } = useGameState();\n\n  const resizeCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * window.devicePixelRatio;\n    canvas.height = rect.height * window.devicePixelRatio;\n    \n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    }\n  }, []);\n\n  // Initialize game engine once\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Initialize game engine only once\n    if (!gameEngineRef.current) {\n      const gameEngine = new GameEngine(ctx, canvas.width / window.devicePixelRatio, canvas.height / window.devicePixelRatio);\n      gameEngineRef.current = gameEngine;\n    }\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, [resizeCanvas]);\n\n  // Game loop effect\n  useEffect(() => {\n    if (!gameEngineRef.current) return;\n\n    // Set up event listeners for game stats tracking\n    const handleEnemyKilled = () => incrementEnemiesKilled();\n    const handlePowerUpCollected = () => incrementPowerUpsCollected();\n    const handleBulletFired = () => incrementBulletStats(true, false);\n    const handleBulletHit = () => incrementBulletStats(false, true);\n\n    window.addEventListener('enemyKilled', handleEnemyKilled);\n    window.addEventListener('powerUpCollected', handlePowerUpCollected);\n    window.addEventListener('bulletFired', handleBulletFired);\n    window.addEventListener('bulletHit', handleBulletHit);\n\n    const gameLoop = () => {\n      if (gamePhase === \"playing\") {\n        const gameState = gameEngineRef.current!.update();\n        \n        setScore(gameState.score);\n        setLevel(gameState.level);\n        setLives(gameState.lives);\n        \n        if (gameState.gameOver) {\n          // Pass final game statistics to the endGame function\n          endGame({\n            enemiesKilled: gameState.enemiesKilled,\n            maxLevel: gameState.level,\n          });\n          return;\n        }\n      }\n      \n      gameEngineRef.current!.render();\n      animationFrameRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      \n      // Clean up event listeners\n      window.removeEventListener('enemyKilled', handleEnemyKilled);\n      window.removeEventListener('powerUpCollected', handlePowerUpCollected);\n      window.removeEventListener('bulletFired', handleBulletFired);\n      window.removeEventListener('bulletHit', handleBulletHit);\n    };\n  }, [gamePhase, setScore, setLevel, setLives, endGame]);\n\n  useEffect(() => {\n    if (gameEngineRef.current) {\n      if (gamePhase === \"ready\") {\n        gameEngineRef.current.reset();\n      }\n    }\n  }, [gamePhase]);\n\n  // Handle keyboard input\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!gameEngineRef.current) return;\n      \n      switch (e.code) {\n        case 'ArrowLeft':\n        case 'KeyA':\n          gameEngineRef.current.player.moveLeft = true;\n          e.preventDefault();\n          break;\n        case 'ArrowRight':\n        case 'KeyD':\n          gameEngineRef.current.player.moveRight = true;\n          e.preventDefault();\n          break;\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (!gameEngineRef.current) return;\n      \n      switch (e.code) {\n        case 'ArrowLeft':\n        case 'KeyA':\n          gameEngineRef.current.player.moveLeft = false;\n          e.preventDefault();\n          break;\n        case 'ArrowRight':\n        case 'KeyD':\n          gameEngineRef.current.player.moveRight = false;\n          e.preventDefault();\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ touchAction: 'none' }}\n    />\n  );\n}\n","size_bytes":4872},"client/src/components/GameUI.tsx":{"content":"import { useGameState } from \"../lib/stores/useGameState\";\nimport { useAudio } from \"../lib/stores/useAudio\";\nimport { useVibration } from \"../lib/stores/useVibration\";\nimport { Button } from \"./ui/button\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Volume2, VolumeX, Play, RotateCcw, Pause, Star, Vibrate, ArrowLeft } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface GameUIProps {\n  onStart: () => void;\n  onBackToMenu?: () => void;\n}\n\nexport default function GameUI({ onStart, onBackToMenu }: GameUIProps) {\n  const { gamePhase, score, lives, level, restartGame, pauseGame, resumeGame } = useGameState();\n  const { toggleMute, isMuted } = useAudio();\n  const { toggleVibration, isVibrationEnabled, isVibrationSupported } = useVibration();\n  const [levelUpNotification, setLevelUpNotification] = useState<{ show: boolean; level: number } | null>(null);\n\n  // Listen for level up events\n  useEffect(() => {\n    const handleLevelUp = (event: CustomEvent) => {\n      setLevelUpNotification({ show: true, level: event.detail.level });\n      setTimeout(() => {\n        setLevelUpNotification(null);\n      }, 3000);\n    };\n\n    window.addEventListener('levelUp', handleLevelUp as EventListener);\n    return () => {\n      window.removeEventListener('levelUp', handleLevelUp as EventListener);\n    };\n  }, []);\n\n  if (gamePhase === \"ready\") {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n        <Card className=\"w-full max-w-xs sm:max-w-sm mx-3 sm:mx-4 bg-black/80 border-purple-500\">\n          <CardContent className=\"p-4 sm:p-6 text-center\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-white mb-2\">Starmint</h1>\n            <p className=\"text-purple-300 mb-4 sm:mb-6 text-sm sm:text-base\">Classic Space Shooter</p>\n            \n            <div className=\"space-y-3 sm:space-y-4\">\n              <Button \n                onClick={onStart}\n                className=\"w-full bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base min-h-[44px]\"\n              >\n                <Play className=\"mr-2 h-4 w-4\" />\n                Start Game\n              </Button>\n              \n              {onBackToMenu && (\n                <Button \n                  onClick={onBackToMenu}\n                  variant=\"outline\"\n                  className=\"w-full border-purple-500 text-purple-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Menu\n                </Button>\n              )}\n              \n              <Button \n                variant=\"outline\"\n                onClick={toggleMute}\n                className=\"w-full border-purple-500 text-purple-300 text-sm sm:text-base min-h-[44px]\"\n              >\n                {isMuted ? <VolumeX className=\"mr-2 h-4 w-4\" /> : <Volume2 className=\"mr-2 h-4 w-4\" />}\n                {isMuted ? \"Unmute\" : \"Mute\"} Sound\n              </Button>\n              \n              {isVibrationSupported && (\n                <Button \n                  variant=\"outline\"\n                  onClick={toggleVibration}\n                  className=\"w-full border-purple-500 text-purple-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <Vibrate className=\"mr-2 h-4 w-4\" />\n                  {isVibrationEnabled ? \"Disable\" : \"Enable\"} Vibration\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"mt-4 sm:mt-6 text-xs text-purple-400\">\n              <p>Desktop: Use Arrow Keys or WASD</p>\n              <p>Mobile: Touch to move</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (gamePhase === \"paused\") {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n        <Card className=\"w-full max-w-xs sm:max-w-sm mx-3 sm:mx-4 bg-black/80 border-yellow-500\">\n          <CardContent className=\"p-4 sm:p-6 text-center\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-white mb-2\">Game Paused</h2>\n            <div className=\"text-yellow-300 mb-3 sm:mb-4 space-y-1 text-sm sm:text-base\">\n              <p>Level: {level}</p>\n              <p>Score: {score}</p>\n              <p>Lives: {lives}</p>\n            </div>\n            \n            <div className=\"space-y-3 sm:space-y-4\">\n              <Button \n                onClick={resumeGame}\n                className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white text-sm sm:text-base min-h-[44px]\"\n              >\n                <Play className=\"mr-2 h-4 w-4\" />\n                Resume\n              </Button>\n              \n              <Button \n                onClick={restartGame}\n                variant=\"outline\"\n                className=\"w-full border-yellow-500 text-yellow-300 text-sm sm:text-base min-h-[44px]\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Restart\n              </Button>\n              \n              {onBackToMenu && (\n                <Button \n                  onClick={onBackToMenu}\n                  variant=\"outline\"\n                  className=\"w-full border-yellow-500 text-yellow-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Menu\n                </Button>\n              )}\n              \n              <Button \n                variant=\"outline\"\n                onClick={toggleMute}\n                className=\"w-full border-yellow-500 text-yellow-300 text-sm sm:text-base min-h-[44px]\"\n              >\n                {isMuted ? <VolumeX className=\"mr-2 h-4 w-4\" /> : <Volume2 className=\"mr-2 h-4 w-4\" />}\n                {isMuted ? \"Unmute\" : \"Mute\"} Sound\n              </Button>\n              \n              {isVibrationSupported && (\n                <Button \n                  variant=\"outline\"\n                  onClick={toggleVibration}\n                  className=\"w-full border-yellow-500 text-yellow-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <Vibrate className=\"mr-2 h-4 w-4\" />\n                  {isVibrationEnabled ? \"Disable\" : \"Enable\"} Vibration\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (gamePhase === \"ended\") {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n        <Card className=\"w-full max-w-xs sm:max-w-sm mx-3 sm:mx-4 bg-black/80 border-red-500\">\n          <CardContent className=\"p-4 sm:p-6 text-center\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-white mb-2\">Game Over</h2>\n            <div className=\"text-red-300 mb-3 sm:mb-4 space-y-1 text-sm sm:text-base\">\n              <p>Final Level: {level}</p>\n              <p>Final Score: {score}</p>\n            </div>\n            \n            <div className=\"space-y-3 sm:space-y-4\">\n              <Button \n                onClick={restartGame}\n                className=\"w-full bg-red-600 hover:bg-red-700 text-white text-sm sm:text-base min-h-[44px]\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Play Again\n              </Button>\n              \n              {onBackToMenu && (\n                <Button \n                  onClick={onBackToMenu}\n                  variant=\"outline\"\n                  className=\"w-full border-red-500 text-red-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Menu\n                </Button>\n              )}\n              \n              <Button \n                variant=\"outline\"\n                onClick={toggleMute}\n                className=\"w-full border-red-500 text-red-300 text-sm sm:text-base min-h-[44px]\"\n              >\n                {isMuted ? <VolumeX className=\"mr-2 h-4 w-4\" /> : <Volume2 className=\"mr-2 h-4 w-4\" />}\n                {isMuted ? \"Unmute\" : \"Mute\"} Sound\n              </Button>\n              \n              {isVibrationSupported && (\n                <Button \n                  variant=\"outline\"\n                  onClick={toggleVibration}\n                  className=\"w-full border-red-500 text-red-300 text-sm sm:text-base min-h-[44px]\"\n                >\n                  <Vibrate className=\"mr-2 h-4 w-4\" />\n                  {isVibrationEnabled ? \"Disable\" : \"Enable\"} Vibration\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Playing UI\n  return (\n    <>\n      <div className=\"absolute top-2 sm:top-4 left-2 sm:left-4 right-2 sm:right-4 flex justify-between items-start z-10\">\n        <div className=\"bg-black/60 rounded-lg p-2 sm:p-3 text-white space-y-1\">\n          <div className=\"text-base sm:text-lg font-bold text-purple-300\">Level {level}</div>\n          <div className=\"text-xs sm:text-sm\">Score: {score}</div>\n          <div className=\"text-xs sm:text-sm\">Lives: {lives}</div>\n        </div>\n        \n        <div className=\"flex gap-1 sm:gap-2\">\n          {onBackToMenu && (\n            <Button \n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onBackToMenu}\n              className=\"bg-black/60 border-cyan-500 text-cyan-300 min-h-[44px] min-w-[44px] p-2 sm:p-3\"\n            >\n              <ArrowLeft className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            </Button>\n          )}\n          \n          <Button \n            variant=\"outline\"\n            size=\"sm\"\n            onClick={pauseGame}\n            className=\"bg-black/60 border-yellow-500 text-yellow-300 min-h-[44px] min-w-[44px] p-2 sm:p-3\"\n          >\n            <Pause className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n          </Button>\n          \n          <Button \n            variant=\"outline\"\n            size=\"sm\"\n            onClick={toggleMute}\n            className=\"bg-black/60 border-purple-500 text-purple-300 min-h-[44px] min-w-[44px] p-2 sm:p-3\"\n          >\n            {isMuted ? <VolumeX className=\"h-4 w-4 sm:h-5 sm:w-5\" /> : <Volume2 className=\"h-4 w-4 sm:h-5 sm:w-5\" />}\n          </Button>\n          \n          {isVibrationSupported && (\n            <Button \n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleVibration}\n              className={`bg-black/60 min-h-[44px] min-w-[44px] p-2 sm:p-3 ${isVibrationEnabled ? 'border-green-500 text-green-300' : 'border-gray-500 text-gray-400'}`}\n            >\n              <Vibrate className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Level Up Notification */}\n      {levelUpNotification?.show && (\n        <div className=\"absolute inset-0 flex items-center justify-center z-50 pointer-events-none px-4\">\n          <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg p-4 sm:p-6 shadow-2xl border-2 border-yellow-400 animate-pulse max-w-xs sm:max-w-sm\">\n            <div className=\"text-center text-white\">\n              <Star className=\"h-8 w-8 sm:h-12 sm:w-12 mx-auto mb-2 text-yellow-400\" />\n              <h3 className=\"text-xl sm:text-2xl font-bold mb-1\">LEVEL UP!</h3>\n              <p className=\"text-base sm:text-lg\">Level {levelUpNotification.level}</p>\n              <p className=\"text-xs sm:text-sm text-yellow-200\">Difficulty increased!</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":11458},"client/src/components/MainMenu.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  GameController,\n  Trophy,\n  User,\n  ShoppingBag,\n  ArrowsClockwise,\n  Package,\n  TrendUp,\n  Sparkle,\n  Rocket\n} from \"@phosphor-icons/react\";\nimport LeaderboardPage from \"./pages/LeaderboardPage\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport ShopPage from \"./pages/ShopPage\";\nimport SwapPage from \"./pages/SwapPage\";\n\ntype Page = \"menu\" | \"play\" | \"leaderboard\" | \"profile\" | \"shop\" | \"swap\";\n\ninterface MainMenuProps {\n  onStartGame: () => void;\n}\n\nexport default function MainMenu({ onStartGame }: MainMenuProps) {\n  const [currentPage, setCurrentPage] = useState<Page>(\"menu\");\n\n  const handlePlayClick = () => {\n    setCurrentPage(\"play\");\n    onStartGame();\n  };\n\n  const navigateToPage = (page: Page) => {\n    setCurrentPage(page);\n  };\n\n  const navigateBack = () => {\n    setCurrentPage(\"menu\");\n  };\n\n  if (currentPage === \"leaderboard\") {\n    return <LeaderboardPage onBack={navigateBack} />;\n  }\n\n  if (currentPage === \"profile\") {\n    return <ProfilePage onBack={navigateBack} />;\n  }\n\n  if (currentPage === \"shop\") {\n    return <ShopPage onBack={navigateBack} />;\n  }\n\n  if (currentPage === \"swap\") {\n    return <SwapPage onBack={navigateBack} />;\n  }\n\n  return (\n    <div className=\"min-h-[100dvh] relative overflow-y-auto\" style={{\n      backgroundImage: 'url(/home.png)',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat'\n    }}>\n      {/* Overlay for better text readability */}\n      <div className=\"absolute inset-0 bg-black/30\" />\n\n      <div className=\"relative z-10 p-3 sm:p-4 min-h-[100dvh] flex flex-col\">\n        {/* Top Header */}\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"flex items-center justify-between mb-4 sm:mb-6 gap-2 sm:gap-0\"\n        >\n          {/* Looting Progress */}\n          <motion.div \n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"flex items-center space-x-2 sm:space-x-3 bg-black/40 backdrop-blur-sm rounded-2xl px-3 sm:px-5 py-2 sm:py-3 border border-cyan-400/40 shadow-lg shadow-cyan-500/10\"\n          >\n            <div className=\"p-1.5 sm:p-2 bg-gradient-to-r from-orange-500 to-amber-500 rounded-full\">\n              <Package weight=\"duotone\" className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-white\" />\n            </div>\n            <div>\n              <span className=\"text-white font-semibold text-xs sm:text-sm\">Looting</span>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <div className=\"w-12 sm:w-16 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                  <div className=\"w-0 h-full bg-gradient-to-r from-orange-500 to-amber-500 rounded-full transition-all duration-500\"></div>\n                </div>\n                <span className=\"text-gray-300 text-xs font-medium hidden sm:inline\">0/15</span>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Currency Display */}\n          <motion.div \n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"flex items-center space-x-2 sm:space-x-3 bg-black/40 backdrop-blur-sm rounded-2xl px-3 sm:px-5 py-2 sm:py-3 border border-cyan-400/40 shadow-lg shadow-cyan-500/10\"\n          >\n            <div className=\"p-1.5 sm:p-2 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full\">\n              <Sparkle weight=\"duotone\" className=\"w-3.5 h-3.5 sm:w-4 sm:h-4 text-white\" />\n            </div>\n            <div className=\"text-center\">\n              <span className=\"text-cyan-400 font-bold text-sm sm:text-lg\">0</span>\n              <p className=\"text-gray-400 text-xs\">Credits</p>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        {/* Starmint Balance Section */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"bg-gradient-to-r from-black/50 to-slate-900/50 backdrop-blur-sm rounded-3xl p-4 sm:p-6 mb-4 sm:mb-6 border border-cyan-400/30 shadow-xl shadow-cyan-500/5 relative overflow-hidden\"\n        >\n          {/* Animated background glow */}\n          <div className=\"absolute -top-1 -left-1 -right-1 -bottom-1 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-cyan-500/20 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 -z-10\"></div>\n          \n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between relative gap-4\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <div className=\"p-2 sm:p-3 bg-gradient-to-r from-cyan-500 to-purple-600 rounded-xl\">\n                <Rocket weight=\"duotone\" className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400 text-xl sm:text-2xl font-bold tracking-wide\">STARMINT</h1>\n                <p className=\"text-gray-400 text-xs sm:text-sm\">Classic Space Shooter</p>\n              </div>\n            </div>\n            <div className=\"flex space-x-4 sm:space-x-8 justify-center sm:justify-end\">\n              <div className=\"text-center\">\n                <div className=\"text-gray-300 font-medium text-xs sm:text-sm mb-1\">Balance</div>\n                <div className=\"text-lg sm:text-2xl font-bold text-white font-mono\">0<span className=\"text-cyan-400\">.</span>00</div>\n              </div>\n              <div className=\"w-px bg-gradient-to-b from-transparent via-gray-600 to-transparent\"></div>\n              <div className=\"text-center\">\n                <div className=\"text-gray-300 font-medium text-xs sm:text-sm mb-1\">Deposited</div>\n                <div className=\"text-lg sm:text-2xl font-bold text-white font-mono\">0<span className=\"text-cyan-400\">.</span>00</div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Main Menu Grid */}\n        <motion.div \n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"flex-1 grid grid-cols-2 gap-4 sm:gap-6\"\n        >\n          {/* Play Card */}\n          <motion.button\n            onClick={handlePlayClick}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: 5,\n              boxShadow: \"0 25px 50px -12px rgba(6, 182, 212, 0.25)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.6 }}\n            className=\"relative overflow-hidden min-h-[180px] sm:min-h-[200px] md:min-h-[220px] rounded-3xl border border-cyan-400/40 bg-gradient-to-br from-black/60 to-slate-900/60 group focus:outline-none focus:ring-2 focus:ring-cyan-400/50\"\n            style={{\n              backgroundImage: 'url(/play.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n            role=\"button\"\n            aria-label=\"Start playing Starmint Classic Space Shooter\"\n            tabIndex={0}\n          >\n            {/* Glassmorphism overlay */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/20\" />\n            \n            {/* Hover glow effect */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-purple-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n            \n            {/* Animated border glow */}\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-cyan-400 via-purple-500 to-cyan-400 rounded-3xl opacity-0 group-hover:opacity-30 blur transition-all duration-500 -z-10\" />\n            \n            <div className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-3 sm:space-y-4 p-4 sm:p-6\">\n              <div className=\"p-3 sm:p-4 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-2xl backdrop-blur-sm border border-white/10\">\n                <GameController weight=\"duotone\" className=\"w-6 h-6 sm:w-8 sm:h-8 text-cyan-400 group-hover:text-white transition-colors duration-300\" />\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-cyan-200 mb-2 leading-tight\">PLAY</h2>\n                <p className=\"text-gray-300 group-hover:text-gray-200 transition-colors duration-300 text-xs sm:text-sm font-medium\">Start your galactic adventure</p>\n              </div>\n            </div>\n          </motion.button>\n\n          {/* Leaderboard Card */}\n          <motion.button\n            onClick={() => navigateToPage(\"leaderboard\")}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: -5,\n              boxShadow: \"0 25px 50px -12px rgba(34, 197, 94, 0.25)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.7 }}\n            className=\"relative overflow-hidden min-h-[180px] sm:min-h-[200px] md:min-h-[220px] rounded-3xl border border-emerald-400/40 bg-gradient-to-br from-black/60 to-slate-900/60 group focus:outline-none focus:ring-2 focus:ring-emerald-400/50\"\n            style={{\n              backgroundImage: 'url(/leaderboard.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n            role=\"button\"\n            aria-label=\"View leaderboard and rankings\"\n            tabIndex={0}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/20\" />\n            <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/10 via-teal-500/10 to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-emerald-400 via-teal-500 to-emerald-400 rounded-3xl opacity-0 group-hover:opacity-30 blur transition-all duration-500 -z-10\" />\n            \n            <div className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-3 sm:space-y-4 p-4 sm:p-6\">\n              <div className=\"p-3 sm:p-4 bg-gradient-to-r from-emerald-500/20 to-teal-500/20 rounded-2xl backdrop-blur-sm border border-white/10\">\n                <Trophy weight=\"duotone\" className=\"w-6 h-6 sm:w-8 sm:h-8 text-emerald-400 group-hover:text-white transition-colors duration-300\" />\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-emerald-200 mb-2 leading-tight\">LEADERBOARD</h2>\n                <p className=\"text-gray-300 group-hover:text-gray-200 transition-colors duration-300 text-xs sm:text-sm font-medium\">Compete with space pilots</p>\n              </div>\n            </div>\n          </motion.button>\n\n          {/* Profile Card */}\n          <motion.button\n            onClick={() => navigateToPage(\"profile\")}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: 5,\n              boxShadow: \"0 25px 50px -12px rgba(147, 51, 234, 0.25)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.8 }}\n            className=\"relative overflow-hidden min-h-[180px] sm:min-h-[200px] md:min-h-[220px] rounded-3xl border border-purple-400/40 bg-gradient-to-br from-black/60 to-slate-900/60 group focus:outline-none focus:ring-2 focus:ring-purple-400/50\"\n            style={{\n              backgroundImage: 'url(/profile.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n            role=\"button\"\n            aria-label=\"View profile, inventory and achievements\"\n            tabIndex={0}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/20\" />\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 via-pink-500/10 to-purple-500/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-purple-400 via-pink-500 to-purple-400 rounded-3xl opacity-0 group-hover:opacity-30 blur transition-all duration-500 -z-10\" />\n            \n            <div className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-3 sm:space-y-4 p-4 sm:p-6\">\n              <div className=\"p-3 sm:p-4 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl backdrop-blur-sm border border-white/10\">\n                <User weight=\"duotone\" className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-400 group-hover:text-white transition-colors duration-300\" />\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-purple-200 mb-2 leading-tight\">PROFILE</h2>\n                <p className=\"text-gray-300 group-hover:text-gray-200 transition-colors duration-300 text-xs sm:text-sm font-medium\">Inventory & Achievements</p>\n              </div>\n            </div>\n          </motion.button>\n\n          {/* Shop Card */}\n          <motion.button\n            onClick={() => navigateToPage(\"shop\")}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: -5,\n              boxShadow: \"0 25px 50px -12px rgba(249, 115, 22, 0.25)\"\n            }}\n            whileTap={{ scale: 0.95 }}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.9 }}\n            className=\"relative overflow-hidden min-h-[180px] sm:min-h-[200px] md:min-h-[220px] rounded-3xl border border-orange-400/40 bg-gradient-to-br from-black/60 to-slate-900/60 group focus:outline-none focus:ring-2 focus:ring-orange-400/50\"\n            style={{\n              backgroundImage: 'url(/store.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n            role=\"button\"\n            aria-label=\"Visit the shop to purchase items and upgrades\"\n            tabIndex={0}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/20\" />\n            <div className=\"absolute inset-0 bg-gradient-to-br from-orange-500/10 via-red-500/10 to-orange-500/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-orange-400 via-red-500 to-orange-400 rounded-3xl opacity-0 group-hover:opacity-30 blur transition-all duration-500 -z-10\" />\n            \n            <div className=\"relative z-10 flex flex-col items-center justify-center h-full space-y-3 sm:space-y-4 p-4 sm:p-6\">\n              <div className=\"p-3 sm:p-4 bg-gradient-to-r from-orange-500/20 to-red-500/20 rounded-2xl backdrop-blur-sm border border-white/10\">\n                <ShoppingBag weight=\"duotone\" className=\"w-6 h-6 sm:w-8 sm:h-8 text-orange-400 group-hover:text-white transition-colors duration-300\" />\n              </div>\n              <div className=\"text-center\">\n                <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-white to-orange-200 mb-2 leading-tight\">SHOP</h2>\n                <p className=\"text-gray-300 group-hover:text-gray-200 transition-colors duration-300 text-xs sm:text-sm font-medium\">Purchase upgrades & items</p>\n              </div>\n            </div>\n          </motion.button>\n\n          {/* Swap Card - spans full width */}\n          <motion.button\n            onClick={() => navigateToPage(\"swap\")}\n            whileHover={{ \n              scale: 1.03, \n              rotateX: 2,\n              boxShadow: \"0 25px 50px -12px rgba(6, 182, 212, 0.25)\"\n            }}\n            whileTap={{ scale: 0.98 }}\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 1.0 }}\n            className=\"col-span-2 relative overflow-hidden min-h-[140px] sm:min-h-[150px] md:min-h-[160px] rounded-3xl border border-cyan-400/40 bg-gradient-to-br from-black/60 to-slate-900/60 group focus:outline-none focus:ring-2 focus:ring-cyan-400/50\"\n            style={{\n              backgroundImage: 'url(/swap.png)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n            role=\"button\"\n            aria-label=\"Access StarmintSwap to trade game currencies\"\n            tabIndex={0}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-black/20 via-transparent to-black/20\" />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-all duration-500\" />\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-cyan-400 via-blue-500 to-cyan-400 rounded-3xl opacity-0 group-hover:opacity-30 blur transition-all duration-500 -z-10\" />\n            \n            <div className=\"relative z-10 flex flex-col items-center justify-center space-y-3 sm:space-y-4 p-4 sm:p-6\">\n              <div className=\"flex items-center space-x-3 sm:space-x-4\">\n                <div className=\"p-2 sm:p-3 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-xl backdrop-blur-sm border border-white/10\">\n                  <ArrowsClockwise weight=\"duotone\" className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400 group-hover:text-white group-hover:animate-spin transition-all duration-300\" />\n                </div>\n                <div className=\"text-left\">\n                  <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-400 font-bold text-sm sm:text-lg tracking-wide\">StarmintSwap</span>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-white group-hover:text-cyan-100 transition-colors duration-300\">SWAP</h2>\n                </div>\n              </div>\n              <p className=\"text-gray-300 group-hover:text-gray-200 transition-colors duration-300 text-xs sm:text-sm font-medium text-center\">Trade currencies & tokens in the galactic marketplace</p>\n            </div>\n          </motion.button>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":18874},"client/src/components/MiniAppGame.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Share, Trophy, Users, Wallet, Star, Gift, Award, Bell } from 'lucide-react';\nimport { useMiniKit } from '../lib/miniapp/minikit';\nimport { CustomShareGenerator, type ShareImageData } from '../lib/sharing/customImages';\nimport { NFTMintingSystem, type Achievement } from '../lib/rewards/nftMinting';\nimport { PushNotificationSystem } from '../lib/notifications/pushSystem';\nimport GameCanvas from './GameCanvas';\nimport { useGameState } from '../lib/stores/useGameState';\nimport WalletConnect from './WalletConnect';\nimport SocialLeaderboard from './SocialLeaderboard';\n\nexport default function MiniAppGame() {\n  const { user, isConnected, signIn, shareScore, addToApp } = useMiniKit();\n  const { score, gamePhase, lives, level } = useGameState();\n  const [showAchievement, setShowAchievement] = useState(false);\n  const [newAchievement, setNewAchievement] = useState<any>(null);\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  const [showWallet, setShowWallet] = useState(false);\n  const [gameStats, setGameStats] = useState({\n    totalScore: 0,\n    highScore: 0,\n    enemiesDestroyed: 0,\n    gamesPlayed: 0,\n    timePlayedMinutes: 0,\n    streakDays: 1,\n    socialShares: 0,\n    friendsInvited: 0\n  });\n  const [newAchievements, setNewAchievements] = useState<Achievement[]>([]);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(false);\n\n  const shareGenerator = useRef(CustomShareGenerator.getInstance());\n  const nftSystem = useRef(NFTMintingSystem.getInstance());\n  const notificationSystem = useRef(PushNotificationSystem.getInstance());\n\n  useEffect(() => {\n    // Initialize notifications\n    const initNotifications = async () => {\n      const enabled = await notificationSystem.current.initialize();\n      setNotificationsEnabled(enabled);\n      \n      if (user && enabled) {\n        await notificationSystem.current.generateNotificationToken(user.fid);\n      }\n    };\n    \n    initNotifications();\n  }, [user]);\n\n  useEffect(() => {\n    // Check for new achievements when score changes\n    if (score > 0) {\n      const updatedStats = {\n        ...gameStats,\n        totalScore: gameStats.totalScore + score,\n        highScore: Math.max(gameStats.highScore, score),\n        enemiesDestroyed: gameStats.enemiesDestroyed + Math.floor(score / 100)\n      };\n      \n      const achievements = nftSystem.current.checkAchievements(updatedStats);\n      if (achievements.length > 0) {\n        setNewAchievements(achievements);\n        setNewAchievement(achievements[0]);\n        setShowAchievement(true);\n        \n        // Send achievement notification\n        if (user && notificationsEnabled) {\n          notificationSystem.current.sendSocialTriggerNotification(user.fid, {\n            type: 'achievement_unlocked',\n            achievement: achievements[0].name\n          });\n        }\n      }\n      \n      setGameStats(updatedStats);\n    }\n  }, [score, user, notificationsEnabled]);\n\n  useEffect(() => {\n    // Handle game end - update stats and check for social triggers\n    if (gamePhase === 'ended' && user && score > 0) {\n      const newStats = {\n        ...gameStats,\n        gamesPlayed: gameStats.gamesPlayed + 1,\n        highScore: Math.max(gameStats.highScore, score)\n      };\n      setGameStats(newStats);\n      \n      // Check if this is a new high score for notifications\n      if (score > gameStats.highScore && notificationsEnabled) {\n        // Could trigger friend notifications here\n        console.log('New high score achieved!', score);\n      }\n    }\n  }, [gamePhase, user, score, gameStats, notificationsEnabled]);\n\n  const handleShare = async () => {\n    if (score > 0 && user) {\n      // Generate viral share content\n      const shareData: ShareImageData = {\n        score,\n        rank: { global: 15, friends: 3 }, // Mock ranks\n        user: {\n          displayName: user.displayName || 'Anonymous',\n          pfpUrl: user.pfpUrl || '/default-avatar.png',\n          username: user.username || 'user'\n        },\n        achievements: newAchievements.map(a => a.name),\n        friendsPlaying: [] // Mock friends data\n      };\n      \n      const viralText = shareGenerator.current.generateViralShareText(shareData);\n      const personalizedUrl = shareGenerator.current.generatePersonalizedShareUrl(user.fid);\n      \n      // Share with enhanced content\n      await shareScore(score);\n      setGameStats(prev => ({ ...prev, socialShares: prev.socialShares + 1 }));\n      \n      console.log('Generated viral share:', viralText);\n      console.log('Personalized URL:', personalizedUrl);\n    }\n  };\n\n  const handleAddToApp = async () => {\n    await addToApp();\n  };\n\n  const handleWalletConnect = async () => {\n    if (!isConnected) {\n      await signIn();\n    } else {\n      setShowWallet(true);\n    }\n  };\n\n  return (\n    <div className=\"relative w-full h-full bg-gradient-to-b from-black via-purple-900/20 to-black\">\n      {/* Game Canvas */}\n      <GameCanvas />\n\n      {/* Mini App HUD */}\n      <div className=\"absolute top-0 left-0 right-0 z-50 p-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* User Profile */}\n          <div className=\"flex items-center space-x-3 bg-black/60 backdrop-blur-sm rounded-xl px-4 py-2 border border-cyan-500/30\">\n            {user ? (\n              <>\n                <img \n                  src={user.pfpUrl} \n                  alt={user.displayName}\n                  className=\"w-8 h-8 rounded-full\"\n                />\n                <div>\n                  <div className=\"text-white text-sm font-medium\">{user.displayName}</div>\n                  <div className=\"text-cyan-400 text-xs\">@{user.username}</div>\n                </div>\n              </>\n            ) : (\n              <button\n                onClick={signIn}\n                className=\"flex items-center space-x-2 text-cyan-400 hover:text-cyan-300 transition-colors\"\n              >\n                <Users className=\"w-5 h-5\" />\n                <span className=\"text-sm\">Sign In</span>\n              </button>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setShowLeaderboard(true)}\n              className=\"bg-black/60 backdrop-blur-sm rounded-xl p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300\"\n            >\n              <Trophy className=\"w-5 h-5 text-cyan-400\" />\n            </button>\n            \n            <button\n              onClick={handleShare}\n              className=\"bg-black/60 backdrop-blur-sm rounded-xl p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300\"\n            >\n              <Share className=\"w-5 h-5 text-cyan-400\" />\n            </button>\n            \n            <button\n              onClick={handleWalletConnect}\n              className=\"bg-black/60 backdrop-blur-sm rounded-xl p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300\"\n            >\n              <Wallet className=\"w-5 h-5 text-cyan-400\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Achievement Notification */}\n      {showAchievement && newAchievement && (\n        <div className=\"absolute inset-0 flex items-center justify-center z-50 bg-black/50\">\n          <div className=\"bg-slate-800/90 backdrop-blur-sm rounded-xl p-6 border border-yellow-500/50 max-w-sm mx-4 text-center\">\n            <div className=\"text-4xl mb-4\">{newAchievement.icon}</div>\n            <h3 className=\"text-xl font-bold text-yellow-400 mb-2\">Achievement Unlocked!</h3>\n            <h4 className=\"text-lg font-medium text-white mb-2\">{newAchievement.name}</h4>\n            <p className=\"text-gray-300 mb-4\">{newAchievement.description}</p>\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Gift className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-cyan-400 font-bold\">+{newAchievement.reward?.tokenReward || 0} STARMINT</span>\n            </div>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={async () => {\n                  if (newAchievement && user) {\n                    const result = await nftSystem.current.mintAchievementNFT(newAchievement);\n                    if (result.success) {\n                      alert('🎉 NFT minted successfully!');\n                    } else {\n                      alert('❌ Minting failed: ' + result.error);\n                    }\n                  }\n                  setShowAchievement(false);\n                }}\n                className=\"bg-purple-500 hover:bg-purple-400 text-white font-medium px-4 py-2 rounded-lg transition-colors duration-200 flex items-center space-x-2\"\n              >\n                <Award className=\"w-4 h-4\" />\n                <span>Mint NFT</span>\n              </button>\n              <button\n                onClick={() => setShowAchievement(false)}\n                className=\"bg-cyan-500 hover:bg-cyan-400 text-black font-medium px-4 py-2 rounded-lg transition-colors duration-200\"\n              >\n                Continue\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Game Ready State - Add to App Prompt */}\n      {gamePhase === 'ready' && (\n        <div className=\"absolute inset-0 flex items-center justify-center z-40\">\n          <div className=\"bg-slate-800/90 backdrop-blur-sm rounded-xl p-8 border border-cyan-500/50 max-w-md mx-4 text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Welcome to Galaxiga!</h2>\n            <p className=\"text-gray-300 mb-6\">\n              Save this game to your apps for quick access and notifications when friends beat your score!\n            </p>\n            \n            <div className=\"space-y-4\">\n              <button\n                onClick={handleAddToApp}\n                className=\"w-full bg-cyan-500 hover:bg-cyan-400 text-black font-bold py-3 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2\"\n              >\n                <Star className=\"w-5 h-5\" />\n                <span>Add to My Apps</span>\n              </button>\n              \n              <button\n                onClick={() => setShowLeaderboard(true)}\n                className=\"w-full bg-slate-700 hover:bg-slate-600 text-white font-medium py-3 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2\"\n              >\n                <Trophy className=\"w-5 h-5\" />\n                <span>View Leaderboard</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Game Stats Display */}\n      <div className=\"absolute bottom-4 left-4 right-4 z-40\">\n        <div className=\"bg-black/60 backdrop-blur-sm rounded-xl p-4 border border-cyan-500/30\">\n          <div className=\"grid grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-cyan-400 text-lg font-bold\">{score.toLocaleString()}</div>\n              <div className=\"text-gray-300 text-xs\">Score</div>\n            </div>\n            <div>\n              <div className=\"text-cyan-400 text-lg font-bold\">{gameStats.highScore.toLocaleString()}</div>\n              <div className=\"text-gray-300 text-xs\">Best</div>\n            </div>\n            <div>\n              <div className=\"text-cyan-400 text-lg font-bold\">{level}</div>\n              <div className=\"text-gray-300 text-xs\">Level</div>\n            </div>\n            <div>\n              <div className=\"text-cyan-400 text-lg font-bold\">{achievements.current.getTotalRewards()}</div>\n              <div className=\"text-gray-300 text-xs\">STARMINT</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11842},"client/src/components/MiniAppHeader.tsx":{"content":"import { useEffect } from 'react';\n\ninterface MiniAppHeaderProps {\n  title: string;\n  description: string;\n  imageUrl: string;\n}\n\nexport default function MiniAppHeader({ title, description, imageUrl }: MiniAppHeaderProps) {\n  useEffect(() => {\n    // Set up the Mini App embed metadata following latest Neynar standards\n    const embedData = {\n      version: \"next\",\n      imageUrl: imageUrl,\n      button: {\n        title: \"🚀 Play Starmint\",\n        action: {\n          type: \"launch_miniapp\",\n          name: \"Starmint Classic Space Shooter\",\n          url: window.location.origin,\n          splashImageUrl: window.location.origin + \"/spaceship.png\",\n          splashBackgroundColor: \"#0f172a\"\n        }\n      }\n    };\n\n    // Set the required fc:frame meta tag for Mini App embed\n    const frameMeta = document.querySelector('meta[name=\"fc:frame\"]') || document.createElement('meta');\n    frameMeta.setAttribute('name', 'fc:frame');\n    frameMeta.setAttribute('content', JSON.stringify(embedData));\n    if (!document.head.contains(frameMeta)) {\n      document.head.appendChild(frameMeta);\n    }\n\n    // Set Farcaster Mini App identifier\n    const miniAppMeta = document.querySelector('meta[name=\"fc:miniapp\"]') || document.createElement('meta');\n    miniAppMeta.setAttribute('name', 'fc:miniapp');\n    miniAppMeta.setAttribute('content', 'true');\n    if (!document.head.contains(miniAppMeta)) {\n      document.head.appendChild(miniAppMeta);\n    }\n\n    // Set Open Graph meta tags\n    const ogTitle = document.querySelector('meta[property=\"og:title\"]') || document.createElement('meta');\n    ogTitle.setAttribute('property', 'og:title');\n    ogTitle.setAttribute('content', title);\n    if (!document.head.contains(ogTitle)) {\n      document.head.appendChild(ogTitle);\n    }\n\n    const ogDescription = document.querySelector('meta[property=\"og:description\"]') || document.createElement('meta');\n    ogDescription.setAttribute('property', 'og:description');\n    ogDescription.setAttribute('content', description);\n    if (!document.head.contains(ogDescription)) {\n      document.head.appendChild(ogDescription);\n    }\n\n    const ogImage = document.querySelector('meta[property=\"og:image\"]') || document.createElement('meta');\n    ogImage.setAttribute('property', 'og:image');\n    ogImage.setAttribute('content', imageUrl);\n    if (!document.head.contains(ogImage)) {\n      document.head.appendChild(ogImage);\n    }\n\n    // Set additional Open Graph meta tags\n    const ogUrl = document.querySelector('meta[property=\"og:url\"]') || document.createElement('meta');\n    ogUrl.setAttribute('property', 'og:url');\n    ogUrl.setAttribute('content', window.location.origin);\n    if (!document.head.contains(ogUrl)) {\n      document.head.appendChild(ogUrl);\n    }\n\n    const ogType = document.querySelector('meta[property=\"og:type\"]') || document.createElement('meta');\n    ogType.setAttribute('property', 'og:type');\n    ogType.setAttribute('content', 'website');\n    if (!document.head.contains(ogType)) {\n      document.head.appendChild(ogType);\n    }\n\n    // Set Twitter meta tags for better sharing\n    const twitterCard = document.querySelector('meta[name=\"twitter:card\"]') || document.createElement('meta');\n    twitterCard.setAttribute('name', 'twitter:card');\n    twitterCard.setAttribute('content', 'summary_large_image');\n    if (!document.head.contains(twitterCard)) {\n      document.head.appendChild(twitterCard);\n    }\n\n    const twitterTitle = document.querySelector('meta[name=\"twitter:title\"]') || document.createElement('meta');\n    twitterTitle.setAttribute('name', 'twitter:title');\n    twitterTitle.setAttribute('content', title);\n    if (!document.head.contains(twitterTitle)) {\n      document.head.appendChild(twitterTitle);\n    }\n\n    const twitterDescription = document.querySelector('meta[name=\"twitter:description\"]') || document.createElement('meta');\n    twitterDescription.setAttribute('name', 'twitter:description');\n    twitterDescription.setAttribute('content', description);\n    if (!document.head.contains(twitterDescription)) {\n      document.head.appendChild(twitterDescription);\n    }\n\n    const twitterImage = document.querySelector('meta[name=\"twitter:image\"]') || document.createElement('meta');\n    twitterImage.setAttribute('name', 'twitter:image');\n    twitterImage.setAttribute('content', imageUrl);\n    if (!document.head.contains(twitterImage)) {\n      document.head.appendChild(twitterImage);\n    }\n\n    // Set page title\n    document.title = title;\n  }, [title, description, imageUrl]);\n\n  return null; // This component only sets meta tags\n}","size_bytes":4585},"client/src/components/SocialLeaderboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Trophy, Users, Crown, Medal, Award } from 'lucide-react';\nimport { SocialManager, type GameScore, type SocialUser } from '../lib/social/neynar';\nimport { useMiniKit } from '../lib/miniapp/minikit';\n\ninterface SocialLeaderboardProps {\n  onClose?: () => void;\n}\n\nexport default function SocialLeaderboard({ onClose }: SocialLeaderboardProps) {\n  const { user } = useMiniKit();\n  const [activeTab, setActiveTab] = useState<'global' | 'friends'>('friends');\n  const [globalLeaderboard, setGlobalLeaderboard] = useState<GameScore[]>([]);\n  const [friendsLeaderboard, setFriendsLeaderboard] = useState<GameScore[]>([]);\n  const [userRank, setUserRank] = useState<{ global: number; friends: number }>({ global: 0, friends: 0 });\n  const [isLoading, setIsLoading] = useState(true);\n  const [following, setFollowing] = useState<SocialUser[]>([]);\n\n  const socialManager = SocialManager.getInstance();\n\n  useEffect(() => {\n    if (user) {\n      loadLeaderboardData();\n    }\n  }, [user]);\n\n  const loadLeaderboardData = async () => {\n    if (!user) return;\n\n    setIsLoading(true);\n    try {\n      // Get user's following list for friends leaderboard\n      const userFollowing = await socialManager.getUserFollowing(user.fid);\n      setFollowing(userFollowing);\n\n      // Mock game scores data (in real app, this would come from your backend)\n      const mockScores: GameScore[] = [\n        {\n          fid: user.fid,\n          username: user.username || 'you',\n          displayName: user.displayName || 'You',\n          pfpUrl: user.pfpUrl || '/default-avatar.png',\n          score: 85000,\n          timestamp: new Date(),\n        },\n        // Add some mock friend scores based on following\n        ...userFollowing.slice(0, 8).map((friend, index) => ({\n          fid: friend.fid,\n          username: friend.username,\n          displayName: friend.displayName,\n          pfpUrl: friend.pfpUrl,\n          score: Math.floor(Math.random() * 150000) + 10000,\n          timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n        })),\n        // Add some mock global players\n        ...Array.from({ length: 20 }, (_, index) => ({\n          fid: 10000 + index,\n          username: `player${index + 1}`,\n          displayName: `Player ${index + 1}`,\n          pfpUrl: '/default-avatar.png',\n          score: Math.floor(Math.random() * 200000) + 5000,\n          timestamp: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n        }))\n      ];\n\n      const leaderboardData = socialManager.createSocialLeaderboard(mockScores, user.fid, userFollowing);\n      \n      setGlobalLeaderboard(leaderboardData.globalLeaderboard);\n      setFriendsLeaderboard(leaderboardData.friendsLeaderboard);\n      setUserRank(leaderboardData.userRank);\n\n    } catch (error) {\n      console.error('Failed to load leaderboard:', error);\n    }\n    setIsLoading(false);\n  };\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"w-5 h-5 text-yellow-400\" />;\n      case 2:\n        return <Medal className=\"w-5 h-5 text-gray-300\" />;\n      case 3:\n        return <Award className=\"w-5 h-5 text-amber-600\" />;\n      default:\n        return <span className=\"text-cyan-400 font-bold w-5 text-center\">{rank}</span>;\n    }\n  };\n\n  const currentLeaderboard = activeTab === 'global' ? globalLeaderboard : friendsLeaderboard;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-slate-800/90 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/50 max-w-md w-full max-h-[80vh] overflow-hidden flex flex-col\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-white flex items-center space-x-2\">\n            <Trophy className=\"w-6 h-6 text-cyan-400\" />\n            <span>Leaderboard</span>\n          </h2>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n\n        {/* Your Rank Summary */}\n        {user && (\n          <div className=\"bg-gradient-to-r from-cyan-900/30 to-purple-900/30 border border-cyan-500/30 rounded-lg p-4 mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src={user.pfpUrl || '/default-avatar.png'} \n                alt={user.displayName || 'You'}\n                className=\"w-12 h-12 rounded-full\"\n              />\n              <div className=\"flex-1\">\n                <div className=\"text-white font-bold\">{user.displayName || 'You'}</div>\n                <div className=\"text-sm text-gray-300\">\n                  Global: #{userRank.global || '—'} • Friends: #{userRank.friends || '—'}\n                </div>\n              </div>\n              <div className=\"text-cyan-400 font-bold\">\n                {currentLeaderboard.find(p => p.fid === user.fid)?.score.toLocaleString() || '0'}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Tabs */}\n        <div className=\"flex space-x-2 mb-4\">\n          <button\n            onClick={() => setActiveTab('friends')}\n            className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2 ${\n              activeTab === 'friends'\n                ? 'bg-cyan-500 text-black'\n                : 'bg-slate-700 text-gray-300 hover:text-white'\n            }`}\n          >\n            <Users className=\"w-4 h-4\" />\n            <span>Friends ({friendsLeaderboard.length})</span>\n          </button>\n          <button\n            onClick={() => setActiveTab('global')}\n            className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2 ${\n              activeTab === 'global'\n                ? 'bg-cyan-500 text-black'\n                : 'bg-slate-700 text-gray-300 hover:text-white'\n            }`}\n          >\n            <Trophy className=\"w-4 h-4\" />\n            <span>Global</span>\n          </button>\n        </div>\n\n        {/* Leaderboard List */}\n        <div className=\"flex-1 overflow-y-auto space-y-2\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-cyan-500 border-t-transparent rounded-full\"></div>\n              <span className=\"ml-2 text-cyan-400\">Loading rankings...</span>\n            </div>\n          ) : currentLeaderboard.length > 0 ? (\n            currentLeaderboard.slice(0, 50).map((player) => (\n              <div\n                key={player.fid}\n                className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${\n                  user && player.fid === user.fid\n                    ? 'bg-cyan-900/40 border border-cyan-500/40'\n                    : 'bg-slate-700/30 hover:bg-slate-700/50'\n                }`}\n              >\n                <div className=\"flex items-center justify-center w-6\">\n                  {getRankIcon(player.rank || 0)}\n                </div>\n                <img \n                  src={player.pfpUrl} \n                  alt={player.displayName}\n                  className=\"w-8 h-8 rounded-full\"\n                />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-white font-medium truncate\">{player.displayName}</div>\n                  <div className=\"text-cyan-400 text-xs\">@{player.username}</div>\n                </div>\n                <div className=\"text-cyan-400 font-bold\">\n                  {player.score.toLocaleString()}\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-gray-400\">\n              <Trophy className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n              <p>No scores available</p>\n              <p className=\"text-sm\">Be the first to play and set a score!</p>\n            </div>\n          )}\n        </div>\n\n        {/* Social Encouragement */}\n        <div className=\"mt-4 p-3 bg-slate-700/30 rounded-lg\">\n          <div className=\"text-sm text-gray-300 text-center\">\n            {activeTab === 'friends' ? (\n              <>🎯 Compete with {following.length} friends • Invite more to climb higher!</>\n            ) : (\n              <>🌟 Compete globally with {globalLeaderboard.length.toLocaleString()} players!</>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8621},"client/src/components/Toast.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { X, Rocket } from 'lucide-react';\n\ninterface ToastProps {\n  message: string;\n  isVisible: boolean;\n  onClose: () => void;\n  duration?: number;\n}\n\nexport default function Toast({ message, isVisible, onClose, duration = 3000 }: ToastProps) {\n  useEffect(() => {\n    if (isVisible && duration > 0) {\n      const timer = setTimeout(() => {\n        onClose();\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [isVisible, duration, onClose]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50 animate-in slide-in-from-top-2 duration-300\">\n      <div className=\"bg-slate-800/95 backdrop-blur-sm border border-cyan-500/50 rounded-xl p-4 shadow-2xl max-w-sm mx-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <Rocket className=\"w-5 h-5 text-cyan-400\" />\n          </div>\n          <p className=\"text-white text-sm font-medium flex-1\">{message}</p>\n          <button\n            onClick={onClose}\n            className=\"flex-shrink-0 text-gray-400 hover:text-white transition-colors\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1295},"client/src/components/TouchControls.tsx":{"content":"import { useRef, useEffect } from \"react\";\nimport { useGameState } from \"../lib/stores/useGameState\";\n\nexport default function TouchControls() {\n  const touchAreaRef = useRef<HTMLDivElement>(null);\n  const { gamePhase } = useGameState();\n\n  useEffect(() => {\n    if (gamePhase !== \"playing\") return;\n\n    const touchArea = touchAreaRef.current;\n    if (!touchArea) return;\n\n    let currentTouch: Touch | null = null;\n\n    const handleTouchStart = (e: TouchEvent) => {\n      e.preventDefault();\n      const touch = e.touches[0];\n      if (touch) {\n        currentTouch = touch;\n        updatePlayerPosition(touch.clientX);\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      e.preventDefault();\n      if (!currentTouch) return;\n      \n      const touch = Array.from(e.touches).find(t => t.identifier === currentTouch!.identifier);\n      if (touch) {\n        currentTouch = touch;\n        updatePlayerPosition(touch.clientX);\n      }\n    };\n\n    const handleTouchEnd = (e: TouchEvent) => {\n      e.preventDefault();\n      if (currentTouch) {\n        const touch = Array.from(e.changedTouches).find(t => t.identifier === currentTouch!.identifier);\n        if (touch) {\n          currentTouch = null;\n        }\n      }\n    };\n\n    const updatePlayerPosition = (touchX: number) => {\n      const rect = touchArea.getBoundingClientRect();\n      const relativeX = (touchX - rect.left) / rect.width;\n      \n      // Dispatch custom event with player position\n      window.dispatchEvent(new CustomEvent('playerMove', {\n        detail: { position: Math.max(0, Math.min(1, relativeX)) }\n      }));\n    };\n\n    touchArea.addEventListener('touchstart', handleTouchStart, { passive: false });\n    touchArea.addEventListener('touchmove', handleTouchMove, { passive: false });\n    touchArea.addEventListener('touchend', handleTouchEnd, { passive: false });\n\n    return () => {\n      touchArea.removeEventListener('touchstart', handleTouchStart);\n      touchArea.removeEventListener('touchmove', handleTouchMove);\n      touchArea.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [gamePhase]);\n\n  if (gamePhase !== \"playing\") return null;\n\n  return (\n    <div\n      ref={touchAreaRef}\n      className=\"absolute inset-0 z-5\"\n      style={{ touchAction: 'none' }}\n    >\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white/50 text-xs bg-black/30 px-2 py-1 rounded\">\n        Touch anywhere to move\n      </div>\n    </div>\n  );\n}\n","size_bytes":2472},"client/src/components/WalletConnect.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Wallet, ExternalLink, Award, Coins } from 'lucide-react';\nimport { WalletManager } from '../lib/web3/wallet';\nimport { useMiniKit } from '../lib/miniapp/minikit';\n\ninterface WalletConnectProps {\n  onClose?: () => void;\n}\n\nexport default function WalletConnect({ onClose }: WalletConnectProps) {\n  const { user, isConnected } = useMiniKit();\n  const [walletAddress, setWalletAddress] = useState<string>('');\n  const [balance, setBalance] = useState<string>('0');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOnBase, setIsOnBase] = useState(false);\n  const walletManager = WalletManager.getInstance();\n\n  useEffect(() => {\n    if (isConnected) {\n      loadWalletData();\n    }\n  }, [isConnected]);\n\n  const loadWalletData = async () => {\n    setIsLoading(true);\n    try {\n      const address = await walletManager.getAccount();\n      const balance = await walletManager.getBalance();\n      \n      if (address) {\n        setWalletAddress(address);\n        setBalance(balance ? (parseInt(balance) / 1e18).toFixed(4) : '0');\n        setIsOnBase(true); // Assume Base for now\n      }\n    } catch (error) {\n      console.error('Failed to load wallet data:', error);\n    }\n    setIsLoading(false);\n  };\n\n  const handleSwitchToBase = async () => {\n    setIsLoading(true);\n    const success = await walletManager.switchToBase();\n    if (success) {\n      setIsOnBase(true);\n      await loadWalletData();\n    }\n    setIsLoading(false);\n  };\n\n  const handleMintReward = async () => {\n    setIsLoading(true);\n    try {\n      // This would typically mint an NFT or token reward\n      // For demo purposes, we'll just show a success message\n      alert('🎉 Reward NFT minted successfully! Check your wallet.');\n    } catch (error) {\n      console.error('Failed to mint reward:', error);\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-slate-800/90 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/50 max-w-md w-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-white flex items-center space-x-2\">\n            <Wallet className=\"w-6 h-6 text-cyan-400\" />\n            <span>Base Wallet</span>\n          </h2>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n\n        {!isConnected ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-300 mb-4\">Sign in with Farcaster to connect your wallet</p>\n            <button className=\"bg-cyan-500 hover:bg-cyan-400 text-black font-bold py-2 px-6 rounded-lg transition-colors\">\n              Sign In First\n            </button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* User Info */}\n            {user && (\n              <div className=\"flex items-center space-x-3 p-3 bg-slate-700/50 rounded-lg\">\n                <img \n                  src={user.pfpUrl || '/default-avatar.png'} \n                  alt={user.displayName || 'User'}\n                  className=\"w-10 h-10 rounded-full\"\n                />\n                <div>\n                  <div className=\"text-white font-medium\">{user.displayName || 'Anonymous'}</div>\n                  <div className=\"text-cyan-400 text-sm\">@{user.username || 'user'}</div>\n                </div>\n              </div>\n            )}\n\n            {/* Wallet Address */}\n            {walletAddress && (\n              <div className=\"p-3 bg-slate-700/50 rounded-lg\">\n                <div className=\"text-sm text-gray-300 mb-1\">Wallet Address</div>\n                <div className=\"text-white font-mono text-sm break-all\">\n                  {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}\n                </div>\n              </div>\n            )}\n\n            {/* Balance */}\n            <div className=\"p-3 bg-slate-700/50 rounded-lg\">\n              <div className=\"text-sm text-gray-300 mb-1\">ETH Balance</div>\n              <div className=\"text-white font-bold text-lg\">{balance} ETH</div>\n            </div>\n\n            {/* Network Status */}\n            <div className={`p-3 rounded-lg ${isOnBase ? 'bg-green-900/30 border border-green-500/30' : 'bg-red-900/30 border border-red-500/30'}`}>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm text-gray-300\">Network</div>\n                  <div className={`font-medium ${isOnBase ? 'text-green-400' : 'text-red-400'}`}>\n                    {isOnBase ? 'Base Mainnet' : 'Wrong Network'}\n                  </div>\n                </div>\n                {!isOnBase && (\n                  <button\n                    onClick={handleSwitchToBase}\n                    disabled={isLoading}\n                    className=\"bg-blue-500 hover:bg-blue-400 text-white px-3 py-1 rounded text-sm transition-colors disabled:opacity-50\"\n                  >\n                    Switch to Base\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"grid grid-cols-2 gap-3 pt-4\">\n              <button\n                onClick={handleMintReward}\n                disabled={isLoading || !isOnBase}\n                className=\"bg-cyan-500 hover:bg-cyan-400 text-black font-bold py-3 rounded-lg transition-colors disabled:opacity-50 flex items-center justify-center space-x-2\"\n              >\n                <Award className=\"w-4 h-4\" />\n                <span>Mint Reward</span>\n              </button>\n              \n              <button\n                onClick={() => window.open('https://basescan.org', '_blank')}\n                className=\"bg-slate-600 hover:bg-slate-500 text-white font-medium py-3 rounded-lg transition-colors flex items-center justify-center space-x-2\"\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                <span>View on Basescan</span>\n              </button>\n            </div>\n\n            {/* Token Info */}\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-cyan-900/30 to-purple-900/30 border border-cyan-500/30 rounded-lg\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Coins className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-white font-medium\">STARMINT Tokens</span>\n              </div>\n              <div className=\"text-sm text-gray-300\">\n                Earn STARMINT tokens by playing, achieving high scores, and sharing with friends. \n                Use them to unlock special rewards and NFTs!\n              </div>\n            </div>\n\n            {isLoading && (\n              <div className=\"flex items-center justify-center py-2\">\n                <div className=\"animate-spin w-5 h-5 border-2 border-cyan-500 border-t-transparent rounded-full\"></div>\n                <span className=\"ml-2 text-cyan-400\">Processing...</span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7266},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/styles/accessibility.css":{"content":"/* High Contrast Mode */\n.high-contrast {\n    --primary: #ffffff;\n    --background: #000000;\n    --secondary: #ffff00;\n    --accent: #00ffff;\n    --text: #ffffff;\n    --border: #ffffff;\n  }\n  \n  .high-contrast * {\n    border-color: var(--border) !important;\n  }\n  \n  .high-contrast button {\n    background: var(--background) !important;\n    color: var(--text) !important;\n    border: 2px solid var(--border) !important;\n  }\n  \n  .high-contrast button:hover {\n    background: var(--secondary) !important;\n    color: var(--background) !important;\n  }\n  \n  /* Reduced Motion */\n  .reduce-motion * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n  \n  .reduce-motion *::before,\n  .reduce-motion *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n  \n  /* Font Size Scaling */\n  :root {\n    --font-scale: 1;\n  }\n  \n  * {\n    font-size: calc(var(--base-font-size, 1rem) * var(--font-scale));\n  }\n  \n  /* Keyboard Navigation */\n  .keyboard-only *:focus {\n    outline: 3px solid #00ffff !important;\n    outline-offset: 2px !important;\n    box-shadow: 0 0 0 3px rgba(0, 255, 255, 0.3) !important;\n  }\n  \n  .keyboard-only button:focus,\n  .keyboard-only input:focus,\n  .keyboard-only select:focus,\n  .keyboard-only textarea:focus {\n    transform: scale(1.05);\n    z-index: 100;\n  }\n  \n  /* Screen Reader Only Content */\n  .sr-only {\n    position: absolute !important;\n    left: -10000px !important;\n    width: 1px !important;\n    height: 1px !important;\n    overflow: hidden !important;\n  }\n  \n  /* Color Blind Mode Filters */\n  [data-color-blind-mode=\"protanopia\"] {\n    filter: url('#protanopia-filter');\n  }\n  \n  [data-color-blind-mode=\"deuteranopia\"] {\n    filter: url('#deuteranopia-filter');\n  }\n  \n  [data-color-blind-mode=\"tritanopia\"] {\n    filter: url('#tritanopia-filter');\n  }\n  \n  /* Focus Management */\n  .game-focus-ring {\n    position: relative;\n  }\n  \n  .game-focus-ring::after {\n    content: '';\n    position: absolute;\n    top: -3px;\n    left: -3px;\n    right: -3px;\n    bottom: -3px;\n    border: 2px solid transparent;\n    border-radius: inherit;\n    pointer-events: none;\n    opacity: 0;\n    transition: opacity 0.2s ease;\n  }\n  \n  .keyboard-only .game-focus-ring:focus::after {\n    border-color: #00ffff;\n    opacity: 1;\n  }\n  \n  /* Game-specific Accessibility */\n  .game-ui-overlay {\n    position: relative;\n    z-index: 1000;\n  }\n  \n  .accessibility-announcer {\n    position: absolute;\n    left: -10000px;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n  }\n  \n  /* Touch target sizing for mobile accessibility */\n  .touch-target {\n    min-width: 44px;\n    min-height: 44px;\n    padding: 8px;\n  }\n  \n  /* High contrast game elements */\n  .high-contrast .game-canvas {\n    border: 3px solid #ffffff;\n  }\n  \n  .high-contrast .player-ship {\n    filter: brightness(1.5) contrast(2);\n  }\n  \n  .high-contrast .enemy-ship {\n    filter: hue-rotate(60deg) brightness(1.5) contrast(2);\n  }\n  \n  /* Motion preference overrides */\n  @media (prefers-reduced-motion: reduce) {\n    .particle-effect {\n      animation: none !important;\n    }\n    \n    .explosion-effect {\n      animation: none !important;\n    }\n    \n    .power-up-glow {\n      animation: none !important;\n    }\n  }\n  \n  /* Color blind safe color palette */\n  .colorblind-safe-red { color: #d73027; }\n  .colorblind-safe-blue { color: #4575b4; }\n  .colorblind-safe-green { color: #74add1; }\n  .colorblind-safe-yellow { color: #fee090; }\n  .colorblind-safe-orange { color: #f46d43; }\n  .colorblind-safe-purple { color: #9970ab; }\n  \n  /* Focus indicators for game elements */\n  .game-button:focus-visible {\n    outline: 3px solid #00ffff;\n    outline-offset: 2px;\n  }\n  \n  /* Accessibility tooltips */\n  .a11y-tooltip {\n    position: relative;\n  }\n  \n  .a11y-tooltip::after {\n    content: attr(data-tooltip);\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    background: rgba(0, 0, 0, 0.9);\n    color: white;\n    padding: 8px 12px;\n    border-radius: 4px;\n    font-size: 14px;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s, visibility 0.3s;\n    z-index: 1000;\n  }\n  \n  .a11y-tooltip:hover::after,\n  .a11y-tooltip:focus::after {\n    opacity: 1;\n    visibility: visible;\n  }","size_bytes":4453},"client/src/styles/miniapp.css":{"content":"/* Mini App specific styles */\n\n/* Achievement notification animations */\n@keyframes achievementSlideIn {\n    from {\n      transform: translateY(-100px);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n  \n  @keyframes achievementPulse {\n    0%, 100% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.05);\n    }\n  }\n  \n  .achievement-notification {\n    position: fixed;\n    top: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 1000;\n    animation: achievementSlideIn 0.5s ease-out;\n  }\n  \n  .achievement-popup {\n    display: flex;\n    align-items: center;\n    background: rgba(15, 23, 42, 0.95);\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(34, 197, 94, 0.3);\n    border-radius: 12px;\n    padding: 16px;\n    color: white;\n    max-width: 350px;\n    animation: achievementPulse 2s ease-in-out;\n  }\n  \n  .achievement-icon {\n    font-size: 2rem;\n    margin-right: 12px;\n    animation: achievementPulse 2s ease-in-out infinite;\n  }\n  \n  .achievement-text h3 {\n    margin: 0 0 4px 0;\n    font-size: 0.875rem;\n    color: #22c55e;\n    font-weight: 600;\n  }\n  \n  .achievement-text p {\n    margin: 0 0 4px 0;\n    font-size: 1rem;\n    font-weight: 600;\n  }\n  \n  .achievement-text span {\n    font-size: 0.75rem;\n    color: #06b6d4;\n    font-weight: 500;\n  }\n  \n  /* Mini App frame optimizations */\n  .miniapp-container {\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n    position: relative;\n  }\n  \n  /* Mobile-first responsive design */\n  @media (max-width: 424px) {\n    .miniapp-container {\n      width: 100vw;\n      height: 100vh;\n    }\n    \n    .achievement-popup {\n      max-width: 90vw;\n      margin: 0 5vw;\n    }\n  }\n  \n  /* Desktop mini app size (424x695px) */\n  @media (min-width: 425px) {\n    .miniapp-container {\n      width: 424px;\n      height: 695px;\n      margin: 0 auto;\n    }\n  }\n  \n  /* Loading spinner for Mini App */\n  .miniapp-loader {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background: linear-gradient(to bottom right, #0f172a, #1e3a8a, #0f172a);\n  }\n  \n  .miniapp-spinner {\n    width: 48px;\n    height: 48px;\n    border: 4px solid rgba(6, 182, 212, 0.3);\n    border-top: 4px solid #06b6d4;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin-bottom: 16px;\n  }\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  \n  /* Social sharing animations */\n  .share-button {\n    transition: all 0.3s ease;\n  }\n  \n  .share-button:hover {\n    transform: scale(1.05);\n  }\n  \n  .share-button:active {\n    transform: scale(0.95);\n  }\n  \n  /* Leaderboard animations */\n  .leaderboard-entry {\n    transition: all 0.3s ease;\n  }\n  \n  .leaderboard-entry:hover {\n    transform: translateX(4px);\n    background: rgba(6, 182, 212, 0.1);\n  }\n  \n  /* Wallet connection button */\n  .wallet-button {\n    background: linear-gradient(45deg, #06b6d4, #0891b2);\n    transition: all 0.3s ease;\n  }\n  \n  .wallet-button:hover {\n    background: linear-gradient(45deg, #0891b2, #0e7490);\n    box-shadow: 0 4px 20px rgba(6, 182, 212, 0.3);\n  }\n  \n  /* Token rewards animation */\n  @keyframes tokenFloat {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-5px);\n    }\n  }\n  \n  .token-reward {\n    animation: tokenFloat 2s ease-in-out infinite;\n  }\n  \n  /* Mini App specific button styles */\n  .miniapp-button {\n    background: rgba(6, 182, 212, 0.1);\n    border: 1px solid rgba(6, 182, 212, 0.3);\n    color: #06b6d4;\n    border-radius: 12px;\n    padding: 12px 16px;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(8px);\n  }\n  \n  .miniapp-button:hover {\n    background: rgba(6, 182, 212, 0.2);\n    border-color: rgba(6, 182, 212, 0.6);\n    transform: translateY(-1px);\n  }\n  \n  .miniapp-button:active {\n    transform: translateY(0px);\n  }\n  \n  /* Frame-specific safe area handling */\n  .miniapp-safe-area {\n    padding-top: env(safe-area-inset-top);\n    padding-bottom: env(safe-area-inset-bottom);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n  \n  /* High contrast mode support */\n  @media (prefers-contrast: high) {\n    .achievement-popup {\n      border: 2px solid #ffffff;\n      background: #000000;\n    }\n    \n    .miniapp-button {\n      border: 2px solid #06b6d4;\n    }\n  }\n  \n  /* Reduced motion support */\n  @media (prefers-reduced-motion: reduce) {\n    .achievement-notification,\n    .achievement-popup,\n    .achievement-icon,\n    .miniapp-spinner,\n    .share-button,\n    .leaderboard-entry,\n    .wallet-button,\n    .token-reward,\n    .miniapp-button {\n      animation: none;\n      transition: none;\n    }\n  }","size_bytes":4765},"client/src/styles/modern-ui.css":{"content":"/* Modern UI Enhancements */\n\n/* Screen reader only content */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n  \n  /* Focus visible styles */\n  .focus\\:ring-2:focus-visible {\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);\n    border-radius: 0.75rem;\n  }\n  \n  /* High contrast mode support */\n  @media (prefers-contrast: high) {\n    .bg-gradient-to-r {\n      background: #000;\n    }\n    \n    .text-transparent {\n      color: #fff !important;\n      background: none !important;\n      -webkit-background-clip: unset !important;\n      background-clip: unset !important;\n    }\n    \n    .border-cyan-400\\/40,\n    .border-emerald-400\\/40,\n    .border-purple-400\\/40,\n    .border-orange-400\\/40 {\n      border-color: #fff !important;\n      border-width: 2px !important;\n    }\n  }\n  \n  /* Reduced motion support */\n  @media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n    \n    .group-hover\\:animate-spin:hover {\n      animation: none !important;\n    }\n    \n    .group-hover\\:rotate-180:hover {\n      transform: none !important;\n    }\n  }\n  \n  /* Custom animations */\n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 20px rgba(6, 182, 212, 0.3);\n    }\n    50% {\n      box-shadow: 0 0 40px rgba(6, 182, 212, 0.6);\n    }\n  }\n  \n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  /* Enhanced focus styles for game elements */\n  .game-button:focus-visible {\n    outline: 3px solid #06b6d4;\n    outline-offset: 2px;\n  }\n  \n  /* Smooth scrolling */\n  html {\n    scroll-behavior: smooth;\n  }\n  \n  /* Custom scrollbar for webkit browsers */\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(6, 182, 212, 0.6) transparent;\n  }\n  \n  *::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n  \n  *::-webkit-scrollbar-track {\n    background: rgba(15, 23, 42, 0.2);\n    border-radius: 4px;\n  }\n  \n  *::-webkit-scrollbar-thumb {\n    background: rgba(6, 182, 212, 0.4);\n    border-radius: 4px;\n    transition: background 0.2s ease;\n  }\n  \n  *::-webkit-scrollbar-thumb:hover {\n    background: rgba(6, 182, 212, 0.6);\n  }\n  \n  *::-webkit-scrollbar-corner {\n    background: transparent;\n  }\n  \n  /* Touch-friendly button sizing */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Glass morphism effects */\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  /* Improved text contrast */\n  .high-contrast-text {\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);\n  }","size_bytes":2893},"server/api/share/image.ts":{"content":"// API route for generating dynamic share images\nimport { Request, Response } from 'express';\n\nexport async function generateShareImage(req: Request, res: Response) {\n  try {\n    const {\n      score,\n      globalRank,\n      friendsRank,\n      username,\n      displayName,\n      pfpUrl,\n      achievements,\n      friendsCount\n    } = req.query;\n\n    // In a real implementation, you would:\n    // 1. Use a service like Canvas API or Puppeteer to generate dynamic images\n    // 2. Fetch user profile picture from pfpUrl\n    // 3. Create a branded image with score, rank, and social proof\n    // 4. Cache the generated image\n    // 5. Return the image URL or binary data\n\n    // For now, return a mock response\n    const shareImageData = {\n      success: true,\n      imageUrl: `https://starmint.game/share/${username}_${score}.png`,\n      metadata: {\n        title: `🚀 ${displayName} scored ${score} points in Starmint!`,\n        description: `Ranked #${friendsRank || globalRank} • Join the space battle!`,\n        score: parseInt(score as string),\n        ranks: { global: parseInt(globalRank as string), friends: parseInt(friendsRank as string) }\n      }\n    };\n\n    res.json(shareImageData);\n  } catch (error) {\n    console.error('Share image generation failed:', error);\n    res.status(500).json({ error: 'Failed to generate share image' });\n  }\n}","size_bytes":1354},"client/src/components/pages/LeaderboardPage.tsx":{"content":"import { ArrowLeft, Trophy, Star, Target, Filter, Users, Clock, Zap, Search, Loader2, Medal, TrendingUp, Calendar } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { usePlayerStats } from \"../../lib/stores/usePlayerStats\";\n\ninterface LeaderboardPageProps {\n  onBack: () => void;\n}\n\ninterface LeaderboardEntry {\n  userId: number;\n  username: string;\n  displayName?: string;\n  profilePicture?: string;\n  score: number;\n  totalScore?: number;\n  level?: number;\n  enemiesDestroyed?: number;\n  gamesPlayed?: number;\n  timePlayedMinutes?: number;\n}\n\ninterface LeaderboardMetadata {\n  timeframe: string;\n  category: string;\n  limit: number;\n  total: number;\n}\n\ntype TimeframeFilter = 'daily' | 'weekly' | 'monthly' | 'all';\ntype CategoryFilter = 'score' | 'level' | 'enemies';\n\nexport default function LeaderboardPage({ onBack }: LeaderboardPageProps) {\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\n  const [metadata, setMetadata] = useState<LeaderboardMetadata | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [timeframe, setTimeframe] = useState<TimeframeFilter>('all');\n  const [category, setCategory] = useState<CategoryFilter>('score');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const { stats, farcasterFid } = usePlayerStats();\n\n  const fetchLeaderboard = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const params = new URLSearchParams({\n        limit: '50',\n        timeframe,\n        category,\n      });\n      \n      const response = await fetch(`/api/game/leaderboard?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n      \n      const data = await response.json();\n      setLeaderboard(data.leaderboard || []);\n      setMetadata(data.metadata);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load leaderboard');\n      console.error('Leaderboard fetch error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, [timeframe, category]);\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Trophy className=\"w-5 h-5 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"w-5 h-5 text-gray-400\" />;\n    if (rank === 3) return <Medal className=\"w-5 h-5 text-orange-500\" />;\n    return <span className=\"text-sm font-bold\">{rank}</span>;\n  };\n\n  const getCategoryLabel = (cat: CategoryFilter) => {\n    switch (cat) {\n      case 'score': return 'High Score';\n      case 'level': return 'Level Reached';\n      case 'enemies': return 'Enemies Destroyed';\n      default: return 'Score';\n    }\n  };\n\n  const getCategoryValue = (entry: LeaderboardEntry) => {\n    switch (category) {\n      case 'score': return entry.score?.toLocaleString() || '0';\n      case 'level': return entry.level?.toString() || '1';\n      case 'enemies': return entry.enemiesDestroyed?.toLocaleString() || '0';\n      default: return entry.score?.toLocaleString() || '0';\n    }\n  };\n\n  const getTimeframeLabel = (tf: TimeframeFilter) => {\n    switch (tf) {\n      case 'daily': return 'Today';\n      case 'weekly': return 'This Week';\n      case 'monthly': return 'This Month';\n      case 'all': return 'All Time';\n    }\n  };\n\n  const filteredLeaderboard = leaderboard.filter(entry => {\n    if (!searchQuery) return true;\n    const query = searchQuery.toLowerCase();\n    return entry.username.toLowerCase().includes(query) ||\n           entry.displayName?.toLowerCase().includes(query);\n  });\n\n  const currentUserRank = filteredLeaderboard.findIndex(entry => entry.userId === farcasterFid) + 1;\n  const currentUserEntry = filteredLeaderboard.find(entry => entry.userId === farcasterFid);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 relative overflow-hidden\">\n      {/* Space background elements */}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      <div className=\"absolute top-10 right-20 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl\" />\n      <div className=\"absolute bottom-0 right-0 w-80 h-80 bg-cyan-400/30 rounded-full blur-2xl\" />\n      \n      {/* Stars */}\n      {Array.from({ length: 50 }, (_, i) => (\n        <div\n          key={i}\n          className=\"absolute w-1 h-1 bg-white rounded-full animate-pulse\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n            animationDelay: `${Math.random() * 3}s`,\n          }}\n        />\n      ))}\n\n      <div className=\"relative z-10 p-3 sm:p-4 h-screen flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4 sm:mb-6 gap-2\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4 flex-1 min-w-0\">\n            <button\n              onClick={onBack}\n              className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300 flex-shrink-0\"\n            >\n              <ArrowLeft className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n            </button>\n            <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n              <Trophy className=\"w-6 h-6 sm:w-8 sm:h-8 text-yellow-400 flex-shrink-0\" />\n              <div className=\"min-w-0 flex-1\">\n                <h1 className=\"text-lg sm:text-2xl md:text-3xl font-bold text-white leading-tight\">LEADERBOARD</h1>\n                <p className=\"text-cyan-400 text-xs sm:text-sm truncate\">{getCategoryLabel(category)} • {getTimeframeLabel(timeframe)}</p>\n              </div>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300 flex-shrink-0\"\n          >\n            <Filter className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n          </button>\n        </div>\n\n        {/* Filters */}\n        {showFilters && (\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-3 sm:p-4 border border-cyan-500/30 mb-4 sm:mb-6 space-y-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search players...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full bg-slate-700/50 border border-slate-600 rounded-lg pl-10 pr-4 py-2 text-white placeholder-gray-400 focus:border-cyan-500 focus:outline-none\"\n              />\n            </div>\n            \n            {/* Filter buttons */}\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-sm text-gray-300 mb-2 block\">Time Period</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {(['daily', 'weekly', 'monthly', 'all'] as TimeframeFilter[]).map((tf) => (\n                    <button\n                      key={tf}\n                      onClick={() => setTimeframe(tf)}\n                      className={`px-3 py-1 rounded-lg text-sm transition-all ${\n                        timeframe === tf\n                          ? 'bg-cyan-500 text-black'\n                          : 'bg-slate-700 text-gray-300 hover:bg-slate-600'\n                      }`}\n                    >\n                      <Clock className=\"w-4 h-4 inline mr-1\" />\n                      {getTimeframeLabel(tf)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"text-sm text-gray-300 mb-2 block\">Category</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {(['score', 'level', 'enemies'] as CategoryFilter[]).map((cat) => (\n                    <button\n                      key={cat}\n                      onClick={() => setCategory(cat)}\n                      className={`px-3 py-1 rounded-lg text-sm transition-all ${\n                        category === cat\n                          ? 'bg-cyan-500 text-black'\n                          : 'bg-slate-700 text-gray-300 hover:bg-slate-600'\n                      }`}\n                    >\n                      {cat === 'score' && <Trophy className=\"w-4 h-4 inline mr-1\" />}\n                      {cat === 'level' && <TrendingUp className=\"w-4 h-4 inline mr-1\" />}\n                      {cat === 'enemies' && <Zap className=\"w-4 h-4 inline mr-1\" />}\n                      {getCategoryLabel(cat)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Loading and Error States */}\n        {loading && (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Loader2 className=\"w-8 h-8 text-cyan-400 animate-spin mx-auto mb-4\" />\n              <p className=\"text-gray-300\">Loading leaderboard...</p>\n            </div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-red-400 mb-4\">Failed to load leaderboard</div>\n              <button\n                onClick={fetchLeaderboard}\n                className=\"bg-cyan-500 text-black px-4 py-2 rounded-lg font-semibold hover:bg-cyan-400 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Leaderboard List */}\n        {!loading && !error && (\n          <div className=\"flex-1 space-y-2 sm:space-y-3 overflow-y-auto\">\n            {filteredLeaderboard.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                <p className=\"text-gray-400\">\n                  {searchQuery ? 'No players found matching your search' : 'No players found for this timeframe'}\n                </p>\n              </div>\n            ) : (\n              filteredLeaderboard.map((player, index) => {\n                const rank = index + 1;\n                const isCurrentUser = player.userId === farcasterFid;\n                \n                return (\n                  <div\n                    key={player.userId}\n                    className={`bg-slate-800/60 backdrop-blur-sm rounded-xl p-3 sm:p-4 border transition-all duration-300 ${\n                      rank <= 3\n                        ? 'border-yellow-500/50 bg-gradient-to-r from-yellow-500/10 to-transparent'\n                        : isCurrentUser\n                        ? 'border-cyan-500/70 bg-gradient-to-r from-cyan-500/10 to-transparent'\n                        : 'border-cyan-500/30 hover:border-cyan-400/60'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div\n                          className={`flex items-center justify-center w-10 h-10 rounded-full font-bold ${\n                            rank === 1\n                              ? 'bg-yellow-500 text-black'\n                              : rank === 2\n                              ? 'bg-gray-400 text-black'\n                              : rank === 3\n                              ? 'bg-orange-500 text-black'\n                              : isCurrentUser\n                              ? 'bg-cyan-500 text-black'\n                              : 'bg-slate-700 text-white'\n                          }`}\n                        >\n                          {getRankIcon(rank)}\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          {player.profilePicture && (\n                            <img\n                              src={player.profilePicture}\n                              alt={player.username}\n                              className=\"w-8 h-8 rounded-full\"\n                            />\n                          )}\n                          <div>\n                            <h3 className=\"text-lg font-bold text-white flex items-center space-x-2\">\n                              <span>{player.displayName || player.username}</span>\n                              {isCurrentUser && <span className=\"text-cyan-400 text-sm\">(You)</span>}\n                            </h3>\n                            <div className=\"flex items-center space-x-2 text-sm text-gray-300\">\n                              <Target className=\"w-4 h-4\" />\n                              <span>Level {player.level || 1}</span>\n                              {player.gamesPlayed && (\n                                <span className=\"text-gray-500\">• {player.gamesPlayed} games</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-xl font-bold text-cyan-400\">\n                          {getCategoryValue(player)}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">\n                          {category === 'score' ? 'points' : category === 'level' ? 'max level' : 'destroyed'}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        )}\n\n        {/* Your Rank */}\n        {!loading && currentUserEntry && (\n          <div className=\"mt-4 sm:mt-6 bg-slate-800/80 backdrop-blur-sm rounded-xl p-3 sm:p-4 border border-cyan-500/50\">\n            <div className=\"flex items-center justify-between gap-3\">\n              <div className=\"flex items-center space-x-3 sm:space-x-4 min-w-0 flex-1\">\n                <div className=\"flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-cyan-500 text-black font-bold flex-shrink-0\">\n                  {currentUserRank || '?'}\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <h3 className=\"text-base sm:text-lg font-bold text-white\">Your Rank</h3>\n                  <div className=\"flex items-center space-x-2 text-xs sm:text-sm text-gray-300\">\n                    <Target className=\"w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0\" />\n                    <span className=\"truncate\">Level {currentUserEntry.level || 1}</span>\n                    {currentUserEntry.gamesPlayed && (\n                      <span className=\"text-gray-500 hidden sm:inline\">• {currentUserEntry.gamesPlayed} games</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right flex-shrink-0\">\n                <div className=\"text-lg sm:text-xl font-bold text-cyan-400\">\n                  {getCategoryValue(currentUserEntry)}\n                </div>\n                <div className=\"text-xs sm:text-sm text-gray-400\">\n                  {category === 'score' ? 'points' : category === 'level' ? 'max level' : 'destroyed'}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Stats Summary */}\n        {!loading && metadata && (\n          <div className=\"mt-3 sm:mt-4 bg-slate-800/60 backdrop-blur-sm rounded-xl p-3 border border-cyan-500/30\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-0 text-sm text-gray-300\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-4 h-4 flex-shrink-0\" />\n                <span className=\"truncate\">Showing {metadata.total} players</span>\n              </div>\n              <div className=\"flex items-center space-x-2 sm:space-x-4 text-xs sm:text-sm\">\n                <span className=\"truncate\">{getTimeframeLabel(timeframe)}</span>\n                <span>•</span>\n                <span className=\"truncate\">{getCategoryLabel(category)}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16571},"client/src/components/pages/ProfilePage.tsx":{"content":"import { ArrowLeft, User, Trophy, Target, Package, Star, Zap, Shield, Rocket, Crown, Medal, TrendingUp, Clock, Gamepad2, Calendar, Award, Users, Flame, ShoppingBag, Gift, Activity, Heart } from \"lucide-react\";\nimport { useMiniKit } from \"../../lib/miniapp/minikit\";\nimport { usePlayerStats } from \"../../lib/stores/usePlayerStats\";\nimport { useEffect, useState } from \"react\";\nimport { ACHIEVEMENTS } from \"../../lib/web3/achievements\";\nimport { SocialLeaderboard } from \"../../lib/social/leaderboard\";\n\ninterface ProfilePageProps {\n  onBack: () => void;\n}\n\n// Real inventory will be loaded from purchase history\n\nexport default function ProfilePage({ onBack }: ProfilePageProps) {\n  const { user } = useMiniKit();\n  const { stats, isLoading, loadPlayerStats, setUserData, checkDailyLogin, purchaseHistory, currentStreak, lastLoginDate, farcasterFid } = usePlayerStats();\n  const [playerRank, setPlayerRank] = useState<number | null>(null);\n  const [friendsRanking, setFriendsRanking] = useState<any[]>([]);\n  const [totalRewards, setTotalRewards] = useState(0);\n  const [recentActivity, setRecentActivity] = useState<any[]>([]);\n  const [gameSessions, setGameSessions] = useState<any[]>([]);\n  const [loadingHistory, setLoadingHistory] = useState(false);\n\n  useEffect(() => {\n    console.log('🔍 ProfilePage useEffect triggered with user:', user);\n    \n    let activeUser = user;\n    \n    // If no user from MiniKit hook, check global context\n    if (!activeUser) {\n      console.log('❌ No MiniKit user context from hook, checking global context...');\n      const globalContext = (window as any).__miniKitContext__;\n      if (globalContext?.user) {\n        console.log('✅ Found user in global MiniKit context:', globalContext.user);\n        activeUser = globalContext.user;\n      }\n    }\n    \n    if (activeUser) {\n      console.log('👤 Using user context:', { fid: activeUser.fid, displayName: activeUser.displayName });\n      // Set user data in the store\n      setUserData(activeUser.fid, activeUser.displayName || `Player ${activeUser.fid}`, activeUser.pfpUrl || '');\n      // Load player statistics\n      console.log('📊 About to call loadPlayerStats with FID:', activeUser.fid);\n      loadPlayerStats(activeUser.fid);\n      \n      // Check daily login\n      checkDailyLogin();\n      \n      // Load social data\n      loadSocialData(activeUser.fid);\n      \n      // Load detailed game history\n      loadGameHistory(activeUser.fid);\n    } else {\n      console.log('❌ No user context available anywhere, checking for persisted data...');\n      \n      // Fallback: try to get user data from persisted store or JWT token\n      const persistedFid = farcasterFid;\n      console.log('🔄 Checking persisted FID from store:', persistedFid);\n      \n      if (persistedFid) {\n        console.log('✅ Using persisted FID for data loading:', persistedFid);\n        // Load data with persisted FID\n        loadPlayerStats(persistedFid);\n        checkDailyLogin();\n        loadSocialData(persistedFid);\n        loadGameHistory(persistedFid);\n      } else {\n        console.log('🔑 No persisted FID available, using fallback data...');\n        // No user data available, component will show default state\n      }\n    }\n  }, [user, loadPlayerStats, setUserData, checkDailyLogin, farcasterFid]);\n\n  // Listen for game completion events to refresh profile data\n  useEffect(() => {\n    const handleGameCompleted = (event: CustomEvent) => {\n      console.log('🎮 Game completed event received:', event.detail);\n      \n      // Use same fallback mechanism as initial load\n      let refreshUser = user;\n      if (!refreshUser) {\n        const globalContext = (window as any).__miniKitContext__;\n        if (globalContext?.user) {\n          console.log('🔄 Using global context for game completion refresh:', globalContext.user);\n          refreshUser = globalContext.user;\n        }\n      }\n      \n      if (refreshUser) {\n        // Refresh player stats and game history after game completion\n        setTimeout(() => {\n          loadPlayerStats(refreshUser.fid);\n          loadGameHistory(refreshUser.fid);\n          console.log('📊 Profile data refreshed after game completion');\n        }, 1000); // Small delay to ensure server-side processing is complete\n      } else if (farcasterFid) {\n        // Fallback to stored FID\n        console.log('🔄 Using stored FID for game completion refresh:', farcasterFid);\n        setTimeout(() => {\n          loadPlayerStats(farcasterFid);\n          loadGameHistory(farcasterFid);\n          console.log('📊 Profile data refreshed using stored FID');\n        }, 1000);\n      } else {\n        console.log('⚠️ No user context available for game completion refresh');\n      }\n    };\n\n    window.addEventListener('gameCompleted', handleGameCompleted as EventListener);\n    \n    return () => {\n      window.removeEventListener('gameCompleted', handleGameCompleted as EventListener);\n    };\n  }, [user, loadPlayerStats, farcasterFid]);\n\n  const loadSocialData = async (fid: number) => {\n    try {\n      const leaderboard = SocialLeaderboard.getInstance();\n      \n      // Get player's global rank (mock implementation)\n      const globalBoard = await leaderboard.getLeaderboard({ timeframe: 'allTime', friends: false });\n      const rank = globalBoard.findIndex(entry => entry.fid === fid) + 1;\n      setPlayerRank(rank > 0 ? rank : null);\n      \n      // Get friends ranking\n      const friends = await leaderboard.getFriendsRanking(fid);\n      setFriendsRanking(friends.slice(0, 3)); // Top 3 friends\n    } catch (error) {\n      console.error('Failed to load social data:', error);\n    }\n  };\n\n  const loadGameHistory = async (fid: number) => {\n    setLoadingHistory(true);\n    try {\n      const response = await fetch(`/api/player-sessions/${fid}?limit=20`);\n      if (response.ok) {\n        const data = await response.json();\n        const sessions = Array.isArray(data.sessions) ? data.sessions : [];\n        setGameSessions(sessions);\n        \n        // Create recent activity from game sessions with validation\n        const activities = sessions.slice(0, 5).map((session: any, index: number) => {\n          // Validate session data and provide fallbacks\n          const safeScore = typeof session.score === 'number' ? session.score : 0;\n          const safeLevel = typeof session.level === 'number' ? session.level : 1;\n          const safeGameTime = typeof session.gameTime === 'number' ? session.gameTime : 0;\n          const safePlayedAt = session.playedAt ? new Date(session.playedAt) : new Date();\n          \n          return {\n            id: `session-${session.id || index}`,\n            type: 'game',\n            title: `Game Session #${sessions.length - index}`,\n            description: `Score: ${safeScore.toLocaleString()} | Level: ${safeLevel} | ${Math.round(safeGameTime / 60000)}m ${Math.round((safeGameTime % 60000) / 1000)}s`,\n            timestamp: safePlayedAt,\n            icon: 'gamepad',\n            value: safeScore\n          };\n        });\n        setRecentActivity(activities);\n      } else {\n        console.warn('Failed to fetch game sessions:', response.status, response.statusText);\n        setGameSessions([]);\n        setRecentActivity([]);\n      }\n    } catch (error) {\n      console.error('Failed to load game history:', error);\n      setGameSessions([]);\n      setRecentActivity([]);\n    } finally {\n      setLoadingHistory(false);\n    }\n  };\n\n  // Calculate experience level based on total score\n  const experienceLevel = Math.floor(stats.totalScore / 1000) + 1;\n  const nextLevelXP = experienceLevel * 1000;\n  const currentLevelProgress = stats.totalScore % 1000;\n\n  // Format time played\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  // Format game time from milliseconds\n  const formatGameTime = (milliseconds: number) => {\n    const minutes = Math.floor(milliseconds / 60000);\n    const seconds = Math.floor((milliseconds % 60000) / 1000);\n    return `${minutes}m ${seconds}s`;\n  };\n\n  // Calculate average score\n  const averageScore = stats.gamesPlayed > 0 ? Math.round(stats.totalScore / stats.gamesPlayed) : 0;\n  \n  // Calculate accuracy from game sessions with error handling\n  const calculateOverallAccuracy = () => {\n    if (!Array.isArray(gameSessions) || gameSessions.length === 0) return 0;\n    const accuracySessions = gameSessions.filter(s => \n      s && typeof s.accuracy === 'number' && s.accuracy >= 0 && s.accuracy <= 1\n    );\n    if (accuracySessions.length === 0) return 0;\n    const totalAccuracy = accuracySessions.reduce((sum, s) => sum + (s.accuracy * 100), 0);\n    return Math.round(totalAccuracy / accuracySessions.length);\n  };\n  \n  const overallAccuracy = calculateOverallAccuracy();\n\n  // Calculate total STARMINT rewards\n  useEffect(() => {\n    const unlockedAchievements = ACHIEVEMENTS.filter(achievement => achievement.condition(stats));\n    const totalTokens = unlockedAchievements.reduce((sum, achievement) => sum + achievement.reward, 0);\n    setTotalRewards(totalTokens);\n  }, [stats]);\n\n  // Map achievements with unlock status - show all achievements\n  const achievementsWithStatus = ACHIEVEMENTS.map(achievement => ({\n    ...achievement,\n    unlocked: achievement.condition(stats),\n    progress: getAchievementProgress(achievement, stats)\n  }));\n\n  // Calculate progress for locked achievements\n  function getAchievementProgress(achievement: any, stats: any): number {\n    if (achievement.condition(stats)) return 100;\n    \n    switch (achievement.id) {\n      case 'centurion': return Math.min((stats.enemiesDestroyed / 100) * 100, 100);\n      case 'high_scorer': return Math.min((stats.highScore / 10000) * 100, 100);\n      case 'social_butterfly': return Math.min((stats.socialShares / 5) * 100, 100);\n      case 'friend_magnet': return Math.min((stats.friendsInvited / 3) * 100, 100);\n      case 'dedicated_player': return Math.min((stats.streakDays / 7) * 100, 100);\n      case 'marathon_gamer': return Math.min((stats.timePlayedMinutes / 60) * 100, 100);\n      default: return 0;\n    }\n  }\n\n  // Get player title based on achievements and stats\n  const getPlayerTitle = () => {\n    if (stats.highScore > 50000) return { title: \"Space Legend\", color: \"text-purple-400\", icon: Crown };\n    if (stats.enemiesDestroyed > 500) return { title: \"Elite Warrior\", color: \"text-orange-400\", icon: Medal };\n    if (stats.gamesPlayed > 50) return { title: \"Veteran Pilot\", color: \"text-blue-400\", icon: Award };\n    if (achievementsWithStatus.filter(a => a.unlocked).length > 3) return { title: \"Achievement Hunter\", color: \"text-green-400\", icon: Trophy };\n    return { title: \"Space Cadet\", color: \"text-gray-400\", icon: User };\n  };\n\n  const playerTitle = getPlayerTitle();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 relative overflow-hidden\">\n      {/* Space background elements */}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      <div className=\"absolute top-10 right-20 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl\" />\n      <div className=\"absolute bottom-0 right-0 w-80 h-80 bg-cyan-400/30 rounded-full blur-2xl\" />\n      \n      {/* Stars */}\n      {Array.from({ length: 50 }, (_, i) => (\n        <div\n          key={i}\n          className=\"absolute w-1 h-1 bg-white rounded-full animate-pulse\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n            animationDelay: `${Math.random() * 3}s`,\n          }}\n        />\n      ))}\n\n      <div className=\"relative z-10 p-3 sm:p-4 h-screen flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-2 sm:space-x-4 mb-4 sm:mb-6\">\n          <button\n            onClick={onBack}\n            className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300 min-h-[44px] min-w-[44px] flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n          </button>\n          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n            <User className=\"w-6 h-6 sm:w-8 sm:h-8 text-cyan-400\" />\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-white\">PROFILE</h1>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto space-y-3 sm:space-y-4 md:space-y-6\">\n          {/* Player Stats */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center space-x-3 sm:space-x-4 mb-3 sm:mb-4\">\n              {user ? (\n                <div className=\"relative w-12 h-12 sm:w-16 sm:h-16\">\n                  {user.pfpUrl ? (\n                    <img\n                      src={user.pfpUrl}\n                      alt={user.displayName || 'User profile'}\n                      className=\"w-full h-full rounded-full border-2 border-cyan-400 object-cover\"\n                      onError={(e) => {\n                        // Fallback to default avatar if image fails to load\n                        console.log('Profile picture failed to load:', user.pfpUrl);\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                        const fallbackDiv = target.nextElementSibling as HTMLDivElement;\n                        if (fallbackDiv) {\n                          fallbackDiv.classList.remove('hidden');\n                        }\n                      }}\n                      onLoad={() => {\n                        console.log('Profile picture loaded successfully:', user.pfpUrl);\n                      }}\n                    />\n                  ) : null}\n                  <div className={`absolute inset-0 w-full h-full bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center border-2 border-cyan-400 ${user.pfpUrl ? 'hidden' : ''}`}>\n                    <span className=\"text-white font-bold text-sm sm:text-base\">\n                      {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}\n                    </span>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center border-2 border-cyan-400\">\n                  <User className=\"w-6 h-6 sm:w-8 sm:h-8 text-white\" />\n                </div>\n              )}\n              <div className=\"flex-1\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-2 mb-1\">\n                  <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold text-white truncate\">\n                    {user ? user.displayName : 'Player'}\n                  </h2>\n                  {playerRank && playerRank <= 10 && (\n                    <Crown className=\"w-4 h-4 sm:w-5 sm:h-5 text-yellow-400 mt-1 sm:mt-0\" />\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-1 sm:space-x-2 mb-1\">\n                  <playerTitle.icon className={`w-3 h-3 sm:w-4 sm:h-4 ${playerTitle.color}`} />\n                  <span className={`text-xs sm:text-sm font-medium ${playerTitle.color}`}>{playerTitle.title}</span>\n                </div>\n                <div className=\"text-gray-300 text-xs sm:text-sm space-y-1\">\n                  {user && (\n                    <div className=\"text-cyan-400\">@{user.username}</div>\n                  )}\n                  {playerRank && (\n                    <div>Rank #{playerRank.toLocaleString()}</div>\n                  )}\n                </div>\n                <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:space-x-3 mt-2\">\n                  <div className=\"text-xs sm:text-sm shrink-0\">\n                    <span className=\"text-gray-400\">Level </span>\n                    <span className=\"text-white font-bold\">{experienceLevel}</span>\n                  </div>\n                  <div className=\"flex-1 bg-slate-700 rounded-full h-1.5 sm:h-2\">\n                    <div \n                      className=\"bg-gradient-to-r from-cyan-400 to-blue-500 h-1.5 sm:h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${(currentLevelProgress / 1000) * 100}%` }}\n                    />\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-gray-400 shrink-0\">\n                    {currentLevelProgress}/{1000} XP\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2 sm:gap-4 mb-3 sm:mb-4\">\n              <div className=\"text-center bg-slate-700/30 rounded-lg p-2 sm:p-3\">\n                <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-cyan-400\">{stats.highScore.toLocaleString()}</div>\n                <div className=\"text-xs sm:text-sm text-gray-400\">High Score</div>\n              </div>\n              <div className=\"text-center bg-slate-700/30 rounded-lg p-2 sm:p-3\">\n                <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-cyan-400\">{stats.enemiesDestroyed.toLocaleString()}</div>\n                <div className=\"text-xs sm:text-sm text-gray-400\">Enemies Defeated</div>\n              </div>\n              <div className=\"text-center bg-slate-700/30 rounded-lg p-2 sm:p-3\">\n                <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-cyan-400\">{stats.gamesPlayed}</div>\n                <div className=\"text-xs sm:text-sm text-gray-400\">Games Played</div>\n              </div>\n              <div className=\"text-center bg-slate-700/30 rounded-lg p-2 sm:p-3\">\n                <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-cyan-400\">{formatTime(stats.timePlayedMinutes)}</div>\n                <div className=\"text-xs sm:text-sm text-gray-400\">Time Played</div>\n              </div>\n            </div>\n            \n            {/* STARMINT Token Balance */}\n            <div className=\"bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-lg p-3 sm:p-4 border border-cyan-500/30\">\n              <div className=\"flex items-center justify-between gap-2\">\n                <div className=\"flex items-center space-x-2 min-w-0\">\n                  <Trophy className=\"w-4 h-4 sm:w-5 sm:h-5 text-yellow-400 shrink-0\" />\n                  <span className=\"text-sm sm:text-base text-white font-medium truncate\">STARMINT Tokens</span>\n                </div>\n                <div className=\"text-xl sm:text-2xl font-bold text-yellow-400\">{totalRewards.toLocaleString()}</div>\n              </div>\n            </div>\n\n            {/* Enhanced Streak & Login Stats */}\n            <div className=\"grid grid-cols-2 gap-2 sm:gap-4 mt-3 sm:mt-4\">\n              {/* Current Streak */}\n              <div className=\"bg-gradient-to-r from-orange-500/20 to-red-500/20 rounded-lg p-3 sm:p-4 border border-orange-500/30\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <div className=\"flex items-center space-x-2 min-w-0\">\n                    <Flame className=\"w-4 h-4 sm:w-5 sm:h-5 text-orange-400 shrink-0\" />\n                    <span className=\"text-xs sm:text-sm text-white font-medium truncate\">Current Streak</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg sm:text-xl font-bold text-orange-400\">{currentStreak}</div>\n                    <div className=\"text-xs text-gray-400\">days</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Max Streak */}\n              <div className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-lg p-3 sm:p-4 border border-purple-500/30\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <div className=\"flex items-center space-x-2 min-w-0\">\n                    <Crown className=\"w-4 h-4 sm:w-5 sm:h-5 text-purple-400 shrink-0\" />\n                    <span className=\"text-xs sm:text-sm text-white font-medium truncate\">Best Streak</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg sm:text-xl font-bold text-purple-400\">{stats.maxStreak}</div>\n                    <div className=\"text-xs text-gray-400\">days</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Login Status */}\n            <div className=\"bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-lg p-3 sm:p-4 border border-green-500/30 mt-3 sm:mt-4\">\n              <div className=\"flex items-center justify-between gap-2\">\n                <div className=\"flex items-center space-x-2 min-w-0\">\n                  <Calendar className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-400 shrink-0\" />\n                  <span className=\"text-sm sm:text-base text-white font-medium truncate\">Login Days</span>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-xl sm:text-2xl font-bold text-green-400\">{stats.dailyLogins}</div>\n                  <div className=\"text-xs text-gray-400\">total days</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Friends Ranking */}\n          {friendsRanking.length > 0 && (\n            <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/30\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Users className=\"w-6 h-6 text-cyan-400\" />\n                <h3 className=\"text-xl font-bold text-white\">Friends Ranking</h3>\n              </div>\n              <div className=\"space-y-3\">\n                {friendsRanking.map((friend, index) => (\n                  <div key={friend.fid} className=\"flex items-center space-x-4 p-3 bg-slate-700/30 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-cyan-400\">#{index + 1}</div>\n                    <img src={friend.pfpUrl} alt={friend.displayName} className=\"w-10 h-10 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white\">{friend.displayName}</h4>\n                      <p className=\"text-sm text-gray-400\">{friend.score.toLocaleString()} pts</p>\n                    </div>\n                    {index === 0 && <Crown className=\"w-5 h-5 text-yellow-400\" />}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Achievements */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <Trophy className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-400\" />\n                <h3 className=\"text-lg sm:text-xl font-bold text-white\">Achievements</h3>\n              </div>\n              <div className=\"text-xs sm:text-sm text-gray-400\">\n                {achievementsWithStatus.filter(a => a.unlocked).length}/{achievementsWithStatus.length}\n              </div>\n            </div>\n            \n            <div className=\"space-y-2 sm:space-y-3 max-h-64 sm:max-h-80 overflow-y-auto\">\n              {isLoading ? (\n                <div className=\"text-center py-4 text-gray-400\">\n                  Loading achievements...\n                </div>\n              ) : (\n                achievementsWithStatus.map((achievement) => {\n                  // Get the appropriate icon component\n                  const getAchievementIcon = (id: string) => {\n                    switch (id) {\n                      case 'first_blood': return Target;\n                      case 'centurion': return Zap;\n                      case 'high_scorer': return Trophy;\n                      case 'social_butterfly': return Star;\n                      case 'friend_magnet': return Users;\n                      case 'dedicated_player': return Calendar;\n                      case 'marathon_gamer': return Clock;\n                      default: return Shield;\n                    }\n                  };\n                  \n                  const IconComponent = getAchievementIcon(achievement.id);\n                  \n                  return (\n                    <div\n                      key={achievement.id}\n                      className={`p-2 sm:p-3 rounded-lg border transition-all duration-300 ${\n                        achievement.unlocked\n                          ? 'bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-yellow-500/30'\n                          : 'bg-slate-700/50 border-gray-600/30'\n                      }`}\n                    >\n                      <div className=\"flex items-start space-x-3 sm:space-x-4\">\n                        <div className=\"text-lg sm:text-xl md:text-2xl shrink-0\">{achievement.icon}</div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-1 sm:space-x-2 mb-1\">\n                            <h4 className={`font-medium text-sm sm:text-base truncate ${achievement.unlocked ? 'text-white' : 'text-gray-400'}`}>\n                              {achievement.name}\n                            </h4>\n                            {achievement.unlocked && <Star className=\"w-3 h-3 sm:w-4 sm:h-4 text-yellow-400 shrink-0\" />}\n                          </div>\n                          <p className=\"text-xs sm:text-sm text-gray-500 mb-1 sm:mb-2 line-clamp-2\">{achievement.description}</p>\n                          \n                          {/* Progress bar for locked achievements */}\n                          {!achievement.unlocked && achievement.progress > 0 && (\n                            <div className=\"space-y-1 mb-2\">\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-xs text-gray-400\">Progress</span>\n                                <span className=\"text-xs text-cyan-400\">{Math.round(achievement.progress)}%</span>\n                              </div>\n                              <div className=\"w-full bg-slate-600 rounded-full h-1\">\n                                <div \n                                  className=\"bg-gradient-to-r from-cyan-400 to-blue-500 h-1 rounded-full transition-all duration-300\"\n                                  style={{ width: `${achievement.progress}%` }}\n                                />\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Reward display */}\n                          <div className=\"flex items-center space-x-1 sm:space-x-2 mt-1 sm:mt-2\">\n                            <Trophy className=\"w-3 h-3 text-yellow-400\" />\n                            <span className={`text-xs font-medium ${achievement.unlocked ? 'text-yellow-400' : 'text-gray-500'}`}>\n                              {achievement.reward} STARMINT\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n\n          {/* Enhanced Statistics */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3 mb-3 sm:mb-4\">\n              <Activity className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-400\" />\n              <h3 className=\"text-lg sm:text-xl font-bold text-white\">Performance Analytics</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2 sm:gap-4 mb-3 sm:mb-4\">\n              <div className=\"bg-gradient-to-r from-purple-500/20 to-blue-500/20 rounded-lg p-3 sm:p-4 border border-purple-500/30\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <div className=\"flex items-center space-x-2 min-w-0\">\n                    <TrendingUp className=\"w-4 h-4 sm:w-5 sm:h-5 text-purple-400 shrink-0\" />\n                    <span className=\"text-xs sm:text-sm text-white font-medium truncate\">Avg Score</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg sm:text-xl font-bold text-purple-400\">{averageScore.toLocaleString()}</div>\n                    <div className=\"text-xs text-gray-400\">per game</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-lg p-3 sm:p-4 border border-cyan-500/30\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <div className=\"flex items-center space-x-2 min-w-0\">\n                    <Target className=\"w-4 h-4 sm:w-5 sm:h-5 text-cyan-400 shrink-0\" />\n                    <span className=\"text-xs sm:text-sm text-white font-medium truncate\">Accuracy</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg sm:text-xl font-bold text-cyan-400\">{overallAccuracy}%</div>\n                    <div className=\"text-xs text-gray-400\">overall</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-lg p-3 sm:p-4 border border-green-500/30\">\n              <div className=\"flex items-center justify-between gap-2\">\n                <div className=\"flex items-center space-x-2 min-w-0\">\n                  <Heart className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-400 shrink-0\" />\n                  <span className=\"text-sm sm:text-base text-white font-medium truncate\">Total Score Accumulated</span>\n                </div>\n                <div className=\"text-xl sm:text-2xl font-bold text-green-400\">{stats.totalScore.toLocaleString()}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Game History */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <Gamepad2 className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n                <h3 className=\"text-lg sm:text-xl font-bold text-white\">Game History</h3>\n              </div>\n              {gameSessions.length > 0 && (\n                <div className=\"text-xs sm:text-sm text-gray-400\">\n                  {gameSessions.length} recent games\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2 sm:space-y-3 max-h-80 overflow-y-auto\">\n              {loadingHistory ? (\n                <div className=\"text-center py-4 text-gray-400\">\n                  Loading game history...\n                </div>\n              ) : gameSessions.length > 0 ? (\n                gameSessions.map((session, index) => {\n                  const gameDate = new Date(session.playedAt);\n                  const isToday = gameDate.toDateString() === new Date().toDateString();\n                  const isYesterday = gameDate.toDateString() === new Date(Date.now() - 86400000).toDateString();\n                  \n                  let dateLabel = gameDate.toLocaleDateString();\n                  if (isToday) dateLabel = 'Today';\n                  else if (isYesterday) dateLabel = 'Yesterday';\n                  \n                  return (\n                    <div key={session.id || index} className=\"p-3 sm:p-4 bg-slate-700/50 rounded-lg border border-gray-600/30 hover:border-cyan-500/30 transition-all duration-300\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex items-start space-x-3 flex-1 min-w-0\">\n                          <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center shrink-0\">\n                            <span className=\"text-white font-bold text-xs sm:text-sm\">#{gameSessions.length - index}</span>\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <h4 className=\"text-white font-medium text-sm sm:text-base truncate\">Game #{gameSessions.length - index}</h4>\n                              <div className=\"text-xs text-gray-400\">{dateLabel}</div>\n                            </div>\n                            <div className=\"grid grid-cols-2 gap-2 sm:gap-4 text-xs sm:text-sm\">\n                              <div>\n                                <span className=\"text-gray-400\">Score: </span>\n                                <span className=\"text-cyan-400 font-medium\">{session.score.toLocaleString()}</span>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-400\">Level: </span>\n                                <span className=\"text-white font-medium\">{session.level}</span>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-400\">Enemies: </span>\n                                <span className=\"text-orange-400 font-medium\">{session.enemiesKilled}</span>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-400\">Time: </span>\n                                <span className=\"text-green-400 font-medium\">{formatGameTime(session.gameTime)}</span>\n                              </div>\n                              {session.accuracy && (\n                                <div className=\"col-span-2\">\n                                  <span className=\"text-gray-400\">Accuracy: </span>\n                                  <span className=\"text-purple-400 font-medium\">{Math.round(session.accuracy * 100)}%</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col items-end text-right shrink-0\">\n                          <div className=\"text-lg sm:text-xl font-bold text-cyan-400\">{session.score.toLocaleString()}</div>\n                          <div className=\"text-xs text-gray-400\">\n                            {gameDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"text-center py-8 text-gray-400\">\n                  <Gamepad2 className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                  <p>No games played yet</p>\n                  <p className=\"text-sm\">Start playing to see your game history!</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Recent Activity */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3 mb-3 sm:mb-4\">\n              <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-400\" />\n              <h3 className=\"text-lg sm:text-xl font-bold text-white\">Recent Activity</h3>\n            </div>\n            \n            <div className=\"space-y-2 sm:space-y-3\">\n              {recentActivity.length > 0 ? (\n                recentActivity.map((activity, index) => (\n                  <div key={activity.id || index} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center\">\n                        <Gamepad2 className=\"w-4 h-4 text-green-400\" />\n                      </div>\n                      <div>\n                        <p className=\"text-white text-sm font-medium\">{activity.title}</p>\n                        <p className=\"text-gray-400 text-xs\">{activity.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {activity.timestamp ? \n                        activity.timestamp.toLocaleDateString() === new Date().toLocaleDateString() ? 'Today' :\n                        activity.timestamp.toLocaleDateString() === new Date(Date.now() - 86400000).toLocaleDateString() ? 'Yesterday' :\n                        activity.timestamp.toLocaleDateString()\n                        : 'Recent'\n                      }\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <>\n                  <div className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center\">\n                        <Gamepad2 className=\"w-4 h-4 text-green-400\" />\n                      </div>\n                      <div>\n                        <p className=\"text-white text-sm font-medium\">High Score</p>\n                        <p className=\"text-gray-400 text-xs\">\n                          {stats.highScore.toLocaleString()} points\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Best</div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                        <Trophy className=\"w-4 h-4 text-blue-400\" />\n                      </div>\n                      <div>\n                        <p className=\"text-white text-sm font-medium\">Total Games</p>\n                        <p className=\"text-gray-400 text-xs\">\n                          {stats.gamesPlayed} sessions played\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">All time</div>\n                  </div>\n                  \n                  {achievementsWithStatus.filter(a => a.unlocked).length > 0 && (\n                    <div className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-yellow-500/20 rounded-full flex items-center justify-center\">\n                          <Award className=\"w-4 h-4 text-yellow-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-white text-sm font-medium\">Achievement Progress</p>\n                          <p className=\"text-gray-400 text-xs\">\n                            {achievementsWithStatus.filter(a => a.unlocked).length} of {achievementsWithStatus.length} unlocked\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {Math.round((achievementsWithStatus.filter(a => a.unlocked).length / achievementsWithStatus.length) * 100)}%\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Enhanced Inventory */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/30\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <Package className=\"w-6 h-6 text-cyan-400\" />\n              <h3 className=\"text-xl font-bold text-white\">Inventory & Power-ups</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              {/* Show power-up collection stats */}\n              <div className=\"bg-slate-700/50 rounded-lg p-3 border border-cyan-500/30\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Shield className=\"w-4 h-4 text-cyan-400\" />\n                  <span className=\"text-white text-sm font-medium\">Shield</span>\n                </div>\n                <p className=\"text-xs text-gray-400\">Protection power-up</p>\n              </div>\n              \n              <div className=\"bg-slate-700/50 rounded-lg p-3 border border-orange-500/30\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Zap className=\"w-4 h-4 text-orange-400\" />\n                  <span className=\"text-white text-sm font-medium\">Rapid Fire</span>\n                </div>\n                <p className=\"text-xs text-gray-400\">Speed boost power-up</p>\n              </div>\n              \n              {/* Inventory items from purchase history will be shown here */}\n            </div>\n            \n            <div className=\"text-center py-4 text-gray-400\">\n              <p className=\"text-sm\">Collect items by playing the game!</p>\n            </div>\n          </div>\n\n          {/* Purchase History */}\n          {purchaseHistory.length > 0 && (\n            <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/30\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <ShoppingBag className=\"w-6 h-6 text-cyan-400\" />\n                <h3 className=\"text-xl font-bold text-white\">Purchase History</h3>\n                <div className=\"bg-cyan-500/20 px-2 py-1 rounded-full\">\n                  <span className=\"text-cyan-400 text-xs font-medium\">{purchaseHistory.length}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {purchaseHistory.slice(0, 10).map((purchase) => (\n                  <div key={purchase.id} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                        purchase.itemType === 'weapons' ? 'bg-red-500/20 border border-red-500/50' :\n                        purchase.itemType === 'defense' ? 'bg-blue-500/20 border border-blue-500/50' :\n                        'bg-green-500/20 border border-green-500/50'\n                      }`}>\n                        {purchase.itemType === 'weapons' ? <Zap className=\"w-4 h-4 text-red-400\" /> :\n                         purchase.itemType === 'defense' ? <Shield className=\"w-4 h-4 text-blue-400\" /> :\n                         <Rocket className=\"w-4 h-4 text-green-400\" />}\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-white text-sm\">{purchase.itemName}</h4>\n                        <p className=\"text-xs text-gray-400 capitalize\">{purchase.itemType}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center space-x-1 text-cyan-400\">\n                        <div className=\"w-3 h-3 bg-cyan-400 rounded-full\" />\n                        <span className=\"text-sm font-medium\">{purchase.price}</span>\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(purchase.purchasedAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {purchaseHistory.length > 10 && (\n                  <div className=\"text-center py-2\">\n                    <span className=\"text-xs text-gray-400\">\n                      +{purchaseHistory.length - 10} more purchases\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Enhanced Social Features */}\n          {user && (\n            <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-6 border border-cyan-500/30\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Heart className=\"w-6 h-6 text-pink-400\" />\n                <h3 className=\"text-xl font-bold text-white\">Farcaster Profile</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4 p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg border border-blue-500/30\">\n                  <img \n                    src={user.pfpUrl} \n                    alt={user.displayName || 'Profile'} \n                    className=\"w-12 h-12 rounded-full border-2 border-cyan-400\"\n                  />\n                  <div>\n                    <h4 className=\"font-bold text-white\">{user.displayName}</h4>\n                    <p className=\"text-cyan-400\">@{user.username || `fid:${user.fid}`}</p>\n                    <p className=\"text-xs text-gray-400\">FID: {user.fid}</p>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                    <div className=\"text-lg font-bold text-cyan-400\">{stats.socialShares}</div>\n                    <div className=\"text-xs text-gray-400\">Shares</div>\n                  </div>\n                  <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                    <div className=\"text-lg font-bold text-cyan-400\">{stats.friendsInvited}</div>\n                    <div className=\"text-xs text-gray-400\">Invited</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":46634},"client/src/components/pages/ShopPage.tsx":{"content":"import React, { useState } from \"react\";\nimport { ArrowLeft, ShoppingCart, Zap, Shield, Rocket, Plus } from \"lucide-react\";\nimport Toast from '../Toast';\nimport { usePlayerStats } from '../../lib/stores/usePlayerStats';\n\ninterface ShopPageProps {\n  onBack: () => void;\n}\n\nconst shopItems = [\n  {\n    id: 1,\n    name: \"Plasma Cannon\",\n    description: \"High-damage laser weapon\",\n    price: 150,\n    category: \"weapons\",\n    icon: Zap,\n    rarity: \"rare\"\n  },\n  {\n    id: 2,\n    name: \"Shield Generator\",\n    description: \"Absorbs 3 hits before breaking\",\n    price: 200,\n    category: \"defense\",\n    icon: Shield,\n    rarity: \"epic\"\n  },\n  {\n    id: 3,\n    name: \"Speed Boost\",\n    description: \"Increases movement speed by 50%\",\n    price: 100,\n    category: \"upgrades\",\n    icon: Rocket,\n    rarity: \"common\"\n  },\n  {\n    id: 4,\n    name: \"Rapid Fire\",\n    description: \"Doubles your firing rate\",\n    price: 175,\n    category: \"upgrades\",\n    icon: Zap,\n    rarity: \"rare\"\n  },\n];\n\nexport default function ShopPage({ onBack }: ShopPageProps) {\n  // Pre-compute star positions to avoid React Hook violations in render\n  const stars = React.useMemo(() => \n    Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      left: Math.random() * 100,\n      top: Math.random() * 100,\n      delay: Math.random() * 3\n    })), []);\n\n  const { stats, addPurchase } = usePlayerStats();\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // Calculate STARMINT tokens from achievements (placeholder calculation)\n  const availableTokens = Math.floor(stats.totalScore / 100) + (stats.enemiesDestroyed * 2);\n  \n  const handlePurchaseAttempt = (item: typeof shopItems[0]) => {\n    // Prevent all purchases and show the specified message\n    setToastMessage('Stay engaged! Shop functionality will come with the next version!');\n    setShowToast(true);\n  };\n    \n  return (\n    <div className=\"min-h-[100dvh] bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 relative overflow-hidden\">\n      {/* Space background elements */}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      <div className=\"absolute top-10 right-20 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl\" />\n      <div className=\"absolute bottom-0 right-0 w-80 h-80 bg-cyan-400/30 rounded-full blur-2xl\" />\n      \n      {/* Stars */}\n      {stars.map((star) => (\n        <div\n          key={star.id}\n          className=\"absolute w-1 h-1 bg-white rounded-full animate-pulse pointer-events-none\"\n          style={{\n            left: `${star.left}%`,\n            top: `${star.top}%`,\n            animationDelay: `${star.delay}s`,\n          }}\n        />\n      ))}\n\n      <div className=\"relative z-10 p-3 sm:p-4 min-h-[100dvh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-3 sm:mb-4 md:mb-6\">\n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            <button\n              onClick={onBack}\n              className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300 min-h-[44px] min-w-[44px] flex items-center justify-center\"\n            >\n              <ArrowLeft className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n            </button>\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <ShoppingCart className=\"w-5 h-5 sm:w-6 sm:h-6 md:w-8 md:h-8 text-cyan-400\" />\n              <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-white\">SHOP</h1>\n            </div>\n          </div>\n          \n          {/* Currency Display */}\n          <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl px-2 py-1 sm:px-3 sm:py-2 md:px-4 md:py-2 border border-cyan-500/30\">\n            <div className=\"flex items-center space-x-1 sm:space-x-2\">\n              <div className=\"w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 bg-cyan-400 rounded-full\" />\n              <span className=\"text-cyan-400 font-bold text-sm sm:text-base md:text-lg\">{availableTokens.toLocaleString()}</span>\n              <span className=\"text-gray-300 text-xs sm:text-sm md:text-base truncate\">STARMINT</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Shop Items */}\n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 sm:gap-3 md:gap-4\">\n            {shopItems.map((item) => (\n              <div\n                key={item.id}\n                className={`bg-slate-800/60 backdrop-blur-sm rounded-xl p-2 sm:p-3 md:p-4 border transition-all duration-300 hover:border-cyan-400/60 ${\n                  item.rarity === 'epic'\n                    ? 'border-orange-500/50 bg-gradient-to-r from-orange-500/10 to-transparent'\n                    : item.rarity === 'rare'\n                    ? 'border-purple-500/50 bg-gradient-to-r from-purple-500/10 to-transparent'\n                    : 'border-cyan-500/30'\n                }`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n                    <div\n                      className={`w-10 h-10 sm:w-12 sm:h-12 rounded-xl flex items-center justify-center flex-shrink-0 ${\n                        item.rarity === 'epic'\n                          ? 'bg-orange-500/20 border border-orange-500/50'\n                          : item.rarity === 'rare'\n                          ? 'bg-purple-500/20 border border-purple-500/50'\n                          : 'bg-cyan-500/20 border border-cyan-500/50'\n                      }`}\n                    >\n                      <item.icon className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <h3 className=\"text-base sm:text-lg font-bold text-white truncate\">{item.name}</h3>\n                      <p className=\"text-gray-300 text-xs sm:text-sm line-clamp-1\">{item.description}</p>\n                      <div className=\"flex items-center space-x-1 sm:space-x-2 mt-1\">\n                        <span\n                          className={`text-xs px-2 py-1 rounded-full ${\n                            item.rarity === 'epic'\n                              ? 'bg-orange-500/20 text-orange-400 border border-orange-500/30'\n                              : item.rarity === 'rare'\n                              ? 'bg-purple-500/20 text-purple-400 border border-purple-500/30'\n                              : 'bg-gray-500/20 text-gray-400 border border-gray-500/30'\n                          }`}\n                        >\n                          {item.rarity.toUpperCase()}\n                        </span>\n                        <span className=\"text-xs text-gray-500 capitalize\">{item.category}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right flex-shrink-0 ml-2\">\n                    <div className=\"flex items-center space-x-1 sm:space-x-2 mb-2 justify-end\">\n                      <div className=\"w-3 h-3 sm:w-4 sm:h-4 bg-cyan-400 rounded-full\" />\n                      <span className=\"text-lg sm:text-xl font-bold text-cyan-400\">{item.price}</span>\n                    </div>\n                    <button \n                      onClick={() => handlePurchaseAttempt(item)}\n                      className=\"bg-cyan-500 hover:bg-cyan-400 text-black font-medium px-3 py-2 sm:px-4 sm:py-2 rounded-lg transition-colors duration-200 flex items-center space-x-1 sm:space-x-2 min-h-[44px]\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      <span className=\"text-sm sm:text-base\">Buy</span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Notice */}\n        <div className=\"mt-3 sm:mt-4 bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-yellow-500/30\">\n          <p className=\"text-yellow-400 text-xs sm:text-sm text-center\">\n            🚀 Stay engaged! Store purchases will come with the next version!\n          </p>\n        </div>\n      </div>\n      \n      <Toast\n        message={toastMessage || \"🚀 Stay engaged! Store purchases will come with the next version!\"}\n        isVisible={showToast}\n        onClose={() => setShowToast(false)}\n      />\n    </div>\n  );\n}","size_bytes":8514},"client/src/components/pages/SwapPage.tsx":{"content":"import { useState } from 'react';\nimport { ArrowLeft, RefreshCw, ArrowUpDown, TrendingUp, TrendingDown } from \"lucide-react\";\nimport Toast from '../Toast';\n\ninterface SwapPageProps {\n  onBack: () => void;\n}\n\nconst currencies = [\n  { symbol: \"STARMINT\", name: \"Starmint Token\", balance: 0, price: 1.00, change: 0 },\n  { symbol: \"GETH\", name: \"Game Ethereum\", balance: 0, price: 2.50, change: 5.2 },\n  { symbol: \"SCOIN\", name: \"Space Coin\", balance: 0, price: 0.75, change: -2.1 },\n  { symbol: \"NEON\", name: \"Neon Credits\", balance: 0, price: 1.25, change: 8.7 },\n];\n\nexport default function SwapPage({ onBack }: SwapPageProps) {\n  const [showToast, setShowToast] = useState(false);\n  \n  const handleSwapAttempt = () => {\n    setShowToast(true);\n  };\n\n  const handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.blur();\n    setShowToast(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 relative overflow-hidden\">\n      {/* Space background elements */}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      <div className=\"absolute top-10 right-20 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl\" />\n      <div className=\"absolute bottom-0 right-0 w-80 h-80 bg-cyan-400/30 rounded-full blur-2xl\" />\n      \n      {/* Stars */}\n      {Array.from({ length: 50 }, (_, i) => (\n        <div\n          key={i}\n          className=\"absolute w-1 h-1 bg-white rounded-full animate-pulse\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n            animationDelay: `${Math.random() * 3}s`,\n          }}\n        />\n      ))}\n\n      <div className=\"relative z-10 p-3 sm:p-4 h-screen flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-2 sm:space-x-4 mb-4 sm:mb-6\">\n          <button\n            onClick={onBack}\n            className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-2 sm:p-3 border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300 min-h-[44px] min-w-[44px] flex items-center justify-center\"\n          >\n            <ArrowLeft className=\"w-5 h-5 sm:w-6 sm:h-6 text-cyan-400\" />\n          </button>\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:space-x-3\">\n            <div className=\"flex items-center space-x-1 sm:space-x-2\">\n              <span className=\"text-cyan-400 font-bold text-base sm:text-lg\">GalaxigaSwap</span>\n              <RefreshCw className=\"w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 text-cyan-400\" />\n            </div>\n            <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-white\">SWAP</h1>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto space-y-3 sm:space-y-4 md:space-y-6\">\n          {/* Swap Interface */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <h3 className=\"text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4\">Quick Swap</h3>\n            \n            {/* From Currency */}\n            <div className=\"bg-slate-700/50 rounded-xl p-3 sm:p-4 mb-2\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-gray-400 text-xs sm:text-sm\">From</span>\n                <span className=\"text-gray-400 text-xs sm:text-sm\">Balance: 0</span>\n              </div>\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-cyan-400 rounded-full shrink-0\" />\n                <span className=\"text-sm sm:text-base md:text-lg font-bold text-white truncate\">STARMINT</span>\n                <input\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  onFocus={handleInputFocus}\n                  className=\"flex-1 bg-transparent text-right text-base sm:text-lg md:text-xl font-bold text-white outline-none min-h-[44px] px-2\"\n                />\n              </div>\n            </div>\n\n            {/* Swap Button */}\n            <div className=\"flex justify-center -my-1 relative z-10\">\n              <button \n                onClick={handleSwapAttempt}\n                className=\"bg-slate-800 border border-cyan-500/50 rounded-full p-3 hover:border-cyan-400 transition-colors duration-200 min-h-[44px] min-w-[44px]\"\n              >\n                <ArrowUpDown className=\"w-4 h-4 sm:w-5 sm:h-5 text-cyan-400\" />\n              </button>\n            </div>\n\n            {/* To Currency */}\n            <div className=\"bg-slate-700/50 rounded-xl p-3 sm:p-4 mt-2\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-gray-400 text-xs sm:text-sm\">To</span>\n                <span className=\"text-gray-400 text-xs sm:text-sm\">Balance: 0</span>\n              </div>\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-green-400 rounded-full shrink-0\" />\n                <span className=\"text-sm sm:text-base md:text-lg font-bold text-white truncate\">GETH</span>\n                <input\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  onFocus={handleInputFocus}\n                  className=\"flex-1 bg-transparent text-right text-base sm:text-lg md:text-xl font-bold text-white outline-none min-h-[44px] px-2\"\n                  readOnly\n                />\n              </div>\n            </div>\n\n            {/* Exchange Rate */}\n            <div className=\"mt-3 sm:mt-4 p-2 sm:p-3 bg-slate-700/30 rounded-lg\">\n              <div className=\"flex items-center justify-between text-xs sm:text-sm\">\n                <span className=\"text-gray-400\">Exchange Rate</span>\n                <span className=\"text-white\">1 STARMINT = 2.50 GETH</span>\n              </div>\n            </div>\n\n            {/* Swap Button */}\n            <button \n              onClick={handleSwapAttempt}\n              className=\"w-full mt-3 sm:mt-4 bg-cyan-500 hover:bg-cyan-400 text-black font-bold py-3 rounded-xl transition-colors duration-200 min-h-[44px] text-sm sm:text-base\"\n            >\n              Connect Wallet to Swap\n            </button>\n          </div>\n\n          {/* Market Prices */}\n          <div className=\"bg-slate-800/60 backdrop-blur-sm rounded-xl p-4 sm:p-6 border border-cyan-500/30\">\n            <h3 className=\"text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4\">Market Prices</h3>\n            \n            <div className=\"space-y-2 sm:space-y-3\">\n              {currencies.map((currency) => (\n                <div\n                  key={currency.symbol}\n                  className=\"flex items-center justify-between p-2 sm:p-3 bg-slate-700/50 rounded-lg hover:bg-slate-700/70 transition-colors duration-200\"\n                >\n                  <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n                    <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full shrink-0 ${\n                      currency.symbol === 'STARMINT' ? 'bg-cyan-400' :\n                      currency.symbol === 'GETH' ? 'bg-green-400' :\n                      currency.symbol === 'SCOIN' ? 'bg-yellow-400' : 'bg-purple-400'\n                    }`} />\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"font-bold text-white text-sm sm:text-base truncate\">{currency.symbol}</div>\n                      <div className=\"text-xs sm:text-sm text-gray-400 truncate\">{currency.name}</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right shrink-0 ml-2\">\n                    <div className=\"font-bold text-white text-sm sm:text-base\">${currency.price.toFixed(2)}</div>\n                    <div className={`text-xs sm:text-sm flex items-center justify-end space-x-1 ${\n                      currency.change > 0 ? 'text-green-400' : currency.change < 0 ? 'text-red-400' : 'text-gray-400'\n                    }`}>\n                      {currency.change > 0 ? (\n                        <TrendingUp className=\"w-3 h-3\" />\n                      ) : currency.change < 0 ? (\n                        <TrendingDown className=\"w-3 h-3\" />\n                      ) : null}\n                      <span>{currency.change > 0 ? '+' : ''}{currency.change.toFixed(1)}%</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Notice */}\n          <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-xl p-3 sm:p-4 border border-yellow-500/30\">\n            <p className=\"text-yellow-400 text-xs sm:text-sm text-center\">\n              🚀 Stay engaged! Swap functionality will come with the next version!\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <Toast\n        message=\"🚀 Stay engaged! Swap functionality will come with the next version!\"\n        isVisible={showToast}\n        onClose={() => setShowToast(false)}\n      />\n    </div>\n  );\n}","size_bytes":9067},"client/src/components/ui/AccessibilityProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface AccessibilityContextType {\n  reduceMotion: boolean;\n  highContrast: boolean;\n  focusVisible: boolean;\n  announceMessage: (message: string) => void;\n}\n\nconst AccessibilityContext = createContext<AccessibilityContextType | null>(null);\n\nexport function useAccessibility() {\n  const context = useContext(AccessibilityContext);\n  if (!context) {\n    throw new Error('useAccessibility must be used within AccessibilityProvider');\n  }\n  return context;\n}\n\ninterface AccessibilityProviderProps {\n  children: ReactNode;\n}\n\nexport function AccessibilityProvider({ children }: AccessibilityProviderProps) {\n  const [reduceMotion, setReduceMotion] = useState(false);\n  const [highContrast, setHighContrast] = useState(false);\n  const [focusVisible, setFocusVisible] = useState(false);\n\n  useEffect(() => {\n    // Check for reduce motion preference\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setReduceMotion(mediaQuery.matches);\n    \n    const handleChange = (e: MediaQueryListEvent) => setReduceMotion(e.matches);\n    mediaQuery.addEventListener('change', handleChange);\n\n    // Check for high contrast preference\n    const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n    setHighContrast(contrastQuery.matches);\n    \n    const handleContrastChange = (e: MediaQueryListEvent) => setHighContrast(e.matches);\n    contrastQuery.addEventListener('change', handleContrastChange);\n\n    // Focus management\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Tab') {\n        setFocusVisible(true);\n      }\n    };\n\n    const handleMouseDown = () => {\n      setFocusVisible(false);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('mousedown', handleMouseDown);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n      contrastQuery.removeEventListener('change', handleContrastChange);\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('mousedown', handleMouseDown);\n    };\n  }, []);\n\n  const announceMessage = (message: string) => {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    \n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  };\n\n  return (\n    <AccessibilityContext.Provider\n      value={{\n        reduceMotion,\n        highContrast,\n        focusVisible,\n        announceMessage,\n      }}\n    >\n      {children}\n    </AccessibilityContext.Provider>\n  );\n}","size_bytes":2824},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/accessibility/GameAccessibility.ts":{"content":"export class GameAccessibility {\n    private static highContrast: boolean = false;\n    private static reduceMotion: boolean = false;\n    private static audioDescription: boolean = false;\n    private static keyboardOnly: boolean = false;\n    private static fontSize: number = 1.0;\n    private static colorBlindMode: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia' = 'none';\n    \n    // Screen reader integration\n    private static announcements: string[] = [];\n    private static lastAnnouncement: number = 0;\n  \n    public static initialize(): void {\n      this.detectUserPreferences();\n      this.loadSavedSettings();\n      this.setupScreenReader();\n      this.setupKeyboardNavigation();\n      console.log('Accessibility features initialized');\n    }\n  \n    private static detectUserPreferences(): void {\n      // Detect system preferences\n      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n        this.reduceMotion = true;\n      }\n  \n      if (window.matchMedia('(prefers-contrast: high)').matches) {\n        this.highContrast = true;\n      }\n  \n      // Listen for changes\n      window.matchMedia('(prefers-reduced-motion: reduce)')\n        .addEventListener('change', (e) => {\n          this.reduceMotion = e.matches;\n          this.applySettings();\n        });\n  \n      window.matchMedia('(prefers-contrast: high)')\n        .addEventListener('change', (e) => {\n          this.highContrast = e.matches;\n          this.applySettings();\n        });\n    }\n  \n    private static loadSavedSettings(): void {\n      const saved = localStorage.getItem('accessibility-settings');\n      if (saved) {\n        try {\n          const settings = JSON.parse(saved);\n          this.highContrast = settings.highContrast ?? this.highContrast;\n          this.reduceMotion = settings.reduceMotion ?? this.reduceMotion;\n          this.audioDescription = settings.audioDescription ?? false;\n          this.keyboardOnly = settings.keyboardOnly ?? false;\n          this.fontSize = settings.fontSize ?? 1.0;\n          this.colorBlindMode = settings.colorBlindMode ?? 'none';\n        } catch (error) {\n          console.warn('Failed to load accessibility settings');\n        }\n      }\n      this.applySettings();\n    }\n  \n    private static saveSettings(): void {\n      const settings = {\n        highContrast: this.highContrast,\n        reduceMotion: this.reduceMotion,\n        audioDescription: this.audioDescription,\n        keyboardOnly: this.keyboardOnly,\n        fontSize: this.fontSize,\n        colorBlindMode: this.colorBlindMode\n      };\n      localStorage.setItem('accessibility-settings', JSON.stringify(settings));\n    }\n  \n    private static applySettings(): void {\n      const root = document.documentElement;\n      \n      // High contrast mode\n      root.classList.toggle('high-contrast', this.highContrast);\n      \n      // Reduced motion\n      root.classList.toggle('reduce-motion', this.reduceMotion);\n      \n      // Font size scaling\n      root.style.setProperty('--font-scale', this.fontSize.toString());\n      \n      // Color blind mode\n      root.setAttribute('data-color-blind-mode', this.colorBlindMode);\n      \n      // Keyboard only mode\n      root.classList.toggle('keyboard-only', this.keyboardOnly);\n    }\n  \n    private static setupScreenReader(): void {\n      // Create live region for announcements\n      const liveRegion = document.createElement('div');\n      liveRegion.setAttribute('aria-live', 'polite');\n      liveRegion.setAttribute('aria-atomic', 'true');\n      liveRegion.className = 'sr-only';\n      liveRegion.style.cssText = `\n        position: absolute !important;\n        left: -10000px !important;\n        width: 1px !important;\n        height: 1px !important;\n        overflow: hidden !important;\n      `;\n      document.body.appendChild(liveRegion);\n  \n      // Announce game events\n      setInterval(() => {\n        if (this.announcements.length > 0) {\n          const announcement = this.announcements.shift();\n          if (announcement) {\n            liveRegion.textContent = announcement;\n          }\n        }\n      }, 1000);\n    }\n  \n    private static setupKeyboardNavigation(): void {\n      document.addEventListener('keydown', (e) => {\n        // Enable keyboard-only mode on tab usage\n        if (e.key === 'Tab') {\n          this.keyboardOnly = true;\n          this.applySettings();\n        }\n  \n        // Game-specific keyboard shortcuts\n        if (e.altKey) {\n          switch (e.key) {\n            case '1':\n              e.preventDefault();\n              this.announceGameState();\n              break;\n            case '2':\n              e.preventDefault();\n              this.announcePlayerStatus();\n              break;\n            case '3':\n              e.preventDefault();\n              this.announceEnemyStatus();\n              break;\n          }\n        }\n      });\n  \n      // Disable keyboard-only mode on mouse usage\n      document.addEventListener('mousedown', () => {\n        this.keyboardOnly = false;\n        this.applySettings();\n      });\n    }\n  \n    // Public API methods\n    public static setHighContrast(enabled: boolean): void {\n      this.highContrast = enabled;\n      this.applySettings();\n      this.saveSettings();\n    }\n  \n    public static setReduceMotion(enabled: boolean): void {\n      this.reduceMotion = enabled;\n      this.applySettings();\n      this.saveSettings();\n    }\n  \n    public static setAudioDescription(enabled: boolean): void {\n      this.audioDescription = enabled;\n      this.saveSettings();\n    }\n  \n    public static setFontSize(scale: number): void {\n      this.fontSize = Math.max(0.5, Math.min(2.0, scale));\n      this.applySettings();\n      this.saveSettings();\n    }\n  \n    public static setColorBlindMode(mode: typeof this.colorBlindMode): void {\n      this.colorBlindMode = mode;\n      this.applySettings();\n      this.saveSettings();\n    }\n  \n    // Game-specific accessibility features\n    public static announceToScreenReader(message: string): void {\n      const now = Date.now();\n      if (now - this.lastAnnouncement > 500) { // Prevent spam\n        this.announcements.push(message);\n        this.lastAnnouncement = now;\n      }\n    }\n  \n    public static announceGameState(): void {\n      // This would integrate with the game state\n      this.announceToScreenReader('Game state information requested');\n    }\n  \n    public static announcePlayerStatus(): void {\n      this.announceToScreenReader('Player status information requested');\n    }\n  \n    public static announceEnemyStatus(): void {\n      this.announceToScreenReader('Enemy status information requested');\n    }\n  \n    public static announceScore(score: number): void {\n      if (this.audioDescription) {\n        this.announceToScreenReader(`Score: ${score}`);\n      }\n    }\n  \n    public static announceLevel(level: number): void {\n      if (this.audioDescription) {\n        this.announceToScreenReader(`Level ${level} started`);\n      }\n    }\n  \n    public static announceEnemyDestroyed(): void {\n      if (this.audioDescription) {\n        this.announceToScreenReader('Enemy destroyed');\n      }\n    }\n  \n    public static announcePowerUp(type: string): void {\n      if (this.audioDescription) {\n        this.announceToScreenReader(`Power-up collected: ${type}`);\n      }\n    }\n  \n    public static announcePlayerHit(): void {\n      if (this.audioDescription) {\n        this.announceToScreenReader('Player hit, health decreased');\n      }\n    }\n  \n    public static announceGameOver(score: number): void {\n      this.announceToScreenReader(`Game over. Final score: ${score}`);\n    }\n  \n    // Color blind accessibility\n    public static getColorBlindSafeColor(originalColor: string, type: 'enemy' | 'player' | 'powerup' | 'ui'): string {\n      if (this.colorBlindMode === 'none') return originalColor;\n  \n      const colorMaps = {\n        protanopia: {\n          '#ff0000': '#ffaa00', // Red to Orange\n          '#00ff00': '#0099ff', // Green to Blue\n          '#ff00ff': '#aa00ff', // Magenta to Purple\n        },\n        deuteranopia: {\n          '#ff0000': '#ff6600', // Red to Orange-Red\n          '#00ff00': '#0066ff', // Green to Blue\n          '#ffff00': '#ffcc00', // Yellow to Gold\n        },\n        tritanopia: {\n          '#0000ff': '#00cccc', // Blue to Cyan\n          '#ffff00': '#ff6666', // Yellow to Pink\n          '#00ff00': '#00cc99', // Green to Teal\n        }\n      };\n  \n      const colorMap = colorMaps[this.colorBlindMode];\n      return colorMap[originalColor] || originalColor;\n    }\n  \n    // Pattern-based accessibility for motion-sensitive users\n    public static shouldUseReducedMotion(): boolean {\n      return this.reduceMotion;\n    }\n  \n    public static getMotionScale(): number {\n      return this.reduceMotion ? 0.2 : 1.0;\n    }\n  \n    // Focus management for keyboard users\n    public static manageFocus(element: HTMLElement): void {\n      if (this.keyboardOnly) {\n        element.focus();\n        element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    }\n  \n    // High contrast mode utilities\n    public static isHighContrastMode(): boolean {\n      return this.highContrast;\n    }\n  \n    public static getContrastColor(baseColor: string): string {\n      if (!this.highContrast) return baseColor;\n  \n      // Convert to high contrast equivalent\n      const contrastMap: { [key: string]: string } = {\n        '#ffffff': '#000000',\n        '#000000': '#ffffff',\n        '#ff0000': '#ffff00', // Red to Yellow\n        '#00ff00': '#00ffff', // Green to Cyan\n        '#0000ff': '#ffffff', // Blue to White\n      };\n  \n      return contrastMap[baseColor] || baseColor;\n    }\n  \n    public static getSettings() {\n      return {\n        highContrast: this.highContrast,\n        reduceMotion: this.reduceMotion,\n        audioDescription: this.audioDescription,\n        keyboardOnly: this.keyboardOnly,\n        fontSize: this.fontSize,\n        colorBlindMode: this.colorBlindMode\n      };\n    }\n  }","size_bytes":9944},"client/src/lib/gameEngine/Boss.ts":{"content":"export type BossType = 'destroyer' | 'mothership' | 'dreadnought';\n\nexport class Boss {\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public speed: number;\n  public health: number;\n  public maxHealth: number;\n  public type: BossType;\n  public attackTimer: number = 0;\n  public movementTimer: number = 0;\n  public isActive: boolean = true;\n  \n  private oscillationOffset: number;\n  private moveDirection: number = 1;\n  private static bossImage: HTMLImageElement | null = null;\n  private static imageLoaded: boolean = false;\n  private attackPattern: number = 0;\n\n  constructor(x: number, y: number, type: BossType, level: number) {\n    this.x = x;\n    this.y = y;\n    this.type = type;\n    this.oscillationOffset = Math.random() * Math.PI * 2;\n    \n    // Boss stats based on type and level\n    switch (type) {\n      case 'destroyer':\n        this.width = 80;\n        this.height = 60;\n        this.speed = 0.5;\n        this.health = 15 + (level * 5);\n        break;\n      case 'mothership':\n        this.width = 120;\n        this.height = 80;\n        this.speed = 0.3;\n        this.health = 25 + (level * 7);\n        break;\n      case 'dreadnought':\n        this.width = 150;\n        this.height = 100;\n        this.speed = 0.2;\n        this.health = 35 + (level * 10);\n        break;\n    }\n    \n    this.maxHealth = this.health;\n    \n    // Load boss image if not already loaded\n    if (!Boss.bossImage) {\n      Boss.loadImage();\n    }\n  }\n\n  private static loadImage() {\n    Boss.bossImage = new Image();\n    Boss.bossImage.onload = () => {\n      Boss.imageLoaded = true;\n      console.log('Boss image loaded successfully');\n    };\n    Boss.bossImage.onerror = () => {\n      console.error('Failed to load boss image');\n    };\n    Boss.bossImage.src = '/Enemey_Space_Ship.png'; // Using enemy ship but larger for now\n  }\n\n  public update(canvasWidth: number, canvasHeight: number): { bullets: Array<{x: number, y: number, vx: number, vy: number}> } {\n    this.movementTimer++;\n    this.attackTimer++;\n    \n    const bullets: Array<{x: number, y: number, vx: number, vy: number}> = [];\n\n    // Movement patterns based on boss type\n    switch (this.type) {\n      case 'destroyer':\n        // Move side to side at top of screen\n        this.x += this.speed * this.moveDirection;\n        if (this.x <= this.width / 2 || this.x >= canvasWidth - this.width / 2) {\n          this.moveDirection *= -1;\n        }\n        \n        // Attack pattern - rapid fire bursts\n        if (this.attackTimer >= 45 && this.attackTimer % 15 === 0) {\n          bullets.push({\n            x: this.x,\n            y: this.y + this.height / 2,\n            vx: 0,\n            vy: 4\n          });\n          \n          if (this.attackTimer >= 120) {\n            this.attackTimer = 0;\n          }\n        }\n        break;\n        \n      case 'mothership':\n        // Slow oscillating movement\n        this.x += Math.sin(this.movementTimer * 0.02) * 1.5;\n        this.x = Math.max(this.width / 2, Math.min(canvasWidth - this.width / 2, this.x));\n        \n        // Attack pattern - triple shot spread\n        if (this.attackTimer >= 80) {\n          const angles = [-0.3, 0, 0.3];\n          for (const angle of angles) {\n            bullets.push({\n              x: this.x + Math.sin(angle) * 20,\n              y: this.y + this.height / 2,\n              vx: Math.sin(angle) * 2,\n              vy: 3 + Math.cos(angle)\n            });\n          }\n          this.attackTimer = 0;\n        }\n        break;\n        \n      case 'dreadnought':\n        // Minimal movement, mostly stationary\n        this.x += Math.sin(this.movementTimer * 0.01) * 0.5;\n        this.x = Math.max(this.width / 2, Math.min(canvasWidth - this.width / 2, this.x));\n        \n        // Complex attack pattern - alternating between spray and focused\n        if (this.attackTimer >= 60) {\n          if (this.attackPattern % 2 === 0) {\n            // Spray pattern\n            for (let i = -2; i <= 2; i++) {\n              bullets.push({\n                x: this.x + i * 15,\n                y: this.y + this.height / 2,\n                vx: i * 0.8,\n                vy: 3.5\n              });\n            }\n          } else {\n            // Focused beam\n            for (let i = 0; i < 3; i++) {\n              bullets.push({\n                x: this.x,\n                y: this.y + this.height / 2 + i * 10,\n                vx: 0,\n                vy: 5\n              });\n            }\n          }\n          this.attackPattern++;\n          this.attackTimer = 0;\n        }\n        break;\n    }\n    \n    return { bullets };\n  }\n\n  public takeDamage(damage: number): boolean {\n    this.health -= damage;\n    return this.health <= 0;\n  }\n\n  public getHealthPercentage(): number {\n    return this.health / this.maxHealth;\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Flash red when damaged\n    const healthPercent = this.getHealthPercentage();\n    if (healthPercent < 0.3) {\n      ctx.filter = 'hue-rotate(0deg) saturate(150%) brightness(120%)';\n    }\n\n    if (Boss.imageLoaded && Boss.bossImage) {\n      // Draw the boss image (scaled up enemy ship)\n      ctx.drawImage(\n        Boss.bossImage,\n        -this.width / 2,\n        -this.height / 2,\n        this.width,\n        this.height\n      );\n    } else {\n      // Fallback to colored rectangle\n      const colors = {\n        destroyer: '#8B0000',\n        mothership: '#4B0082', \n        dreadnought: '#800080'\n      };\n      \n      ctx.fillStyle = colors[this.type];\n      ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n      \n      // Add some details\n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(-this.width / 4, -this.height / 4, this.width / 2, this.height / 2);\n      \n      // Add weapon ports\n      ctx.fillStyle = '#FFFF00';\n      for (let i = -1; i <= 1; i++) {\n        ctx.fillRect(i * (this.width / 6), this.height / 2 - 5, 6, 8);\n      }\n    }\n\n    ctx.restore();\n\n    // Render health bar\n    this.renderHealthBar(ctx);\n  }\n\n  private renderHealthBar(ctx: CanvasRenderingContext2D) {\n    const barWidth = this.width + 20;\n    const barHeight = 8;\n    const barX = this.x - barWidth / 2;\n    const barY = this.y - this.height / 2 - 20;\n    \n    // Background\n    ctx.fillStyle = '#333333';\n    ctx.fillRect(barX, barY, barWidth, barHeight);\n    \n    // Health\n    const healthPercent = this.getHealthPercentage();\n    const healthColor = healthPercent > 0.5 ? '#00FF00' : healthPercent > 0.25 ? '#FFFF00' : '#FF0000';\n    ctx.fillStyle = healthColor;\n    ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n    \n    // Border\n    ctx.strokeStyle = '#FFFFFF';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(barX, barY, barWidth, barHeight);\n  }\n\n  public static getBossTypeForLevel(level: number): BossType {\n    const bossLevel = Math.floor(level / 5);\n    const types: BossType[] = ['destroyer', 'mothership', 'dreadnought'];\n    return types[bossLevel % types.length];\n  }\n}","size_bytes":7018},"client/src/lib/gameEngine/Bullet.ts":{"content":"export type BulletSize = 'tiny' | 'small' | 'medium' | 'large' | 'massive';\nexport type BulletEffectType = 'basic' | 'explosive' | 'piercing' | 'bouncing' | 'splitting' | 'energy' | 'charged' | 'ultimate';\n\nexport interface BulletTrail {\n  x: number;\n  y: number;\n  alpha: number;\n  size: number;\n}\n\nexport class Bullet {\n  public x: number;\n  public y: number;\n  public vx: number;\n  public vy: number;\n  public width: number;\n  public height: number;\n  public color: string;\n  public type: 'player' | 'enemy';\n  public bulletSize: BulletSize;\n  public effectType: BulletEffectType;\n  public damage: number;\n  public penetrationCount: number;\n  public maxPenetrations: number;\n  public bounceCount: number;\n  public maxBounces: number;\n  public explosionRadius: number;\n  public energyCost: number;\n  public trail: BulletTrail[];\n  public maxTrailLength: number;\n  public glowIntensity: number;\n  public rotationAngle: number;\n  public rotationSpeed: number;\n  public pulseTime: number;\n\n  private static playerRocketImage: HTMLImageElement | null = null;\n  private static enemyRocketImage: HTMLImageElement | null = null;\n  private static playerImageLoaded: boolean = false;\n  private static enemyImageLoaded: boolean = false;\n\n  constructor(\n    x: number, \n    y: number, \n    vx: number, \n    vy: number, \n    radius: number, \n    color: string, \n    type: 'player' | 'enemy',\n    bulletSize: BulletSize = 'medium',\n    effectType: BulletEffectType = 'basic'\n  ) {\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n    this.bulletSize = bulletSize;\n    this.effectType = effectType;\n    this.color = color;\n    this.type = type;\n    \n    // Set size based on bulletSize\n    const sizeMultiplier = this.getSizeMultiplier(bulletSize);\n    this.width = radius * 2 * sizeMultiplier;\n    this.height = radius * 2 * sizeMultiplier;\n    \n    // Set properties based on bullet type and size\n    this.damage = this.calculateDamage();\n    this.penetrationCount = 0;\n    this.maxPenetrations = effectType === 'piercing' ? 3 : 0;\n    this.bounceCount = 0;\n    this.maxBounces = effectType === 'bouncing' ? 5 : 0;\n    this.explosionRadius = effectType === 'explosive' ? this.width * 2 : 0;\n    this.energyCost = this.calculateEnergyCost();\n    this.trail = [];\n    this.maxTrailLength = effectType === 'energy' ? 10 : effectType === 'charged' ? 15 : 5;\n    this.glowIntensity = 1;\n    this.rotationAngle = 0;\n    this.rotationSpeed = Math.random() * 0.2 - 0.1;\n    this.pulseTime = 0;\n    \n    // Load images if not already loaded\n    if (!Bullet.playerRocketImage) {\n      Bullet.loadPlayerImage();\n    }\n    if (!Bullet.enemyRocketImage) {\n      Bullet.loadEnemyImage();\n    }\n  }\n\n  private getSizeMultiplier(size: BulletSize): number {\n    switch (size) {\n      case 'tiny': return 0.5;\n      case 'small': return 0.75;\n      case 'medium': return 1.0;\n      case 'large': return 1.5;\n      case 'massive': return 2.5;\n      default: return 1.0;\n    }\n  }\n\n  private calculateDamage(): number {\n    const baseDamage = 10;\n    const sizeMultiplier = this.getSizeMultiplier(this.bulletSize);\n    \n    switch (this.effectType) {\n      case 'explosive': return Math.floor(baseDamage * sizeMultiplier * 2.5);\n      case 'piercing': return Math.floor(baseDamage * sizeMultiplier * 1.5);\n      case 'charged': return Math.floor(baseDamage * sizeMultiplier * 3);\n      case 'ultimate': return Math.floor(baseDamage * sizeMultiplier * 5);\n      case 'energy': return Math.floor(baseDamage * sizeMultiplier * 2);\n      default: return Math.floor(baseDamage * sizeMultiplier);\n    }\n  }\n\n  private calculateEnergyCost(): number {\n    const baseCost = 1;\n    const sizeMultiplier = this.getSizeMultiplier(this.bulletSize);\n    \n    switch (this.effectType) {\n      case 'explosive': return Math.floor(baseCost * sizeMultiplier * 3);\n      case 'ultimate': return Math.floor(baseCost * sizeMultiplier * 10);\n      case 'energy': return Math.floor(baseCost * sizeMultiplier * 5);\n      case 'charged': return Math.floor(baseCost * sizeMultiplier * 7);\n      default: return Math.floor(baseCost * sizeMultiplier);\n    }\n  }\n\n  private static loadPlayerImage() {\n    Bullet.playerRocketImage = new Image();\n    Bullet.playerRocketImage.onload = () => {\n      Bullet.playerImageLoaded = true;\n      console.log('Player rocket image loaded successfully');\n    };\n    Bullet.playerRocketImage.onerror = () => {\n      console.error('Failed to load player rocket image');\n    };\n    Bullet.playerRocketImage.src = '/rocket.png';\n  }\n\n  private static loadEnemyImage() {\n    Bullet.enemyRocketImage = new Image();\n    Bullet.enemyRocketImage.onload = () => {\n      Bullet.enemyImageLoaded = true;\n      console.log('Enemy rocket image loaded successfully');\n    };\n    Bullet.enemyRocketImage.onerror = () => {\n      console.error('Failed to load enemy rocket image');\n    };\n    Bullet.enemyRocketImage.src = '/enemey_rockets.png';\n  }\n\n  public update(canvasWidth?: number, canvasHeight?: number) {\n    // Update trail\n    this.updateTrail();\n    \n    // Update position\n    this.x += this.vx;\n    this.y += this.vy;\n    \n    // Update rotation and effects\n    this.rotationAngle += this.rotationSpeed;\n    this.pulseTime += 0.15;\n    \n    // Handle bouncing with proper canvas dimensions\n    if (this.effectType === 'bouncing' && this.bounceCount < this.maxBounces) {\n      this.handleBouncing(canvasWidth, canvasHeight);\n    }\n    \n    // Update glow intensity based on effect type\n    switch (this.effectType) {\n      case 'energy':\n        this.glowIntensity = 0.8 + 0.4 * Math.sin(this.pulseTime * 2);\n        break;\n      case 'charged':\n        this.glowIntensity = 1.2 + 0.6 * Math.sin(this.pulseTime * 4);\n        break;\n      case 'ultimate':\n        this.glowIntensity = 1.5 + 0.8 * Math.sin(this.pulseTime * 6);\n        break;\n      default:\n        this.glowIntensity = 1.0;\n    }\n  }\n\n  private updateTrail() {\n    // Add current position to trail\n    this.trail.unshift({\n      x: this.x,\n      y: this.y,\n      alpha: 1.0,\n      size: this.width\n    });\n\n    // Update existing trail points\n    for (let i = 0; i < this.trail.length; i++) {\n      this.trail[i].alpha *= 0.85;\n      this.trail[i].size *= 0.95;\n    }\n\n    // Remove old trail points\n    if (this.trail.length > this.maxTrailLength) {\n      this.trail = this.trail.slice(0, this.maxTrailLength);\n    }\n\n    // Remove invisible points\n    this.trail = this.trail.filter(point => point.alpha > 0.05);\n  }\n\n  private handleBouncing(canvasWidth: number = 800, canvasHeight: number = 600) {\n    let bounced = false;\n    \n    if (this.x <= 0 || this.x >= canvasWidth) {\n      this.vx = -this.vx;\n      this.x = Math.max(0, Math.min(canvasWidth, this.x));\n      bounced = true;\n    }\n    \n    if (this.y <= 0 || this.y >= canvasHeight) {\n      this.vy = -this.vy;\n      this.y = Math.max(0, Math.min(canvasHeight, this.y));\n      bounced = true;\n    }\n    \n    if (bounced) {\n      this.bounceCount++;\n      // Add slight velocity decay on bounce\n      this.vx *= 0.9;\n      this.vy *= 0.9;\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    // Render trail first\n    this.renderTrail(ctx);\n    \n    ctx.save();\n    \n    // Apply glow effect\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 10 * this.glowIntensity;\n    \n    // Apply rotation for spinning bullets\n    if (this.effectType === 'energy' || this.effectType === 'charged' || this.effectType === 'ultimate') {\n      ctx.translate(this.x, this.y);\n      ctx.rotate(this.rotationAngle);\n      ctx.translate(-this.x, -this.y);\n    }\n    \n    // Render based on effect type and size\n    this.renderBulletByType(ctx);\n    \n    ctx.restore();\n    \n    // Render special effects\n    this.renderSpecialEffects(ctx);\n  }\n\n  private renderTrail(ctx: CanvasRenderingContext2D) {\n    if (this.trail.length < 2) return;\n    \n    ctx.save();\n    \n    for (let i = 1; i < this.trail.length; i++) {\n      const current = this.trail[i];\n      const previous = this.trail[i - 1];\n      \n      ctx.globalAlpha = current.alpha * 0.6;\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = Math.max(1, current.size * 0.3);\n      ctx.lineCap = 'round';\n      \n      ctx.beginPath();\n      ctx.moveTo(previous.x, previous.y);\n      ctx.lineTo(current.x, current.y);\n      ctx.stroke();\n    }\n    \n    ctx.restore();\n  }\n\n  private renderBulletByType(ctx: CanvasRenderingContext2D) {\n    switch (this.effectType) {\n      case 'explosive':\n        this.renderExplosiveBullet(ctx);\n        break;\n      case 'piercing':\n        this.renderPiercingBullet(ctx);\n        break;\n      case 'energy':\n        this.renderEnergyBullet(ctx);\n        break;\n      case 'charged':\n        this.renderChargedBullet(ctx);\n        break;\n      case 'ultimate':\n        this.renderUltimateBullet(ctx);\n        break;\n      default:\n        this.renderBasicBullet(ctx);\n    }\n  }\n\n  private renderBasicBullet(ctx: CanvasRenderingContext2D) {\n    if (this.type === 'player') {\n      if (Bullet.playerImageLoaded && Bullet.playerRocketImage) {\n        ctx.drawImage(\n          Bullet.playerRocketImage,\n          this.x - this.width / 2,\n          this.y - this.height / 2,\n          this.width,\n          this.height\n        );\n      } else {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height);\n      }\n    } else {\n      if (Bullet.enemyImageLoaded && Bullet.enemyRocketImage) {\n        ctx.drawImage(\n          Bullet.enemyRocketImage,\n          this.x - this.width / 2,\n          this.y - this.height / 2,\n          this.width,\n          this.height\n        );\n      } else {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.width / 2, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n  }\n\n  private renderExplosiveBullet(ctx: CanvasRenderingContext2D) {\n    // Outer shell\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.width / 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Warning stripes\n    ctx.strokeStyle = '#ffff00';\n    ctx.lineWidth = 2;\n    const stripes = 4;\n    for (let i = 0; i < stripes; i++) {\n      const angle = (i / stripes) * Math.PI * 2;\n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(\n        this.x + Math.cos(angle) * this.width / 3,\n        this.y + Math.sin(angle) * this.width / 3\n      );\n      ctx.stroke();\n    }\n  }\n\n  private renderPiercingBullet(ctx: CanvasRenderingContext2D) {\n    // Sharp pointed projectile\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.moveTo(this.x, this.y - this.height / 2);\n    ctx.lineTo(this.x + this.width / 3, this.y);\n    ctx.lineTo(this.x, this.y + this.height / 2);\n    ctx.lineTo(this.x - this.width / 3, this.y);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Core line\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(this.x, this.y - this.height / 3);\n    ctx.lineTo(this.x, this.y + this.height / 3);\n    ctx.stroke();\n  }\n\n  private renderEnergyBullet(ctx: CanvasRenderingContext2D) {\n    const pulse = Math.sin(this.pulseTime * 3) * 0.3 + 1;\n    \n    // Energy core\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, (this.width / 2) * pulse, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Energy rings\n    for (let i = 1; i <= 3; i++) {\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = 1;\n      ctx.globalAlpha = 0.6 / i;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, (this.width / 2) * pulse + i * 3, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n    }\n  }\n\n  private renderChargedBullet(ctx: CanvasRenderingContext2D) {\n    const chargeIntensity = Math.sin(this.pulseTime * 4) * 0.5 + 1;\n    \n    // Main projectile\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.width / 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Electric arcs\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    ctx.globalAlpha = chargeIntensity * 0.8;\n    \n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2 + this.rotationAngle;\n      const length = this.width * 0.4 * chargeIntensity;\n      \n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(\n        this.x + Math.cos(angle) * length,\n        this.y + Math.sin(angle) * length\n      );\n      ctx.stroke();\n    }\n    \n    ctx.globalAlpha = 1;\n  }\n\n  private renderUltimateBullet(ctx: CanvasRenderingContext2D) {\n    const intensity = Math.sin(this.pulseTime * 6) * 0.4 + 1.2;\n    \n    // Multiple layered effects\n    const layers = [\n      { radius: this.width * 0.6, color: '#ffffff', alpha: 0.9 },\n      { radius: this.width * 0.4, color: this.color, alpha: 1.0 },\n      { radius: this.width * 0.2, color: '#ffffff', alpha: 0.8 }\n    ];\n    \n    layers.forEach(layer => {\n      ctx.globalAlpha = layer.alpha;\n      ctx.fillStyle = layer.color;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, layer.radius * intensity, 0, Math.PI * 2);\n      ctx.fill();\n    });\n    \n    ctx.globalAlpha = 1;\n    \n    // Surrounding energy field\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = 3;\n    for (let ring = 1; ring <= 2; ring++) {\n      ctx.globalAlpha = 0.5 / ring;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.width * ring * intensity, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    \n    ctx.globalAlpha = 1;\n  }\n\n  private renderSpecialEffects(ctx: CanvasRenderingContext2D) {\n    // Additional particle effects for certain bullet types\n    if (this.effectType === 'ultimate' || this.effectType === 'charged') {\n      this.renderSparkles(ctx);\n    }\n  }\n\n  private renderSparkles(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    const sparkleCount = this.effectType === 'ultimate' ? 8 : 4;\n    \n    for (let i = 0; i < sparkleCount; i++) {\n      const angle = (i / sparkleCount) * Math.PI * 2 + this.pulseTime;\n      const distance = this.width * 0.8 + Math.sin(this.pulseTime * 2) * 5;\n      \n      const x = this.x + Math.cos(angle) * distance;\n      const y = this.y + Math.sin(angle) * distance;\n      \n      ctx.fillStyle = '#ffffff';\n      ctx.globalAlpha = 0.8;\n      ctx.beginPath();\n      ctx.arc(x, y, 1, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    ctx.restore();\n  }\n\n  // Utility methods for bullet behavior\n  public canPenetrate(): boolean {\n    return this.effectType === 'piercing' && this.penetrationCount < this.maxPenetrations;\n  }\n\n  public onPenetration() {\n    if (this.effectType === 'piercing') {\n      this.penetrationCount++;\n    }\n  }\n\n  public shouldExplode(): boolean {\n    return this.effectType === 'explosive';\n  }\n\n  public isOutOfBounds(screenWidth: number, screenHeight: number): boolean {\n    const margin = Math.max(this.width, this.height);\n    return (\n      this.x < -margin || \n      this.x > screenWidth + margin || \n      this.y < -margin || \n      this.y > screenHeight + margin\n    );\n  }\n\n  public getBoundingBox() {\n    return {\n      x: this.x - this.width / 2,\n      y: this.y - this.height / 2,\n      width: this.width,\n      height: this.height\n    };\n  }\n}\n","size_bytes":15175},"client/src/lib/gameEngine/CollisionSystem.ts":{"content":"export interface GameObject {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport class CollisionSystem {\n  public checkCollision(obj1: GameObject, obj2: GameObject): boolean {\n    return (\n      obj1.x - obj1.width / 2 < obj2.x + obj2.width / 2 &&\n      obj1.x + obj1.width / 2 > obj2.x - obj2.width / 2 &&\n      obj1.y - obj1.height / 2 < obj2.y + obj2.height / 2 &&\n      obj1.y + obj1.height / 2 > obj2.y - obj2.height / 2\n    );\n  }\n}\n","size_bytes":459},"client/src/lib/gameEngine/Enemy.ts":{"content":"export class Enemy {\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public speed: number;\n  public health: number;\n\n  private oscillationOffset: number;\n  private oscillationSpeed: number = 0.02;\n  private static enemyImage: HTMLImageElement | null = null;\n  private static imageLoaded: boolean = false;\n\n  constructor(x: number, y: number, width: number, height: number, speed: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.speed = speed;\n    this.health = 1;\n    this.oscillationOffset = Math.random() * Math.PI * 2;\n    \n    // Load enemy image if not already loaded\n    if (!Enemy.enemyImage) {\n      Enemy.loadImage();\n    }\n  }\n\n  public takeDamage(damage: number): boolean {\n    this.health -= damage;\n    return this.health <= 0;\n  }\n\n  private static loadImage() {\n    Enemy.enemyImage = new Image();\n    Enemy.enemyImage.onload = () => {\n      Enemy.imageLoaded = true;\n      console.log('Enemy spaceship image loaded successfully');\n    };\n    Enemy.enemyImage.onerror = () => {\n      console.error('Failed to load enemy spaceship image');\n    };\n    Enemy.enemyImage.src = '/Enemey_Space_Ship.png';\n  }\n\n  public update(canvasWidth: number, canvasHeight: number) {\n    this.y += this.speed;\n    \n    // Add slight oscillation for more interesting movement\n    this.x += Math.sin(this.y * this.oscillationSpeed + this.oscillationOffset) * 0.5;\n    \n    // Keep enemy within screen bounds\n    this.x = Math.max(this.width / 2, Math.min(canvasWidth - this.width / 2, this.x));\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    if (Enemy.imageLoaded && Enemy.enemyImage) {\n      // Draw the enemy spaceship image\n      ctx.drawImage(\n        Enemy.enemyImage,\n        -this.width / 2,\n        -this.height / 2,\n        this.width,\n        this.height\n      );\n    } else {\n      // Fallback to red rectangle if image isn't loaded yet\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n\n      // Draw enemy details\n      ctx.fillStyle = '#aa0000';\n      ctx.fillRect(-this.width / 4, this.height / 2 - 5, this.width / 2, 5);\n      \n      // Draw antenna/weapon\n      ctx.fillStyle = '#ffff00';\n      ctx.fillRect(-2, -this.height / 2 - 5, 4, 5);\n    }\n\n    ctx.restore();\n  }\n}\n","size_bytes":2406},"client/src/lib/gameEngine/EnemyTypes.ts":{"content":"import { Enemy } from './Enemy';\n\nexport type EnemyVariant = 'basic' | 'scout' | 'heavy' | 'bomber' | 'kamikaze';\n\nexport class EnemyScout extends Enemy {\n  private dashTimer: number = 0;\n  private dashCooldown: number = 180; // 3 seconds at 60fps\n  private isDashing: boolean = false;\n  \n  constructor(x: number, y: number, level: number) {\n    super(x, y, 20, 15, 2 + (level - 1) * 0.5); // Smaller, faster\n    this.health = 1;\n    this.dashTimer = Math.random() * 120; // Random initial cooldown\n  }\n\n  public update(canvasWidth: number, canvasHeight: number) {\n    // Base movement\n    super.update(canvasWidth, canvasHeight);\n    \n    // Dash behavior\n    this.dashTimer++;\n    if (this.dashTimer >= this.dashCooldown && !this.isDashing) {\n      this.isDashing = true;\n      this.speed *= 3; // Triple speed during dash\n      this.dashTimer = 0;\n      \n      // Dash lasts for 1 second\n      setTimeout(() => {\n        this.isDashing = false;\n        this.speed /= 3; // Return to normal speed\n      }, 1000);\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Different color for scout - bright blue\n    if (this.isDashing) {\n      ctx.shadowColor = '#00AAFF';\n      ctx.shadowBlur = 15;\n    }\n    \n    ctx.fillStyle = '#00AAFF';\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    \n    // Triangle shape for aerodynamic look\n    ctx.fillStyle = '#0088CC';\n    ctx.beginPath();\n    ctx.moveTo(0, -this.height / 2);\n    ctx.lineTo(-this.width / 3, this.height / 4);\n    ctx.lineTo(this.width / 3, this.height / 4);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n\nexport class EnemyHeavy extends Enemy {\n  private shieldHealth: number;\n  private maxShieldHealth: number;\n  \n  constructor(x: number, y: number, level: number) {\n    super(x, y, 45, 35, 0.5 + (level - 1) * 0.2); // Larger, slower\n    this.health = 3 + Math.floor(level / 2);\n    this.shieldHealth = 2;\n    this.maxShieldHealth = 2;\n  }\n\n  public takeDamage(damage: number): boolean {\n    if (this.shieldHealth > 0) {\n      this.shieldHealth -= damage;\n      return false; // Still alive\n    } else {\n      this.health -= damage;\n      return this.health <= 0;\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Heavy enemy - dark red/brown\n    ctx.fillStyle = '#AA2222';\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    \n    // Armor plating\n    ctx.fillStyle = '#666666';\n    ctx.fillRect(-this.width / 3, -this.height / 3, this.width * 2/3, this.height * 2/3);\n    \n    // Shield indicator\n    if (this.shieldHealth > 0) {\n      ctx.strokeStyle = '#00FFFF';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(0, 0, this.width / 2 + 5, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n}\n\nexport class EnemyBomber extends Enemy {\n  private bombTimer: number = 0;\n  private bombCooldown: number = 240; // 4 seconds\n  \n  constructor(x: number, y: number, level: number) {\n    super(x, y, 35, 25, 1 + (level - 1) * 0.3); // Medium size and speed\n    this.health = 2;\n    this.bombTimer = Math.random() * 120; // Random initial timing\n  }\n\n  public update(canvasWidth: number, canvasHeight: number): {shouldBomb: boolean, bombX: number, bombY: number} {\n    super.update(canvasWidth, canvasHeight);\n    \n    this.bombTimer++;\n    const shouldBomb = this.bombTimer >= this.bombCooldown;\n    \n    if (shouldBomb) {\n      this.bombTimer = 0;\n      return {\n        shouldBomb: true,\n        bombX: this.x,\n        bombY: this.y + this.height / 2\n      };\n    }\n    \n    return { shouldBomb: false, bombX: 0, bombY: 0 };\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Bomber - green/orange colors\n    ctx.fillStyle = '#228822';\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    \n    // Bomb bay\n    ctx.fillStyle = '#FF6600';\n    ctx.fillRect(-this.width / 4, this.height / 4, this.width / 2, this.height / 4);\n    \n    // Wings\n    ctx.fillStyle = '#114411';\n    ctx.fillRect(-this.width / 2 - 5, -this.height / 6, 5, this.height / 3);\n    ctx.fillRect(this.width / 2, -this.height / 6, 5, this.height / 3);\n\n    ctx.restore();\n  }\n}\n\nexport class EnemyKamikaze extends Enemy {\n  private targetPlayerX: number = 0;\n  private isCharging: boolean = false;\n  private chargeSpeed: number = 4;\n  \n  constructor(x: number, y: number, level: number) {\n    super(x, y, 25, 20, 1.5 + (level - 1) * 0.4); // Fast and aggressive\n    this.health = 1;\n  }\n\n  public update(canvasWidth: number, canvasHeight: number, playerX?: number): void {\n    if (playerX !== undefined) {\n      this.targetPlayerX = playerX;\n    }\n    \n    // If player is below, charge towards them\n    if (this.y > canvasHeight / 3 && !this.isCharging) {\n      this.isCharging = true;\n    }\n    \n    if (this.isCharging) {\n      // Move towards player\n      const dx = this.targetPlayerX - this.x;\n      const distance = Math.abs(dx);\n      \n      if (distance > 5) {\n        this.x += (dx / distance) * this.chargeSpeed;\n      }\n      \n      // Increase downward speed\n      this.speed = this.chargeSpeed;\n    }\n    \n    super.update(canvasWidth, canvasHeight);\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Kamikaze - bright red with warning effects\n    if (this.isCharging) {\n      ctx.shadowColor = '#FF0000';\n      ctx.shadowBlur = 10;\n    }\n    \n    ctx.fillStyle = '#FF2222';\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    \n    // Warning stripes\n    ctx.fillStyle = '#FFFF00';\n    for (let i = 0; i < 3; i++) {\n      const stripeY = -this.height / 2 + (i * this.height / 3);\n      ctx.fillRect(-this.width / 2, stripeY, this.width, 2);\n    }\n    \n    // Thruster effect when charging\n    if (this.isCharging) {\n      ctx.fillStyle = '#FFAA00';\n      ctx.fillRect(-this.width / 4, this.height / 2, this.width / 2, 8);\n    }\n\n    ctx.restore();\n  }\n}\n\nexport class EnemyFactory {\n  public static createEnemy(variant: EnemyVariant, x: number, y: number, level: number): Enemy {\n    switch (variant) {\n      case 'scout':\n        return new EnemyScout(x, y, level);\n      case 'heavy':\n        return new EnemyHeavy(x, y, level);\n      case 'bomber':\n        return new EnemyBomber(x, y, level);\n      case 'kamikaze':\n        return new EnemyKamikaze(x, y, level);\n      case 'basic':\n      default:\n        return new Enemy(x, y, 30, 20, 1 + (level - 1) * 0.3);\n    }\n  }\n\n  public static getRandomVariant(level: number): EnemyVariant {\n    const variants: EnemyVariant[] = ['basic'];\n    \n    // Unlock new enemy types based on level\n    if (level >= 2) variants.push('scout');\n    if (level >= 3) variants.push('kamikaze');\n    if (level >= 4) variants.push('bomber');\n    if (level >= 5) variants.push('heavy');\n    \n    // Weight distribution (basic enemies become less common at higher levels)\n    const weights = {\n      basic: Math.max(0.5, 1 - level * 0.1),\n      scout: level >= 2 ? 0.3 : 0,\n      kamikaze: level >= 3 ? 0.2 : 0,\n      bomber: level >= 4 ? 0.15 : 0,\n      heavy: level >= 5 ? 0.1 : 0\n    };\n    \n    const random = Math.random();\n    let cumulative = 0;\n    \n    for (const [variant, weight] of Object.entries(weights)) {\n      cumulative += weight;\n      if (random <= cumulative) {\n        return variant as EnemyVariant;\n      }\n    }\n    \n    return 'basic';\n  }\n}","size_bytes":7564},"client/src/lib/gameEngine/GameEngine.ts":{"content":"import { Player } from \"./Player\";\nimport { Enemy } from \"./Enemy\";\nimport { Bullet } from \"./Bullet\";\nimport { Particle } from \"./Particle\";\nimport { CollisionSystem } from \"./CollisionSystem\";\nimport { PowerUp } from \"./PowerUp\";\nimport { Boss, BossType } from \"./Boss\";\nimport { EnemyFactory, EnemyVariant, EnemyBomber, EnemyKamikaze } from \"./EnemyTypes\";\nimport { WeaponSystem } from \"./WeaponSystems\";\nimport { GameOptimizer } from \"../performance/GameOptimizer\";\n\nexport interface GameState {\n  score: number;\n  lives: number;\n  level: number;\n  enemiesKilled: number;\n  levelProgress: number;\n  gameOver: boolean;\n  activePowerUps: string[];\n  bossActive: boolean;\n  bossHealth?: number;\n  bossMaxHealth?: number;\n  bossType?: BossType;\n}\n\nexport class GameEngine {\n  public player: Player;\n  private enemies: Enemy[] = [];\n  private playerBullets: Bullet[] = [];\n  private enemyBullets: Bullet[] = [];\n  private particles: Particle[] = [];\n  private powerUps: PowerUp[] = [];\n  private collisionSystem: CollisionSystem;\n  private weaponSystem: WeaponSystem;\n  private boss: Boss | null = null;\n  \n  private score = 0;\n  private lives = 3;\n  private level = 1;\n  private enemiesKilled = 0;\n  private gameOver = false;\n  \n  // Level progression settings\n  private readonly ENEMIES_PER_LEVEL = 10; // Enemies to kill to advance level\n  \n  // Dynamic difficulty settings (adjusted per level)\n  private enemySpawnTimer = 0;\n  private enemySpawnDelay = 120; // frames (gets faster each level)\n  private readonly BASE_ENEMY_SPAWN_DELAY = 120;\n  private readonly MIN_ENEMY_SPAWN_DELAY = 30;\n  \n  private playerFireTimer = 0;\n  private playerFireDelay = 15; // frames\n  \n  private ctx: CanvasRenderingContext2D;\n  private width: number;\n  private height: number;\n  \n  // Responsive bullet scaling\n  private bulletScale: number = 1.0;\n  \n  // Performance tracking\n  private lastFrameTime: number = 0;\n  private starField: Array<{x: number, y: number, size: number}> = [];\n  private frameCount: number = 0;\n  \n  // Power-up state tracking to prevent duration coupling\n  private activePowerUpStates: Map<string, boolean> = new Map();\n\n  constructor(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n    \n    this.player = new Player(width / 2, height - 80, 60, 40);\n    this.collisionSystem = new CollisionSystem();\n    this.weaponSystem = new WeaponSystem();\n    \n    // Calculate initial bullet scale based on screen size\n    this.updateBulletScale();\n    \n    // Initialize performance optimizer\n    GameOptimizer.initialize();\n    \n    // Generate star field\n    this.generateStarField();\n    \n    // Listen for touch controls\n    window.addEventListener('playerMove', this.handlePlayerMove.bind(this));\n  }\n\n  private handlePlayerMove = (event: Event) => {\n    const customEvent = event as CustomEvent;\n    const position = customEvent.detail.position;\n    // Map position 0-1 to full screen width (0 to canvasWidth)\n    const targetX = position * this.width;\n    console.log(`Touch position: ${position.toFixed(2)}, Target X: ${targetX.toFixed(1)}, Canvas width: ${this.width}`);\n    this.player.setTargetPosition(targetX);\n  };\n\n  private updateBulletScale(): void {\n    // Calculate responsive bullet scale based on screen size\n    const shortSide = Math.min(this.width, this.height);\n    // Base scale calculation: smaller screens get bigger bullets\n    const baseScale = 720 / shortSide; // 720 is the baseline reference\n    // Clamp the scale between 1.0 and 2.5 for optimal visibility\n    this.bulletScale = Math.max(1.0, Math.min(2.5, baseScale));\n    \n    console.log(`Screen: ${this.width}x${this.height}, Short side: ${shortSide}, Bullet scale: ${this.bulletScale.toFixed(2)}`);\n  }\n\n  public getBulletScale(): number {\n    return this.bulletScale;\n  }\n\n  public updateCanvasSize(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n    this.updateBulletScale();\n  }\n\n  public reset() {\n    // Reset player position instead of creating new player\n    this.player.x = this.width / 2;\n    this.player.y = this.height - 80;\n    this.player.targetX = this.width / 2;\n    this.player.moveLeft = false;\n    this.player.moveRight = false;\n    \n    this.enemies = [];\n    this.playerBullets = [];\n    this.enemyBullets = [];\n    this.particles = [];\n    this.powerUps = [];\n    this.boss = null;\n    this.score = 0;\n    this.lives = 3;\n    this.level = 1;\n    this.enemiesKilled = 0;\n    this.gameOver = false;\n    this.enemySpawnTimer = 0;\n    this.playerFireTimer = 0;\n    \n    // Reset difficulty settings\n    this.enemySpawnDelay = this.BASE_ENEMY_SPAWN_DELAY;\n  }\n\n  public update(): GameState {\n    // Track performance\n    const currentTime = performance.now();\n    if (this.lastFrameTime > 0) {\n      const deltaTime = currentTime - this.lastFrameTime;\n      GameOptimizer.trackFrameTime(deltaTime);\n    }\n    this.lastFrameTime = currentTime;\n    this.frameCount++;\n    if (this.gameOver) {\n      return { \n        score: this.score, \n        lives: this.lives, \n        level: this.level,\n        enemiesKilled: this.enemiesKilled,\n        levelProgress: (this.enemiesKilled % this.ENEMIES_PER_LEVEL) / this.ENEMIES_PER_LEVEL,\n        gameOver: this.gameOver,\n        activePowerUps: this.player.getActivePowerUps().map(p => p.type),\n        bossActive: false\n      };\n    }\n\n    // Check if boss should spawn (every 5 levels)\n    if (this.level % 5 === 0 && !this.boss && this.enemies.length === 0) {\n      const bossType = Boss.getBossTypeForLevel(this.level);\n      this.boss = new Boss(this.width / 2, 100, bossType, this.level);\n      \n      // Dispatch boss spawn event for UI feedback\n      window.dispatchEvent(new CustomEvent('bossSpawn', { \n        detail: { type: bossType, level: this.level } \n      }));\n    }\n\n    // Update player\n    this.player.update(this.width, this.height);\n\n    // Auto-fire player bullets using WeaponSystem\n    this.weaponSystem.updateFireTimer();\n    \n    // Update weapon effects\n    this.weaponSystem.updateWeaponEffects();\n    \n    // Update weapon targets for homing bullets\n    this.weaponSystem.updateTargets(this.enemies);\n    \n    // Handle power-ups with edge-triggered state changes to prevent duration coupling\n    const hasMultiShot = this.player.hasPowerUp('multi-shot');\n    const wasMultiShotActive = this.activePowerUpStates.get('multi-shot') || false;\n    \n    if (hasMultiShot && !wasMultiShotActive) {\n      // Just activated multi-shot - get remaining duration from player\n      const multiShotEffect = this.player.getActivePowerUps().find(p => p.type === 'multi-shot');\n      if (multiShotEffect) {\n        const remainingTime = multiShotEffect.duration - (Date.now() - multiShotEffect.startTime);\n        this.weaponSystem.setWeapon('spread', Math.max(0, remainingTime));\n      }\n    } else if (!hasMultiShot && wasMultiShotActive) {\n      // Just deactivated multi-shot - revert to basic weapon\n      this.weaponSystem.clearWeapon('spread');\n    }\n    this.activePowerUpStates.set('multi-shot', hasMultiShot);\n    \n    // Handle rapid-fire (immediate effect, no duration coupling)\n    if (this.player.hasPowerUp('rapid-fire')) {\n      this.weaponSystem.setFireRate(5); // Faster fire rate\n    } else {\n      this.weaponSystem.setFireRate(15); // Normal fire rate\n    }\n    \n    // Fire bullets using WeaponSystem\n    const bullets = this.weaponSystem.fire(this.player.x, this.player.y - this.player.height / 2, this.bulletScale);\n    if (bullets.length > 0) {\n      this.playerBullets.push(...bullets);\n      \n      // Play shoot sound\n      window.dispatchEvent(new CustomEvent('playShootSound'));\n      window.dispatchEvent(new CustomEvent('bulletFired'));\n    }\n\n    // Spawn enemies with level-based difficulty (only if no boss), respecting performance limits\n    if (!this.boss) {\n      // Slow-motion effect\n      const spawnDelay = this.player.hasPowerUp('slow-motion') ? this.enemySpawnDelay * 2 : this.enemySpawnDelay;\n      \n      // Performance-based enemy limit\n      const maxEnemies = GameOptimizer.getQualityLevel() === 'low' ? 8 : \n                         GameOptimizer.getQualityLevel() === 'medium' ? 12 : 16;\n      \n      this.enemySpawnTimer++;\n      if (this.enemySpawnTimer >= spawnDelay && this.enemies.length < maxEnemies) {\n        const x = Math.random() * (this.width - 60) + 30;\n        \n        // Use enemy factory to create varied enemy types\n        const variant = EnemyFactory.getRandomVariant(this.level);\n        const enemy = EnemyFactory.createEnemy(variant, x, -20, this.level);\n        \n        this.enemies.push(enemy);\n        this.enemySpawnTimer = 0;\n      }\n    }\n    \n    // Update boss if active\n    if (this.boss) {\n      const bossResult = this.boss.update(this.width, this.height);\n      \n      // Add boss bullets to enemy bullets array\n      for (const bullet of bossResult.bullets) {\n        this.enemyBullets.push(new Bullet(\n          bullet.x,\n          bullet.y,\n          bullet.vx,\n          bullet.vy,\n          7 * this.bulletScale,\n          '#ff4444',\n          'enemy'\n        ));\n      }\n    }\n\n    // Update enemies and their special behaviors\n    for (let i = this.enemies.length - 1; i >= 0; i--) {\n      const enemy = this.enemies[i];\n      \n      // Handle special enemy behaviors\n      if (enemy instanceof EnemyBomber) {\n        const bomberResult = enemy.update(this.width, this.height);\n        if (bomberResult.shouldBomb) {\n          // Create bombing pattern - multiple bullets in a spread\n          for (let j = -1; j <= 1; j++) {\n            this.enemyBullets.push(new Bullet(\n              bomberResult.bombX + j * 15,\n              bomberResult.bombY,\n              j * 0.5,\n              4 + (this.level - 1) * 0.3,\n              6 * this.bulletScale,\n              '#ff6600',\n              'enemy'\n            ));\n          }\n          window.dispatchEvent(new CustomEvent('playShootSound'));\n        }\n      } else if (enemy instanceof EnemyKamikaze) {\n        enemy.update(this.width, this.height, this.player.x);\n      } else {\n        enemy.update(this.width, this.height);\n      }\n\n      // Remove enemies that are off-screen\n      if (enemy.y > this.height + 50) {\n        this.enemies.splice(i, 1);\n        continue;\n      }\n\n      // Standard enemy firing (not for bombers or kamikaze)\n      if (!(enemy instanceof EnemyBomber) && !(enemy instanceof EnemyKamikaze)) {\n        const enemyFireChance = 0.003 + (this.level - 1) * 0.002;\n        if (Math.random() < enemyFireChance) {\n          this.enemyBullets.push(new Bullet(\n            enemy.x,\n            enemy.y + enemy.height / 2,\n            0,\n            4 + (this.level - 1) * 0.5,\n            5 * this.bulletScale,\n            '#ff0000',\n            'enemy'\n          ));\n          window.dispatchEvent(new CustomEvent('playShootSound'));\n        }\n      }\n    }\n\n    // Update bullets\n    this.updateBullets(this.playerBullets);\n    this.updateBullets(this.enemyBullets);\n\n    // Update particles\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      this.particles[i].update();\n      if (this.particles[i].isDead()) {\n        this.particles.splice(i, 1);\n      }\n    }\n\n    // Update power-ups\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      this.powerUps[i].update();\n      \n      // Remove power-ups that are off-screen\n      if (this.powerUps[i].y > this.height + 50) {\n        this.powerUps.splice(i, 1);\n      }\n    }\n\n    // Handle collisions\n    this.handleCollisions();\n\n    return { \n      score: this.score, \n      lives: this.lives, \n      level: this.level,\n      enemiesKilled: this.enemiesKilled,\n      levelProgress: (this.enemiesKilled % this.ENEMIES_PER_LEVEL) / this.ENEMIES_PER_LEVEL,\n      gameOver: this.gameOver,\n      activePowerUps: this.player.getActivePowerUps().map(p => p.type),\n      bossActive: !!this.boss,\n      bossHealth: this.boss?.health,\n      bossMaxHealth: this.boss?.maxHealth,\n      bossType: this.boss?.type\n    };\n  }\n\n  private updateBullets(bullets: Bullet[]) {\n    for (let i = bullets.length - 1; i >= 0; i--) {\n      bullets[i].update();\n      \n      // Remove bullets that are off-screen\n      if (bullets[i].y < -10 || bullets[i].y > this.height + 10) {\n        bullets.splice(i, 1);\n      }\n    }\n  }\n\n  private handleCollisions() {\n    // Player bullets vs enemies\n    for (let i = this.playerBullets.length - 1; i >= 0; i--) {\n      const bullet = this.playerBullets[i];\n      \n      for (let j = this.enemies.length - 1; j >= 0; j--) {\n        const enemy = this.enemies[j];\n        \n        if (this.collisionSystem.checkCollision(bullet, enemy)) {\n          // Create explosion particles\n          this.createExplosion(enemy.x, enemy.y, '#ffff00');\n          \n          // Remove bullet\n          this.playerBullets.splice(i, 1);\n          \n          // Damage enemy and check if destroyed\n          const enemyDestroyed = enemy.takeDamage(1);\n          \n          if (enemyDestroyed) {\n            // Remove enemy\n            this.enemies.splice(j, 1);\n            \n            // Update score and enemy kill count (different points for different types)\n            let points = 3 + (this.level - 1) * 4;\n            \n            // Bonus points for special enemies\n            if (enemy.constructor.name.includes('Heavy')) points *= 3;\n            else if (enemy.constructor.name.includes('Bomber')) points *= 2;\n            else if (enemy.constructor.name.includes('Scout')) points *= 1.5;\n            else if (enemy.constructor.name.includes('Kamikaze')) points *= 2;\n            \n            this.score += Math.floor(points);\n            this.enemiesKilled++;\n            \n            // Check for level progression\n            this.checkLevelProgression();\n            \n            // Higher chance for power-ups from special enemies\n            const powerUpChance = enemy.constructor.name === 'Enemy' ? 0.15 : 0.25;\n            if (Math.random() < powerUpChance) {\n              const powerUpType = PowerUp.getRandomType();\n              this.powerUps.push(new PowerUp(enemy.x, enemy.y, powerUpType));\n            }\n            \n            // Dispatch enemy destroyed event\n            window.dispatchEvent(new CustomEvent('enemyDestroyed'));\n            window.dispatchEvent(new CustomEvent('enemyKilled'));\n          }\n          \n          // Play hit sound\n          window.dispatchEvent(new CustomEvent('playHitSound'));\n          window.dispatchEvent(new CustomEvent('bulletHit'));\n          break;\n        }\n      }\n    }\n\n    // Player bullets vs boss\n    if (this.boss) {\n      for (let i = this.playerBullets.length - 1; i >= 0; i--) {\n        const bullet = this.playerBullets[i];\n        \n        if (this.collisionSystem.checkCollision(bullet, this.boss)) {\n          // Create explosion particles\n          this.createExplosion(bullet.x, bullet.y, '#ffaa00');\n          \n          // Remove bullet\n          this.playerBullets.splice(i, 1);\n          \n          // Damage boss\n          const bossDestroyed = this.boss.takeDamage(1);\n          \n          // Play hit sound\n          window.dispatchEvent(new CustomEvent('playHitSound'));\n          \n          if (bossDestroyed) {\n            // Create big explosion\n            this.createBigExplosion(this.boss.x, this.boss.y);\n            \n            // Reward player\n            this.score += 100 + (this.level * 20); // Big score bonus\n            \n            // Drop multiple power-ups\n            for (let k = 0; k < 3; k++) {\n              const powerUpType = PowerUp.getRandomType();\n              this.powerUps.push(new PowerUp(\n                this.boss.x + (Math.random() - 0.5) * 60,\n                this.boss.y + (Math.random() - 0.5) * 40,\n                powerUpType\n              ));\n            }\n            \n            // Remove boss and advance level\n            this.boss = null;\n            this.enemiesKilled = this.level * this.ENEMIES_PER_LEVEL; // Force level progression\n            this.checkLevelProgression();\n            \n            // Dispatch boss defeated event\n            window.dispatchEvent(new CustomEvent('bossDefeated', { \n              detail: { level: this.level, score: this.score } \n            }));\n            window.dispatchEvent(new CustomEvent('playSuccessSound'));\n          }\n          break;\n        }\n      }\n    }\n\n    // Enemy bullets vs player\n    for (let i = this.enemyBullets.length - 1; i >= 0; i--) {\n      const bullet = this.enemyBullets[i];\n      \n      if (this.collisionSystem.checkCollision(bullet, this.player)) {\n        // Check if player is shielded\n        if (this.player.isShielded) {\n          // Shield absorbs the hit\n          this.enemyBullets.splice(i, 1);\n          this.createExplosion(bullet.x, bullet.y, '#00ffff');\n          continue;\n        }\n        \n        // Create explosion particles\n        this.createExplosion(this.player.x, this.player.y, '#ff0000');\n        \n        // Remove bullet\n        this.enemyBullets.splice(i, 1);\n        \n        // Reduce lives\n        this.lives--;\n        \n        // Play hit sound and dispatch player hit event\n        window.dispatchEvent(new CustomEvent('playHitSound'));\n        window.dispatchEvent(new CustomEvent('playerHit'));\n        \n        if (this.lives <= 0) {\n          this.gameOver = true;\n        }\n        break;\n      }\n    }\n\n    // Enemies vs player\n    for (let i = this.enemies.length - 1; i >= 0; i--) {\n      const enemy = this.enemies[i];\n      \n      if (this.collisionSystem.checkCollision(enemy, this.player)) {\n        // Create explosion particles\n        this.createExplosion(enemy.x, enemy.y, '#ff8800');\n        \n        // Remove enemy\n        this.enemies.splice(i, 1);\n        \n        // Reduce lives\n        this.lives--;\n        \n        // Play hit sound and dispatch player hit event\n        window.dispatchEvent(new CustomEvent('playHitSound'));\n        window.dispatchEvent(new CustomEvent('playerHit'));\n        \n        if (this.lives <= 0) {\n          this.gameOver = true;\n        }\n        break;\n      }\n    }\n\n    // Power-ups vs player\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      const powerUp = this.powerUps[i];\n      \n      if (this.collisionSystem.checkCollision(powerUp, this.player)) {\n        // Apply power-up effect\n        if (powerUp.type === 'extra-life') {\n          this.lives++;\n        } else {\n          this.player.applyPowerUp(powerUp.type);\n        }\n        \n        // Remove power-up\n        this.powerUps.splice(i, 1);\n        \n        // Create collection particles\n        this.createExplosion(powerUp.x, powerUp.y, powerUp.color);\n        \n        // Play success sound\n        window.dispatchEvent(new CustomEvent('playSuccessSound'));\n        window.dispatchEvent(new CustomEvent('powerUpCollected'));\n        break;\n      }\n    }\n  }\n\n  private checkLevelProgression() {\n    // Check if enough enemies killed to advance level\n    if (this.enemiesKilled >= this.level * this.ENEMIES_PER_LEVEL) {\n      this.level++;\n      \n      // Update difficulty settings for new level\n      this.updateDifficulty();\n      \n      // Dispatch level up event for UI feedback\n      window.dispatchEvent(new CustomEvent('levelUp', { \n        detail: { level: this.level, score: this.score } \n      }));\n      \n      // Play success sound\n      window.dispatchEvent(new CustomEvent('playSuccessSound'));\n    }\n  }\n\n  private updateDifficulty() {\n    // Decrease spawn delay (increase spawn rate) but don't go below minimum\n    this.enemySpawnDelay = Math.max(\n      this.MIN_ENEMY_SPAWN_DELAY,\n      this.BASE_ENEMY_SPAWN_DELAY - (this.level - 1) * 15\n    );\n  }\n\n  private createExplosion(x: number, y: number, color: string) {\n    // Respect particle limits based on performance\n    if (GameOptimizer.shouldLimitParticles(this.particles.length)) {\n      return;\n    }\n    \n    // Dynamic particle count based on performance\n    const baseCount = 8;\n    const qualityMultiplier = GameOptimizer.getQualityLevel() === 'low' ? 0.25 : \n                             GameOptimizer.getQualityLevel() === 'medium' ? 0.5 : 1.0;\n    const particleCount = Math.max(2, Math.floor(baseCount * qualityMultiplier));\n    \n    for (let i = 0; i < particleCount; i++) {\n      const angle = (Math.PI * 2 * i) / particleCount;\n      const speed = Math.random() * 3 + 2;\n      const particle = new Particle(\n        x,\n        y,\n        Math.cos(angle) * speed,\n        Math.sin(angle) * speed,\n        color,\n        30\n      );\n      this.particles.push(particle);\n    }\n  }\n\n  private createBigExplosion(x: number, y: number) {\n    // Create larger explosion for boss defeat, respecting performance limits\n    if (GameOptimizer.shouldLimitParticles(this.particles.length)) {\n      // Fall back to smaller explosion if at particle limit\n      this.createExplosion(x, y, '#ff4400');\n      return;\n    }\n    \n    const baseCount = 20;\n    const qualityMultiplier = GameOptimizer.getQualityLevel() === 'low' ? 0.3 : \n                             GameOptimizer.getQualityLevel() === 'medium' ? 0.6 : 1.0;\n    const particleCount = Math.max(6, Math.floor(baseCount * qualityMultiplier));\n    \n    for (let i = 0; i < particleCount; i++) {\n      const angle = (Math.PI * 2 * i) / particleCount;\n      const speed = Math.random() * 5 + 3;\n      const colors = ['#ff4400', '#ffaa00', '#ff0044', '#ffffff'];\n      const color = colors[Math.floor(Math.random() * colors.length)];\n      \n      this.particles.push(new Particle(\n        x + (Math.random() - 0.5) * 40,\n        y + (Math.random() - 0.5) * 30,\n        Math.cos(angle) * speed,\n        Math.sin(angle) * speed,\n        color,\n        50\n      ));\n    }\n  }\n\n  public render() {\n    // Skip frame if performance is poor\n    if (GameOptimizer.shouldSkipFrame()) {\n      return;\n    }\n    \n    // Clear canvas\n    this.ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n    // Render star field\n    this.renderStars();\n\n    // Render player\n    this.player.render(this.ctx);\n\n    // Render enemies\n    this.enemies.forEach(enemy => enemy.render(this.ctx));\n    \n    // Render boss\n    if (this.boss) {\n      this.boss.render(this.ctx);\n    }\n\n    // Render bullets\n    this.playerBullets.forEach(bullet => bullet.render(this.ctx));\n    this.enemyBullets.forEach(bullet => bullet.render(this.ctx));\n\n    // Render power-ups\n    this.powerUps.forEach(powerUp => powerUp.render(this.ctx));\n\n    // Render particles with batching for better performance\n    if (GameOptimizer.getQualityLevel() === 'low') {\n      GameOptimizer.batchRenderParticles(this.ctx, this.particles);\n    } else {\n      this.particles.forEach(particle => particle.render(this.ctx));\n    }\n  }\n\n  private generateStarField() {\n    this.starField = [];\n    const starCount = GameOptimizer.getQualityLevel() === 'low' ? 25 : 50;\n    for (let i = 0; i < starCount; i++) {\n      this.starField.push({\n        x: Math.random() * this.width,\n        y: Math.random() * this.height,\n        size: Math.random() * 1.5 + 0.5\n      });\n    }\n  }\n\n  private renderStars() {\n    this.ctx.fillStyle = '#ffffff';\n    const scrollSpeed = this.player.hasPowerUp('slow-motion') ? 0.25 : 1;\n    \n    for (const star of this.starField) {\n      star.y += scrollSpeed;\n      if (star.y > this.height) {\n        star.y = -5;\n        star.x = Math.random() * this.width;\n      }\n      this.ctx.fillRect(star.x, star.y, star.size, star.size);\n    }\n  }\n}\n","size_bytes":23501},"client/src/lib/gameEngine/Particle.ts":{"content":"export class Particle {\n  public x: number;\n  public y: number;\n  public vx: number;\n  public vy: number;\n  public color: string;\n  public life: number;\n  public maxLife: number;\n\n  constructor(x: number, y: number, vx: number, vy: number, color: string, life: number) {\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n    this.color = color;\n    this.life = life;\n    this.maxLife = life;\n  }\n\n  public update() {\n    this.x += this.vx;\n    this.y += this.vy;\n    this.life--;\n    \n    // Apply friction\n    this.vx *= 0.98;\n    this.vy *= 0.98;\n  }\n\n  public isDead(): boolean {\n    return this.life <= 0;\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    const alpha = this.life / this.maxLife;\n    ctx.save();\n    ctx.globalAlpha = alpha;\n    ctx.fillStyle = this.color;\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 3;\n    \n    const size = 2 + (alpha * 3);\n    ctx.fillRect(this.x - size / 2, this.y - size / 2, size, size);\n    \n    ctx.restore();\n  }\n}\n","size_bytes":998},"client/src/lib/gameEngine/Player.ts":{"content":"import { PowerUpEffect, PowerUpType } from './PowerUp';\n\nexport class Player {\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public moveLeft: boolean = false;\n  public moveRight: boolean = false;\n  \n  public targetX: number;\n  private speed: number = 5;\n  private shipImage: HTMLImageElement | null = null;\n  private imageLoaded: boolean = false;\n  \n  // Power-up effects\n  public activePowerUps: Map<PowerUpType, PowerUpEffect> = new Map();\n  public isShielded: boolean = false;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.targetX = x;\n    \n    // Load the spaceship image\n    this.shipImage = new Image();\n    this.shipImage.onload = () => {\n      this.imageLoaded = true;\n      console.log('Spaceship image loaded successfully');\n    };\n    this.shipImage.onerror = () => {\n      console.error('Failed to load spaceship image');\n    };\n    this.shipImage.src = '/spaceship.png';\n  }\n\n  public setTargetPosition(x: number) {\n    this.targetX = x;\n  }\n\n  public update(canvasWidth: number, canvasHeight: number) {\n    // Update power-up effects\n    this.updatePowerUps();\n\n    // Handle keyboard input\n    if (this.moveLeft) {\n      this.x -= this.speed;\n    }\n    if (this.moveRight) {\n      this.x += this.speed;\n    }\n\n    // Handle touch input (smooth movement to target)\n    const diff = this.targetX - this.x;\n    if (Math.abs(diff) > 1) {\n      this.x += diff * 0.3; // Faster interpolation for more responsive movement\n    }\n\n    // Keep player within screen bounds (allow ship to reach actual edges)\n    this.x = Math.max(0, Math.min(canvasWidth, this.x));\n  }\n\n  public applyPowerUp(type: PowerUpType) {\n    const currentTime = Date.now();\n    let duration = 0;\n\n    switch (type) {\n      case 'shield':\n        duration = 8000; // 8 seconds\n        this.isShielded = true;\n        break;\n      case 'slow-motion':\n        duration = 10000; // 10 seconds\n        // This will be handled by GameEngine\n        break;\n      case 'rapid-fire':\n        duration = 12000; // 12 seconds\n        // This will be handled by GameEngine\n        break;\n      case 'multi-shot':\n        duration = 15000; // 15 seconds\n        // This will be handled by GameEngine\n        break;\n      case 'extra-life':\n        // Instant effect - will be handled by GameEngine\n        return;\n    }\n\n    this.activePowerUps.set(type, {\n      type,\n      duration,\n      isActive: true,\n      startTime: currentTime\n    });\n  }\n\n  private updatePowerUps() {\n    const currentTime = Date.now();\n    const expiredPowerUps: PowerUpType[] = [];\n    \n    this.activePowerUps.forEach((effect, type) => {\n      if (currentTime - effect.startTime >= effect.duration) {\n        // Mark for removal\n        expiredPowerUps.push(type);\n        \n        // Remove specific effects\n        if (type === 'shield') {\n          this.isShielded = false;\n        }\n      }\n    });\n    \n    // Remove expired power-ups\n    expiredPowerUps.forEach(type => {\n      this.activePowerUps.delete(type);\n    });\n  }\n\n  public hasPowerUp(type: PowerUpType): boolean {\n    return this.activePowerUps.has(type);\n  }\n\n  public getActivePowerUps(): PowerUpEffect[] {\n    return Array.from(this.activePowerUps.values());\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n\n    // Draw shield effect if active\n    if (this.isShielded) {\n      ctx.strokeStyle = '#00ffff';\n      ctx.lineWidth = 3;\n      ctx.shadowColor = '#00ffff';\n      ctx.shadowBlur = 10;\n      ctx.beginPath();\n      ctx.arc(0, 0, this.width / 2 + 10, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.shadowBlur = 0;\n    }\n\n    if (this.imageLoaded && this.shipImage) {\n      // Draw the spaceship image\n      ctx.drawImage(\n        this.shipImage,\n        -this.width / 2,\n        -this.height / 2,\n        this.width,\n        this.height\n      );\n    } else {\n      // Fallback to simple green rectangle while image loads\n      ctx.fillStyle = '#00ff00';\n      ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n      \n      // Draw spaceship details\n      ctx.fillStyle = '#00aa00';\n      ctx.fillRect(-this.width / 4, -this.height / 2, this.width / 2, 5);\n      \n      // Draw engine glow\n      ctx.fillStyle = '#0088ff';\n      ctx.fillRect(-3, this.height / 2, 6, 8);\n    }\n\n    ctx.restore();\n  }\n}\n","size_bytes":4464},"client/src/lib/gameEngine/PowerUp.ts":{"content":"export type PowerUpType = 'shield' | 'slow-motion' | 'rapid-fire' | 'multi-shot' | 'extra-life';\n\nexport interface PowerUpEffect {\n  type: PowerUpType;\n  duration: number; // in milliseconds\n  isActive: boolean;\n  startTime: number;\n}\n\nexport class PowerUp {\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public type: PowerUpType;\n  public color: string;\n  public speed: number;\n  public pulseTime: number = 0;\n  \n  constructor(x: number, y: number, type: PowerUpType) {\n    this.x = x;\n    this.y = y;\n    this.width = 20;\n    this.height = 20;\n    this.type = type;\n    this.speed = 1;\n    \n    // Set color based on power-up type\n    switch (type) {\n      case 'shield':\n        this.color = '#00ffff'; // Cyan\n        break;\n      case 'slow-motion':\n        this.color = '#ffff00'; // Yellow\n        break;\n      case 'rapid-fire':\n        this.color = '#ff8800'; // Orange\n        break;\n      case 'multi-shot':\n        this.color = '#ff00ff'; // Magenta\n        break;\n      case 'extra-life':\n        this.color = '#00ff00'; // Green\n        break;\n    }\n  }\n  \n  public update() {\n    this.y += this.speed;\n    this.pulseTime += 0.1;\n  }\n  \n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    // Pulsing glow effect\n    const glowIntensity = 0.7 + 0.3 * Math.sin(this.pulseTime * 3);\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 10 * glowIntensity;\n    \n    // Draw power-up icon based on type\n    ctx.fillStyle = this.color;\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    \n    const centerX = this.x;\n    const centerY = this.y;\n    const size = this.width / 2;\n    \n    switch (this.type) {\n      case 'shield':\n        // Draw shield shape\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY - size);\n        ctx.lineTo(centerX + size * 0.7, centerY - size * 0.3);\n        ctx.lineTo(centerX + size * 0.7, centerY + size * 0.3);\n        ctx.lineTo(centerX, centerY + size);\n        ctx.lineTo(centerX - size * 0.7, centerY + size * 0.3);\n        ctx.lineTo(centerX - size * 0.7, centerY - size * 0.3);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n        \n      case 'slow-motion':\n        // Draw clock/time symbol\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.8, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        \n        // Clock hands\n        ctx.strokeStyle = '#000000';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.lineTo(centerX, centerY - size * 0.5);\n        ctx.moveTo(centerX, centerY);\n        ctx.lineTo(centerX + size * 0.3, centerY);\n        ctx.stroke();\n        break;\n        \n      case 'rapid-fire':\n        // Draw multiple arrows/bullets\n        for (let i = 0; i < 3; i++) {\n          const offsetY = (i - 1) * size * 0.4;\n          ctx.beginPath();\n          ctx.moveTo(centerX - size * 0.5, centerY + offsetY);\n          ctx.lineTo(centerX + size * 0.5, centerY + offsetY);\n          ctx.lineTo(centerX + size * 0.3, centerY + offsetY - size * 0.2);\n          ctx.moveTo(centerX + size * 0.5, centerY + offsetY);\n          ctx.lineTo(centerX + size * 0.3, centerY + offsetY + size * 0.2);\n          ctx.stroke();\n        }\n        break;\n        \n      case 'multi-shot':\n        // Draw spreading arrows\n        const angles = [-0.3, 0, 0.3];\n        for (const angle of angles) {\n          ctx.save();\n          ctx.translate(centerX, centerY);\n          ctx.rotate(angle);\n          ctx.beginPath();\n          ctx.moveTo(-size * 0.5, 0);\n          ctx.lineTo(size * 0.5, 0);\n          ctx.lineTo(size * 0.3, -size * 0.2);\n          ctx.moveTo(size * 0.5, 0);\n          ctx.lineTo(size * 0.3, size * 0.2);\n          ctx.stroke();\n          ctx.restore();\n        }\n        break;\n        \n      case 'extra-life':\n        // Draw heart shape\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY + size * 0.3);\n        ctx.bezierCurveTo(\n          centerX - size, centerY - size * 0.3,\n          centerX - size, centerY - size * 0.8,\n          centerX, centerY - size * 0.5\n        );\n        ctx.bezierCurveTo(\n          centerX + size, centerY - size * 0.8,\n          centerX + size, centerY - size * 0.3,\n          centerX, centerY + size * 0.3\n        );\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    \n    ctx.restore();\n  }\n  \n  public static getRandomType(): PowerUpType {\n    const types: PowerUpType[] = ['shield', 'slow-motion', 'rapid-fire', 'multi-shot', 'extra-life'];\n    return types[Math.floor(Math.random() * types.length)];\n  }\n  \n  public static getDescription(type: PowerUpType): string {\n    switch (type) {\n      case 'shield':\n        return 'Temporary invincibility shield';\n      case 'slow-motion':\n        return 'Slows down enemy movement';\n      case 'rapid-fire':\n        return 'Increases firing rate';\n      case 'multi-shot':\n        return 'Fires multiple bullets';\n      case 'extra-life':\n        return 'Gain an extra life';\n    }\n  }\n}","size_bytes":5072},"client/src/lib/gameEngine/WeaponSystems.ts":{"content":"import { Bullet, BulletSize, BulletEffectType } from './Bullet';\nimport { Particle } from './Particle';\n\nexport type WeaponType = 'basic' | 'laser' | 'spread' | 'homing' | 'plasma' | 'explosive' | 'piercing' | 'bouncing' | 'splitting' | 'energy' | 'charged' | 'ultimate';\n\nexport interface WeaponEffect {\n  type: WeaponType;\n  duration: number; // in milliseconds\n  isActive: boolean;\n  startTime: number;\n  ammo?: number; // For limited ammo weapons\n}\n\nexport class WeaponSystem {\n  private currentWeapon: WeaponType = 'basic';\n  private weaponEffects: Map<WeaponType, WeaponEffect> = new Map();\n  private fireTimer: number = 0;\n  private homeTargets: Array<{x: number, y: number}> = [];\n  private fireRate: number = 15; // Default fire rate\n\n  public setWeapon(weapon: WeaponType, duration: number = 10000, ammo?: number) {\n    const currentTime = Date.now();\n    \n    this.weaponEffects.set(weapon, {\n      type: weapon,\n      duration,\n      isActive: true,\n      startTime: currentTime,\n      ammo: ammo\n    });\n    \n    this.currentWeapon = weapon;\n  }\n\n  public getCurrentWeapon(): WeaponType {\n    this.updateWeaponEffects();\n    return this.currentWeapon;\n  }\n\n  public updateWeaponEffects() {\n    const currentTime = Date.now();\n    \n    Array.from(this.weaponEffects.entries()).forEach(([weaponType, effect]) => {\n      if (effect.isActive) {\n        // Check if weapon has expired\n        if (currentTime - effect.startTime > effect.duration) {\n          effect.isActive = false;\n          if (this.currentWeapon === weaponType) {\n            this.currentWeapon = 'basic';\n          }\n        }\n        \n        // Check if ammo depleted\n        if (effect.ammo !== undefined && effect.ammo <= 0) {\n          effect.isActive = false;\n          if (this.currentWeapon === weaponType) {\n            this.currentWeapon = 'basic';\n          }\n        }\n      }\n    });\n  }\n\n  public updateTargets(enemies: Array<{x: number, y: number}>) {\n    this.homeTargets = enemies;\n  }\n\n  public setFireRate(rate: number) {\n    this.fireRate = rate;\n  }\n\n  public clearWeapon(weaponType?: WeaponType) {\n    if (weaponType) {\n      const effect = this.weaponEffects.get(weaponType);\n      if (effect) {\n        effect.isActive = false;\n      }\n      if (this.currentWeapon === weaponType) {\n        this.currentWeapon = 'basic';\n      }\n    } else {\n      // Clear current weapon\n      this.currentWeapon = 'basic';\n    }\n  }\n\n  public updateFireTimer() {\n    this.fireTimer++;\n  }\n\n  public canFire(fireDelay: number): boolean {\n    // Different fire rates for different weapons\n    const weaponFireDelay = this.getWeaponFireDelay(fireDelay);\n    \n    if (this.fireTimer >= weaponFireDelay) {\n      this.fireTimer = 0;\n      return true;\n    }\n    return false;\n  }\n\n  private getWeaponFireDelay(baseDelay: number): number {\n    switch (this.currentWeapon) {\n      case 'laser':\n        return Math.floor(baseDelay * 0.3); // Very fast\n      case 'spread':\n        return Math.floor(baseDelay * 1.5); // Slower\n      case 'homing':\n        return Math.floor(baseDelay * 2); // Much slower\n      case 'plasma':\n        return Math.floor(baseDelay * 0.8); // Slightly faster\n      case 'explosive':\n        return Math.floor(baseDelay * 2.5); // Slow for balance\n      case 'piercing':\n        return Math.floor(baseDelay * 0.7); // Fast\n      case 'bouncing':\n        return Math.floor(baseDelay * 1.2); // Slightly slower\n      case 'splitting':\n        return Math.floor(baseDelay * 1.8); // Slower\n      case 'energy':\n        return Math.floor(baseDelay * 1.0); // Standard\n      case 'charged':\n        return Math.floor(baseDelay * 3); // Very slow, high damage\n      case 'ultimate':\n        return Math.floor(baseDelay * 6); // Extremely slow, devastating\n      case 'basic':\n      default:\n        return baseDelay;\n    }\n  }\n\n  public fire(playerX: number, playerY: number, bulletScale: number = 1.0): Bullet[] {\n    if (!this.canFire(this.fireRate)) return [];\n\n    const bullets: Bullet[] = [];\n    \n    // Consume ammo if applicable\n    const currentEffect = this.weaponEffects.get(this.currentWeapon);\n    if (currentEffect && currentEffect.ammo !== undefined) {\n      currentEffect.ammo--;\n    }\n\n    switch (this.currentWeapon) {\n      case 'basic':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -8,\n          7 * bulletScale,\n          '#00ff00',\n          'player',\n          'medium',\n          'basic'\n        ));\n        break;\n\n      case 'laser':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -12,\n          4 * bulletScale,\n          '#ff00ff',\n          'player',\n          'small',\n          'piercing'\n        ));\n        break;\n\n      case 'spread':\n        const spreadAngles = [-0.6, -0.3, 0, 0.3, 0.6];\n        for (const angle of spreadAngles) {\n          bullets.push(new Bullet(\n            playerX + Math.sin(angle) * 10,\n            playerY - 20,\n            Math.sin(angle) * 4,\n            -8 * Math.cos(angle),\n            6 * bulletScale,\n            '#ffaa00',\n            'player',\n            'small',\n            'basic'\n          ));\n        }\n        break;\n\n      case 'homing':\n        if (this.homeTargets.length > 0) {\n          const target = this.homeTargets[Math.floor(Math.random() * this.homeTargets.length)];\n          const dx = target.x - playerX;\n          const dy = target.y - playerY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance > 0) {\n            bullets.push(new HomingBullet(\n              playerX,\n              playerY - 20,\n              (dx / distance) * 6,\n              (dy / distance) * 6,\n              8 * bulletScale,\n              '#00ffff',\n              'player',\n              target\n            ));\n          }\n        } else {\n          bullets.push(new Bullet(\n            playerX,\n            playerY - 20,\n            0,\n            -6,\n            8 * bulletScale,\n            '#00ffff',\n            'player',\n            'medium',\n            'basic'\n          ));\n        }\n        break;\n\n      case 'plasma':\n        bullets.push(new PlasmaBullet(\n          playerX,\n          playerY - 20,\n          0,\n          -5,\n          14 * bulletScale,\n          '#00ff88',\n          'player'\n        ));\n        break;\n\n      case 'explosive':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -7,\n          10 * bulletScale,\n          '#ff4400',\n          'player',\n          'large',\n          'explosive'\n        ));\n        break;\n\n      case 'piercing':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -10,\n          6 * bulletScale,\n          '#ffffff',\n          'player',\n          'small',\n          'piercing'\n        ));\n        break;\n\n      case 'bouncing':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          Math.random() * 4 - 2,\n          -6,\n          8 * bulletScale,\n          '#00aaff',\n          'player',\n          'medium',\n          'bouncing'\n        ));\n        break;\n\n      case 'splitting':\n        bullets.push(new SplittingBullet(\n          playerX,\n          playerY - 20,\n          0,\n          -8,\n          9 * bulletScale,\n          '#aa00ff',\n          'player'\n        ));\n        break;\n\n      case 'energy':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -9,\n          8 * bulletScale,\n          '#00ffaa',\n          'player',\n          'medium',\n          'energy'\n        ));\n        break;\n\n      case 'charged':\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -6,\n          12 * bulletScale,\n          '#ffff00',\n          'player',\n          'large',\n          'charged'\n        ));\n        break;\n\n      case 'ultimate':\n        // Screen-clearing ultimate weapon\n        bullets.push(new Bullet(\n          playerX,\n          playerY - 20,\n          0,\n          -4,\n          20 * bulletScale,\n          '#ff00ff',\n          'player',\n          'massive',\n          'ultimate'\n        ));\n        // Add side projectiles\n        for (let i = -2; i <= 2; i++) {\n          if (i !== 0) {\n            bullets.push(new Bullet(\n              playerX + i * 30,\n              playerY - 10,\n              i * 2,\n              -6,\n              8 * bulletScale,\n              '#ff00ff',\n              'player',\n              'medium',\n              'energy'\n            ));\n          }\n        }\n        break;\n    }\n\n    return bullets;\n  }\n\n  public getWeaponDescription(weapon: WeaponType): string {\n    switch (weapon) {\n      case 'laser':\n        return 'High-speed piercing laser beam';\n      case 'spread':\n        return 'Five-way spread shot';\n      case 'homing':\n        return 'Auto-targeting missiles';\n      case 'plasma':\n        return 'Devastating plasma cannon';\n      case 'explosive':\n        return 'Area-damage explosive rounds';\n      case 'piercing':\n        return 'Armor-penetrating bullets';\n      case 'bouncing':\n        return 'Ricocheting projectiles';\n      case 'splitting':\n        return 'Bullets that split mid-flight';\n      case 'energy':\n        return 'Pulsing energy projectiles';\n      case 'charged':\n        return 'High-damage charged shots';\n      case 'ultimate':\n        return 'Screen-clearing mega weapon';\n      case 'basic':\n      default:\n        return 'Standard blaster';\n    }\n  }\n\n  public getRemainingAmmo(weapon: WeaponType): number | undefined {\n    const effect = this.weaponEffects.get(weapon);\n    return effect?.ammo;\n  }\n\n  public getRemainingTime(weapon: WeaponType): number {\n    const effect = this.weaponEffects.get(weapon);\n    if (!effect || !effect.isActive) return 0;\n    \n    const elapsed = Date.now() - effect.startTime;\n    return Math.max(0, effect.duration - elapsed);\n  }\n}\n\n// Specialized bullet types\nexport class HomingBullet extends Bullet {\n  private target: {x: number, y: number};\n  private turnSpeed: number = 0.1;\n  \n  constructor(x: number, y: number, vx: number, vy: number, radius: number, color: string, type: 'player' | 'enemy', target: {x: number, y: number}) {\n    super(x, y, vx, vy, radius, color, type);\n    this.target = target;\n  }\n\n  public update() {\n    // Homing behavior\n    const dx = this.target.x - this.x;\n    const dy = this.target.y - this.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n      const targetVx = (dx / distance) * 6;\n      const targetVy = (dy / distance) * 6;\n      \n      // Gradually turn towards target\n      this.vx += (targetVx - this.vx) * this.turnSpeed;\n      this.vy += (targetVy - this.vy) * this.turnSpeed;\n    }\n    \n    super.update();\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    // Trail effect\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 8;\n    \n    // Missile body\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x - this.width/2, this.y - this.height/2, this.width, this.height);\n    \n    // Thruster flame\n    ctx.fillStyle = '#ffaa00';\n    ctx.fillRect(this.x - 2, this.y + this.height/2, 4, 6);\n    \n    ctx.restore();\n  }\n}\n\nexport class PlasmaBullet extends Bullet {\n  constructor(x: number, y: number, vx: number, vy: number, radius: number, color: string, type: 'player' | 'enemy') {\n    super(x, y, vx, vy, radius, color, type, 'large', 'energy');\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    // Pulsing glow effect using base class pulseTime\n    const glowIntensity = 0.8 + 0.4 * Math.sin(this.pulseTime * 3);\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 15 * glowIntensity;\n    \n    // Core\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.width/2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Inner glow\n    ctx.fillStyle = '#ffffff';\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.width/4, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.restore();\n  }\n}\n\nexport class SplittingBullet extends Bullet {\n  private hasSplit: boolean = false;\n  private spawnY: number;\n  private splitDistance: number = 100;\n\n  constructor(x: number, y: number, vx: number, vy: number, radius: number, color: string, type: 'player' | 'enemy') {\n    super(x, y, vx, vy, radius, color, type, 'medium', 'splitting');\n    this.spawnY = y;\n  }\n\n  public update() {\n    super.update();\n    \n    // Check if should split based on distance traveled from spawn point\n    const distanceTraveled = Math.abs(this.y - this.spawnY);\n    if (!this.hasSplit && distanceTraveled >= this.splitDistance) {\n      this.hasSplit = true;\n    }\n  }\n\n  public shouldSplit(): boolean {\n    return this.hasSplit;\n  }\n\n  public createSplitBullets(): Bullet[] {\n    const splitBullets: Bullet[] = [];\n    \n    // Create 3 smaller bullets with proper radius values\n    const angles = [-0.4, 0, 0.4];\n    const splitRadius = this.width * 0.3; // Use proper radius, not width\n    \n    for (const angle of angles) {\n      splitBullets.push(new Bullet(\n        this.x,\n        this.y,\n        Math.sin(angle) * 6,\n        this.vy * 1.2,\n        splitRadius,\n        this.color,\n        this.type,\n        'small',\n        'basic'\n      ));\n    }\n    \n    return splitBullets;\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    // Unstable energy effect\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 8 + Math.random() * 4;\n    \n    // Main bullet with crackling effect\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.width/2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Crackling energy lines\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.7;\n    \n    for (let i = 0; i < 4; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const length = this.width * (0.3 + Math.random() * 0.4);\n      \n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(\n        this.x + Math.cos(angle) * length,\n        this.y + Math.sin(angle) * length\n      );\n      ctx.stroke();\n    }\n    \n    ctx.restore();\n  }\n}\n\n// Weapon pickup\nexport class WeaponPickup {\n  public x: number;\n  public y: number;\n  public width: number = 25;\n  public height: number = 25;\n  public weaponType: WeaponType;\n  public color: string;\n  public speed: number = 1;\n  public pulseTime: number = 0;\n  public duration?: number;\n  public ammo?: number;\n\n  constructor(x: number, y: number, weaponType: WeaponType) {\n    this.x = x;\n    this.y = y;\n    this.weaponType = weaponType;\n    \n    // Set properties based on weapon type\n    switch (weaponType) {\n      case 'laser':\n        this.color = '#ff00ff';\n        this.duration = 8000;\n        break;\n      case 'spread':\n        this.color = '#ffaa00';\n        this.duration = 12000;\n        break;\n      case 'homing':\n        this.color = '#00ffff';\n        this.ammo = 20;\n        break;\n      case 'plasma':\n        this.color = '#00ff88';\n        this.ammo = 15;\n        break;\n      default:\n        this.color = '#ffffff';\n    }\n  }\n\n  public update() {\n    this.y += this.speed;\n    this.pulseTime += 0.15;\n  }\n\n  public render(ctx: CanvasRenderingContext2D) {\n    ctx.save();\n    \n    // Pulsing glow effect\n    const glowIntensity = 0.7 + 0.3 * Math.sin(this.pulseTime * 4);\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 12 * glowIntensity;\n    \n    // Weapon icon based on type\n    ctx.fillStyle = this.color;\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    \n    const centerX = this.x;\n    const centerY = this.y;\n    const size = this.width / 2;\n    \n    switch (this.weaponType) {\n      case 'laser':\n        // Lightning bolt\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY - size);\n        ctx.lineTo(centerX + size/2, centerY - size/3);\n        ctx.lineTo(centerX - size/3, centerY - size/3);\n        ctx.lineTo(centerX + size/3, centerY + size/3);\n        ctx.lineTo(centerX - size/2, centerY + size/3);\n        ctx.lineTo(centerX, centerY + size);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n        \n      case 'spread':\n        // Fan pattern\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.8, -Math.PI * 0.75, -Math.PI * 0.25);\n        ctx.stroke();\n        for (let i = 0; i < 5; i++) {\n          const angle = -Math.PI * 0.75 + (i * Math.PI * 0.5 / 4);\n          ctx.beginPath();\n          ctx.moveTo(centerX, centerY);\n          ctx.lineTo(centerX + Math.cos(angle) * size, centerY + Math.sin(angle) * size);\n          ctx.stroke();\n        }\n        break;\n        \n      case 'homing':\n        // Target/crosshair\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.6, 0, Math.PI * 2);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.3, 0, Math.PI * 2);\n        ctx.stroke();\n        // Crosshairs\n        ctx.beginPath();\n        ctx.moveTo(centerX - size, centerY);\n        ctx.lineTo(centerX + size, centerY);\n        ctx.moveTo(centerX, centerY - size);\n        ctx.lineTo(centerX, centerY + size);\n        ctx.stroke();\n        break;\n        \n      case 'plasma':\n        // Energy ball\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.8, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        // Inner energy\n        ctx.fillStyle = '#ffffff';\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size * 0.4, 0, Math.PI * 2);\n        ctx.fill();\n        break;\n    }\n    \n    // Ammo indicator\n    if (this.ammo) {\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '8px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(this.ammo.toString(), centerX, centerY + size + 12);\n    }\n    \n    ctx.restore();\n  }\n\n  public static getRandomWeapon(): WeaponType {\n    const weapons: WeaponType[] = ['laser', 'spread', 'homing', 'plasma'];\n    return weapons[Math.floor(Math.random() * weapons.length)];\n  }\n}","size_bytes":18062},"client/src/lib/miniapp/minikit.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { sdk } from '@farcaster/miniapp-sdk';\n\ninterface UserProfile {\n  fid: number;\n  username?: string;\n  displayName?: string;\n  pfpUrl?: string;\n}\n\ninterface MiniKitContextType {\n  isReady: boolean;\n  user: UserProfile | null;\n  context: any;\n  isConnected: boolean;\n  signIn: () => Promise<void>;\n  shareScore: (score: number) => Promise<void>;\n  addToApp: () => Promise<void>;\n  notifyReady: () => void;\n}\n\nconst MiniKitContext = createContext<MiniKitContextType | undefined>(undefined);\n\ninterface MiniKitProviderProps {\n  children: ReactNode;\n}\n\nexport function MiniKitProvider({ children }: MiniKitProviderProps) {\n  const [isReady, setIsReady] = useState(false);\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [context, setContext] = useState<any>(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Helper function to authenticate user with server and store token\n  const authenticateUserWithServer = async (userData: UserProfile) => {\n    try {\n      console.log('🔐 Authenticating user with server:', userData.fid);\n      const authResponse = await fetch('/api/farcaster/auth', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fid: userData.fid,\n          username: userData.username,\n          displayName: userData.displayName,\n          pfpUrl: userData.pfpUrl\n        }),\n      });\n      \n      if (authResponse.ok) {\n        const authData = await authResponse.json();\n        if (authData.token) {\n          localStorage.setItem('authToken', authData.token);\n          console.log('✅ User authenticated with server successfully');\n          return authData.token;\n        }\n      } else {\n        console.error('❌ Server authentication failed:', await authResponse.text());\n      }\n    } catch (authError) {\n      console.error('❌ Error during server authentication:', authError);\n    }\n    return null;\n  };\n\n  // useEffect(() => {\n  //   const initMiniKit = () => {\n  //     console.log('🚀 Starting MiniKit initialization...');\n\n  //     // Get context in background\n  //     const getContextAsync = async () => {\n  //       try {\n  //         console.log('🔗 Getting context information...');\n  //         const contextData = await sdk.context;\n  //         console.log('📊 Context data received:', contextData);\n  //         setContext(contextData);\n\n  //         // Check if user is already signed in\n  //         if (contextData?.user) {\n  //           console.log('👤 User found in context:', contextData.user);\n  //           setUser({\n  //             fid: contextData.user.fid,\n  //             username: contextData.user.username,\n  //             displayName: contextData.user.displayName,\n  //             pfpUrl: contextData.user.pfpUrl\n  //           });\n  //           setIsConnected(true);\n  //         }\n  //       } catch (contextError) {\n  //         console.log('📱 No Farcaster context (running standalone)');\n  //       }\n  //     };\n\n  //     // Start context retrieval in background\n  //     getContextAsync();\n\n  //     // Mark as ready immediately (don't call sdk.actions.ready() here yet)\n  //     setIsReady(true);\n  //     console.log('🎉 MiniKit initialization completed');\n  //   };\n\n  //   // Initialize immediately\n  //   initMiniKit();\n  // }, []);\n\n  useEffect(() => {\n    const initMiniKit = () => {\n      console.log(\"🚀 Starting MiniKit initialization...\");\n\n      // Get context in background (don't block on this)\n      const getContextAsync = async () => {\n        try {\n          console.log(\"🔗 Getting context information...\");\n          const contextData = await sdk.context;\n          console.log(\"📊 Context data received:\", contextData);\n          setContext(contextData);\n\n          // Check if user is already signed in\n          if (contextData?.user) {\n            console.log(\"👤 User found in context:\", {\n              fid: contextData.user.fid,\n              username: contextData.user.username, \n              displayName: contextData.user.displayName,\n              pfpUrl: contextData.user.pfpUrl\n            });\n            \n            const userData = {\n              fid: contextData.user.fid,\n              username: contextData.user.username,\n              displayName: contextData.user.displayName,\n              pfpUrl: contextData.user.pfpUrl\n            };\n            \n            console.log(\"🖼️ Profile picture URL:\", userData.pfpUrl);\n            setUser(userData);\n            setIsConnected(true);\n            \n            // Update global context for game authentication\n            (window as any).__miniKitContext__ = { user: userData, context: contextData };\n            console.log(\"🌐 Global MiniKit context set on window:\", (window as any).__miniKitContext__);\n            \n            // Authenticate with server immediately\n            console.log(\"🔄 Starting server authentication for Farcaster user...\");\n            const authToken = await authenticateUserWithServer(userData);\n            if (authToken) {\n              console.log(\"✅ MiniKit initialization: Server authentication completed successfully\");\n              \n              // Immediately populate playerStats store to ensure game saves work\n              const { usePlayerStats } = await import('../stores/usePlayerStats');\n              const playerStatsState = usePlayerStats.getState();\n              console.log('📊 Populating playerStats store with Farcaster user data...');\n              playerStatsState.setUserData(userData.fid, userData.displayName, userData.pfpUrl);\n              playerStatsState.loadPlayerStats(userData.fid);\n              console.log('✅ PlayerStats store populated for game persistence');\n            } else {\n              console.error(\"❌ MiniKit initialization: Server authentication failed\");\n            }\n          } else {\n            console.log(\"👤 No user found in Farcaster context - setting up test user\");\n            // Set test user when no Farcaster user is available (standalone mode)\n            const testUser = {\n              fid: 12345,\n              username: \"testgamer\", \n              displayName: \"Test Gamer\",\n              pfpUrl: \"https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=100&h=100&fit=crop&crop=face&facepad=2&fm=jpg&q=80\"\n            };\n            \n            console.log(\"🧪 Setting up test user for demo:\", testUser);\n            console.log(\"🖼️ Test profile picture URL:\", testUser.pfpUrl);\n            setUser(testUser);\n            setIsConnected(true);\n            \n            // Update global context for game authentication\n            (window as any).__miniKitContext__ = { user: testUser, context: null };\n            console.log(\"🌐 Global MiniKit context set for test user:\", (window as any).__miniKitContext__);\n            \n            // Authenticate test user with server immediately\n            console.log(\"🔄 Starting server authentication for test user...\");\n            const authToken = await authenticateUserWithServer(testUser);\n            if (authToken) {\n              console.log(\"✅ Test user authentication completed successfully\");\n              \n              // Immediately populate playerStats store to ensure game saves work\n              const { usePlayerStats } = await import('../stores/usePlayerStats');\n              const playerStatsState = usePlayerStats.getState();\n              console.log('📊 Populating playerStats store with test user data...');\n              playerStatsState.setUserData(testUser.fid, testUser.displayName, testUser.pfpUrl);\n              playerStatsState.loadPlayerStats(testUser.fid);\n              console.log('✅ PlayerStats store populated for game persistence');\n            } else {\n              console.error(\"❌ Test user authentication failed\");\n            }\n          }\n        } catch (contextError) {\n          console.log(\"📱 SDK context failed (running in standalone):\", contextError);\n          console.log(\"🧪 Setting up fallback test user for demo purposes\");\n          \n          const fallbackTestUser = {\n            fid: 54321,\n            username: \"standalonegamer\",\n            displayName: \"Standalone Gamer\", \n            pfpUrl: \"https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=100&h=100&fit=crop&crop=face&facepad=2&fm=jpg&q=80\"\n          };\n          \n          console.log(\"👤 Fallback test user created:\", fallbackTestUser);\n          setUser(fallbackTestUser);\n          setIsConnected(true);\n          \n          // Update global context for game authentication\n          (window as any).__miniKitContext__ = { user: fallbackTestUser, context: null };\n          console.log(\"🌐 Global MiniKit context set for fallback user:\", (window as any).__miniKitContext__);\n          \n          // Authenticate fallback test user with server immediately\n          console.log(\"🔄 Starting server authentication for fallback user...\");\n          const authToken = await authenticateUserWithServer(fallbackTestUser);\n          if (authToken) {\n            console.log(\"✅ Fallback user authentication completed successfully\");\n            \n            // Immediately populate playerStats store to ensure game saves work\n            const { usePlayerStats } = await import('../stores/usePlayerStats');\n            const playerStatsState = usePlayerStats.getState();\n            console.log('📊 Populating playerStats store with fallback user data...');\n            playerStatsState.setUserData(fallbackTestUser.fid, fallbackTestUser.displayName, fallbackTestUser.pfpUrl);\n            playerStatsState.loadPlayerStats(fallbackTestUser.fid);\n            console.log('✅ PlayerStats store populated for game persistence');\n          } else {\n            console.error(\"❌ Fallback user authentication failed\");\n          }\n        }\n      };\n\n      // Start context retrieval in background\n      getContextAsync();\n\n      // Mark as ready immediately (don't wait for context)\n      setIsReady(true);\n      console.log(\"🎉 MiniKit initialization completed\");\n      \n      // Global context will be set by the async function above\n    };\n\n    // Initialize immediately\n    initMiniKit();\n  }, []);\n\n  const signIn = async () => {\n    try {\n      // Generate a simple nonce for sign in\n      const nonce = Math.random().toString(36).substring(7);\n      const result = await sdk.actions.signIn({ nonce });\n      if (result && typeof result === 'object' && 'user' in result) {\n        const user = result.user as any;\n        setUser({\n          fid: user.fid,\n          username: user.username,\n          displayName: user.displayName,\n          pfpUrl: user.pfpUrl\n        });\n        setIsConnected(true);\n      }\n    } catch (error) {\n      console.error('Sign in failed:', error);\n    }\n  };\n\n  const shareScore = async (score: number) => {\n    try {\n      await sdk.actions.composeCast({\n        text: `🚀 Just scored ${score.toLocaleString()} points in Galaxiga Classic Space Shooter! Think you can beat my high score? 👾`,\n        embeds: [window.location.origin]\n      });\n    } catch (error) {\n      console.error('Failed to share score:', error);\n    }\n  };\n\n  const addToApp = async () => {\n    try {\n      await sdk.actions.addMiniApp();\n    } catch (error) {\n      console.error('Failed to add to app:', error);\n    }\n  };\n\n  const notifyReady = async () => {\n    try {\n      console.log(\"✅ Calling sdk.actions.ready() after app content is loaded...\");\n      if (sdk?.actions?.ready) {\n        await sdk.actions.ready();\n        console.log(\"🎯 sdk.actions.ready() resolved successfully\");\n      } else {\n        console.warn(\"⚠️ sdk.actions.ready is not available\");\n      }\n    } catch (readyError) {\n      console.error(\"⚠️ sdk.actions.ready() failed:\", readyError);\n    }\n  };\n\n  const value: MiniKitContextType = {\n    isReady,\n    user,\n    context,\n    isConnected,\n    signIn,\n    shareScore,\n    addToApp,\n    notifyReady\n  };\n\n  return (\n    <MiniKitContext.Provider value={value}>\n      {children}\n    </MiniKitContext.Provider>\n  );\n}\n\nexport function useMiniKit() {\n  const context = useContext(MiniKitContext);\n  if (context === undefined) {\n    throw new Error('useMiniKit must be used within a MiniKitProvider');\n  }\n  return context;\n}","size_bytes":12437},"client/src/lib/notifications/pushSystem.ts":{"content":"export interface NotificationData {\n  title: string;\n  body: string;\n  icon?: string;\n  badge?: string;\n  data?: Record<string, any>;\n  tag?: string;\n}\n\nexport interface SocialTrigger {\n  type: 'friend_beat_score' | 'friend_joined' | 'achievement_unlocked' | 'leaderboard_position' | 'daily_challenge';\n  friendFid?: number;\n  friendUsername?: string;\n  score?: number;\n  achievement?: string;\n  position?: number;\n}\n\nexport class PushNotificationSystem {\n  private static instance: PushNotificationSystem;\n  private notificationToken: string | null = null;\n\n  static getInstance(): PushNotificationSystem {\n    if (!PushNotificationSystem.instance) {\n      PushNotificationSystem.instance = new PushNotificationSystem();\n    }\n    return PushNotificationSystem.instance;\n  }\n\n  async initialize(): Promise<boolean> {\n    try {\n      // Check if running in Mini App context\n      if (typeof window !== 'undefined' && 'Notification' in window) {\n        const permission = await Notification.requestPermission();\n        return permission === 'granted';\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to initialize notifications:', error);\n      return false;\n    }\n  }\n\n  async generateNotificationToken(userFid: number): Promise<string | null> {\n    try {\n      // In a real implementation, this would generate a unique token\n      // and register it with Neynar's notification system\n      const token = `galaxiga_${userFid}_${Date.now()}`;\n      this.notificationToken = token;\n      \n      // Register with backend webhook system\n      await this.registerWebhook(userFid, token);\n      \n      return token;\n    } catch (error) {\n      console.error('Failed to generate notification token:', error);\n      return null;\n    }\n  }\n\n  private async registerWebhook(userFid: number, token: string): Promise<void> {\n    try {\n      // This would register the webhook with your backend\n      const response = await fetch('/api/notifications/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userFid, token }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to register webhook');\n      }\n      \n      console.log('Notification webhook registered successfully');\n    } catch (error) {\n      console.error('Webhook registration failed:', error);\n    }\n  }\n\n  async sendSocialTriggerNotification(userFid: number, trigger: SocialTrigger): Promise<boolean> {\n    try {\n      const notification = this.createNotificationFromTrigger(trigger);\n      \n      // Send to Neynar notification system\n      const response = await fetch('/api/notifications/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userFid,\n          notification,\n          trigger,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Failed to send social trigger notification:', error);\n      return false;\n    }\n  }\n\n  private createNotificationFromTrigger(trigger: SocialTrigger): NotificationData {\n    switch (trigger.type) {\n      case 'friend_beat_score':\n        return {\n          title: '🏆 You\\'ve been overtaken!',\n          body: `@${trigger.friendUsername} just beat your high score with ${trigger.score?.toLocaleString()} points!`,\n          icon: '/rocket.png',\n          tag: 'friend-beat-score',\n          data: { type: trigger.type, friendFid: trigger.friendFid }\n        };\n\n      case 'friend_joined':\n        return {\n          title: '🚀 Friend joined the battle!',\n          body: `@${trigger.friendUsername} just started playing Galaxiga. Challenge them to beat your score!`,\n          icon: '/spaceship.png',\n          tag: 'friend-joined',\n          data: { type: trigger.type, friendFid: trigger.friendFid }\n        };\n\n      case 'achievement_unlocked':\n        return {\n          title: '🏆 Achievement Unlocked!',\n          body: `You've earned the \"${trigger.achievement}\" achievement! Claim your rewards now.`,\n          icon: '/spaceship.png',\n          tag: 'achievement',\n          data: { type: trigger.type, achievement: trigger.achievement }\n        };\n\n      case 'leaderboard_position':\n        return {\n          title: '📊 Leaderboard Update',\n          body: `You're now ranked #${trigger.position} among your friends! Keep climbing!`,\n          icon: '/rocket.png',\n          tag: 'leaderboard',\n          data: { type: trigger.type, position: trigger.position }\n        };\n\n      case 'daily_challenge':\n        return {\n          title: '⭐ Daily Challenge Available',\n          body: 'New daily challenge is live! Complete it for exclusive rewards.',\n          icon: '/spaceship.png',\n          tag: 'daily-challenge',\n          data: { type: trigger.type }\n        };\n\n      default:\n        return {\n          title: '🎮 Galaxiga',\n          body: 'Something exciting happened in your space adventure!',\n          icon: '/rocket.png',\n          tag: 'generic'\n        };\n    }\n  }\n\n  async sendLocalNotification(notification: NotificationData): Promise<boolean> {\n    try {\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification(notification.title, {\n          body: notification.body,\n          icon: notification.icon || '/rocket.png',\n          badge: notification.badge || '/rocket.png',\n          tag: notification.tag,\n          data: notification.data,\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to send local notification:', error);\n      return false;\n    }\n  }\n\n  // Analytics for notification engagement\n  async trackNotificationOpen(notificationId: string, userFid: number): Promise<void> {\n    try {\n      await fetch('/api/notifications/analytics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          event: 'notification_opened',\n          notificationId,\n          userFid,\n          timestamp: new Date().toISOString(),\n        }),\n      });\n    } catch (error) {\n      console.error('Failed to track notification open:', error);\n    }\n  }\n\n  // Smart notification timing to avoid spam\n  private lastNotificationTime = new Map<string, number>();\n  \n  shouldSendNotification(type: string, userFid: number, cooldownMinutes = 15): boolean {\n    const key = `${userFid}_${type}`;\n    const lastTime = this.lastNotificationTime.get(key) || 0;\n    const cooldownMs = cooldownMinutes * 60 * 1000;\n    \n    if (Date.now() - lastTime > cooldownMs) {\n      this.lastNotificationTime.set(key, Date.now());\n      return true;\n    }\n    \n    return false;\n  }\n}","size_bytes":6729},"client/src/lib/performance/GameOptimizer.ts":{"content":"export class GameOptimizer {\n    private static frameTimeHistory: number[] = [];\n    private static lastFrameTime: number = 0;\n    private static adaptiveQuality: 'low' | 'medium' | 'high' = 'high';\n    private static particleLimit: number = 100;\n    private static renderSkipCounter: number = 0;\n  \n    // Object pooling for bullets and particles\n    private static bulletPool: Array<any> = [];\n    private static particlePool: Array<any> = [];\n    private static enemyPool: Array<any> = [];\n  \n    // Performance monitoring\n    private static performanceMetrics = {\n      averageFps: 60,\n      frameDrops: 0,\n      memoryUsage: 0,\n      renderTime: 0\n    };\n  \n    public static initialize(): void {\n      this.detectDeviceCapabilities();\n      this.setupPerformanceMonitoring();\n    }\n  \n    private static detectDeviceCapabilities(): void {\n      // Detect device performance tier\n      const canvas = document.createElement('canvas');\n      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n      \n      let tier = 'high';\n      \n      // Check for mobile device\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        tier = 'medium';\n        \n        // Further reduce quality for older mobile devices\n        if (navigator.hardwareConcurrency <= 2) {\n          tier = 'low';\n        }\n      }\n      \n      // Check WebGL capabilities\n      if (gl && 'getParameter' in gl) {\n        try {\n          const webgl = gl as WebGLRenderingContext;\n          const renderer = webgl.getParameter(webgl.RENDERER);\n          if (renderer && typeof renderer === 'string' && (renderer.includes('Mali') || renderer.includes('Adreno 3'))) {\n            tier = 'low';\n          }\n        } catch (error) {\n          console.warn('Could not detect WebGL renderer:', error);\n        }\n      } else {\n        tier = 'low';\n      }\n      \n      this.adaptiveQuality = tier as 'low' | 'medium' | 'high';\n      this.adjustQualitySettings();\n      \n      console.log(`Device performance tier: ${tier}`);\n    }\n  \n    private static adjustQualitySettings(): void {\n      switch (this.adaptiveQuality) {\n        case 'low':\n          this.particleLimit = 30;\n          break;\n        case 'medium':\n          this.particleLimit = 60;\n          break;\n        case 'high':\n          this.particleLimit = 100;\n          break;\n      }\n    }\n  \n    private static setupPerformanceMonitoring(): void {\n      // Monitor memory usage\n      if ('memory' in performance) {\n        setInterval(() => {\n          const memory = (performance as any).memory;\n          this.performanceMetrics.memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n          \n          // Trigger GC hint if memory usage is high\n          if (this.performanceMetrics.memoryUsage > 0.8) {\n            this.triggerGarbageCollection();\n          }\n        }, 5000);\n      }\n    }\n  \n    public static trackFrameTime(deltaTime: number): void {\n      this.frameTimeHistory.push(deltaTime);\n      \n      // Keep only last 60 frames\n      if (this.frameTimeHistory.length > 60) {\n        this.frameTimeHistory.shift();\n      }\n      \n      // Calculate average FPS\n      const avgFrameTime = this.frameTimeHistory.reduce((a, b) => a + b) / this.frameTimeHistory.length;\n      this.performanceMetrics.averageFps = 1000 / avgFrameTime;\n      \n      // Detect frame drops\n      if (deltaTime > 33) { // Below 30 FPS\n        this.performanceMetrics.frameDrops++;\n        this.handlePerformanceDrop();\n      }\n    }\n  \n    private static handlePerformanceDrop(): void {\n      if (this.performanceMetrics.averageFps < 30) {\n        // Reduce quality dynamically\n        if (this.adaptiveQuality === 'high') {\n          this.adaptiveQuality = 'medium';\n          this.adjustQualitySettings();\n          console.log('Reduced quality to medium due to performance issues');\n        } else if (this.adaptiveQuality === 'medium') {\n          this.adaptiveQuality = 'low';\n          this.adjustQualitySettings();\n          console.log('Reduced quality to low due to performance issues');\n        }\n      }\n    }\n  \n    // Object pooling methods\n    public static getBullet(): any {\n      return this.bulletPool.pop() || { x: 0, y: 0, dx: 0, dy: 0, active: false, type: 'player' };\n    }\n  \n    public static returnBullet(bullet: any): void {\n      bullet.active = false;\n      this.bulletPool.push(bullet);\n    }\n  \n    public static getParticle(): any {\n      return this.particlePool.pop() || { \n        x: 0, y: 0, dx: 0, dy: 0, life: 0, maxLife: 0, color: '#ffffff', active: false \n      };\n    }\n  \n    public static returnParticle(particle: any): void {\n      particle.active = false;\n      this.particlePool.push(particle);\n    }\n  \n    public static getEnemy(): any {\n      return this.enemyPool.pop() || { \n        x: 0, y: 0, dx: 0, dy: 0, health: 1, maxHealth: 1, type: 'basic', active: false \n      };\n    }\n  \n    public static returnEnemy(enemy: any): void {\n      enemy.active = false;\n      this.enemyPool.push(enemy);\n    }\n  \n    // Rendering optimizations\n    public static shouldSkipFrame(): boolean {\n      if (this.performanceMetrics.averageFps < 20) {\n        this.renderSkipCounter++;\n        if (this.renderSkipCounter % 2 === 0) {\n          return true; // Skip every other frame\n        }\n      }\n      return false;\n    }\n  \n    public static shouldLimitParticles(currentCount: number): boolean {\n      return currentCount >= this.particleLimit;\n    }\n  \n    public static getOptimalParticleCount(): number {\n      return Math.max(10, Math.floor(this.particleLimit * (this.performanceMetrics.averageFps / 60)));\n    }\n  \n    // Memory management\n    private static triggerGarbageCollection(): void {\n      // Clean up object pools if they're getting too large\n      if (this.bulletPool.length > 50) {\n        this.bulletPool = this.bulletPool.slice(0, 25);\n      }\n      if (this.particlePool.length > 100) {\n        this.particlePool = this.particlePool.slice(0, 50);\n      }\n      if (this.enemyPool.length > 30) {\n        this.enemyPool = this.enemyPool.slice(0, 15);\n      }\n      \n      console.log('Performed memory cleanup');\n    }\n  \n    // Batch rendering utilities\n    public static batchRenderParticles(ctx: CanvasRenderingContext2D, particles: any[]): void {\n      const particlesByColor: { [color: string]: any[] } = {};\n      \n      // Group particles by color for batch rendering\n      particles.forEach(particle => {\n        if (!particlesByColor[particle.color]) {\n          particlesByColor[particle.color] = [];\n        }\n        particlesByColor[particle.color].push(particle);\n      });\n      \n      // Render each color group in one draw call\n      Object.entries(particlesByColor).forEach(([color, colorParticles]) => {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        \n        colorParticles.forEach(particle => {\n          ctx.rect(particle.x - 1, particle.y - 1, 2, 2);\n        });\n        \n        ctx.fill();\n      });\n    }\n  \n    public static getPerformanceMetrics() {\n      return { ...this.performanceMetrics };\n    }\n  \n    public static getQualityLevel(): 'low' | 'medium' | 'high' {\n      return this.adaptiveQuality;\n    }\n  \n    // Adaptive LOD (Level of Detail)\n    public static shouldUseSimpleRendering(distance: number): boolean {\n      if (this.adaptiveQuality === 'low') return distance > 100;\n      if (this.adaptiveQuality === 'medium') return distance > 200;\n      return distance > 300;\n    }\n  }","size_bytes":7516},"client/src/lib/rewards/nftMinting.ts":{"content":"import { WalletManager } from '../web3/wallet';\nimport type { Address } from 'viem';\n\nexport interface NFTReward {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  attributes: Record<string, string | number>;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  tokenReward: number;\n}\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  requirement: {\n    type: 'score' | 'streak' | 'social' | 'time';\n    value: number;\n  };\n  reward: NFTReward;\n  unlocked: boolean;\n}\n\nexport class NFTMintingSystem {\n  private static instance: NFTMintingSystem;\n  private walletManager: WalletManager;\n  \n  // Demo NFT contract address on Base (would be real contract in production)\n  private NFT_CONTRACT_ADDRESS: Address = '0x1234567890123456789012345678901234567890';\n\n  static getInstance(): NFTMintingSystem {\n    if (!NFTMintingSystem.instance) {\n      NFTMintingSystem.instance = new NFTMintingSystem();\n    }\n    return NFTMintingSystem.instance;\n  }\n\n  constructor() {\n    this.walletManager = WalletManager.getInstance();\n  }\n\n  // Predefined achievement NFTs\n  getAvailableAchievements(): Achievement[] {\n    return [\n      {\n        id: 'first-flight',\n        name: 'First Flight',\n        description: 'Complete your first mission',\n        icon: '🚀',\n        requirement: { type: 'score', value: 1000 },\n        reward: {\n          id: 'first-flight-nft',\n          name: 'Rookie Pilot Badge',\n          description: 'Your first steps into the cosmos',\n          imageUrl: '/nft/rookie-pilot.png',\n          attributes: { rarity: 'common', type: 'achievement', mission: 'first' },\n          rarity: 'common',\n          tokenReward: 100\n        },\n        unlocked: false\n      },\n      {\n        id: 'ace-pilot',\n        name: 'Ace Pilot',\n        description: 'Score over 50,000 points in a single game',\n        icon: '✈️',\n        requirement: { type: 'score', value: 50000 },\n        reward: {\n          id: 'ace-pilot-nft',\n          name: 'Ace Pilot Wings',\n          description: 'Elite pilot recognition',\n          imageUrl: '/nft/ace-pilot.png',\n          attributes: { rarity: 'rare', type: 'skill', level: 'ace' },\n          rarity: 'rare',\n          tokenReward: 500\n        },\n        unlocked: false\n      },\n      {\n        id: 'social-commander',\n        name: 'Social Commander',\n        description: 'Invite 5 friends to play',\n        icon: '👥',\n        requirement: { type: 'social', value: 5 },\n        reward: {\n          id: 'social-commander-nft',\n          name: 'Squad Leader Badge',\n          description: 'Built a formidable space squadron',\n          imageUrl: '/nft/squad-leader.png',\n          attributes: { rarity: 'epic', type: 'social', friends: '5+' },\n          rarity: 'epic',\n          tokenReward: 1000\n        },\n        unlocked: false\n      },\n      {\n        id: 'galaxy-legend',\n        name: 'Galaxy Legend',\n        description: 'Reach #1 on global leaderboard',\n        icon: '👑',\n        requirement: { type: 'score', value: 200000 },\n        reward: {\n          id: 'galaxy-legend-nft',\n          name: 'Cosmic Crown',\n          description: 'Ultimate galactic supremacy',\n          imageUrl: '/nft/cosmic-crown.png',\n          attributes: { rarity: 'legendary', type: 'champion', rank: 1 },\n          rarity: 'legendary',\n          tokenReward: 5000\n        },\n        unlocked: false\n      }\n    ];\n  }\n\n  checkAchievements(gameStats: {\n    highScore: number;\n    totalScore: number;\n    gamesPlayed: number;\n    socialShares: number;\n    friendsInvited: number;\n    streakDays: number;\n  }): Achievement[] {\n    const achievements = this.getAvailableAchievements();\n    const unlockedAchievements: Achievement[] = [];\n\n    achievements.forEach(achievement => {\n      if (achievement.unlocked) return;\n\n      let unlocked = false;\n      \n      switch (achievement.requirement.type) {\n        case 'score':\n          unlocked = gameStats.highScore >= achievement.requirement.value;\n          break;\n        case 'social':\n          unlocked = gameStats.friendsInvited >= achievement.requirement.value;\n          break;\n        case 'streak':\n          unlocked = gameStats.streakDays >= achievement.requirement.value;\n          break;\n        case 'time':\n          unlocked = gameStats.gamesPlayed >= achievement.requirement.value;\n          break;\n      }\n\n      if (unlocked) {\n        achievement.unlocked = true;\n        unlockedAchievements.push(achievement);\n      }\n    });\n\n    return unlockedAchievements;\n  }\n\n  async mintAchievementNFT(achievement: Achievement): Promise<{\n    success: boolean;\n    txHash?: string;\n    error?: string;\n  }> {\n    try {\n      // Ensure user is on Base network\n      const switchedToBase = await this.walletManager.switchToBase();\n      if (!switchedToBase) {\n        return { success: false, error: 'Please switch to Base network' };\n      }\n\n      // Get user account\n      const account = await this.walletManager.getAccount();\n      if (!account) {\n        return { success: false, error: 'Wallet not connected' };\n      }\n\n      // In a real implementation, this would call the NFT contract\n      // For demo purposes, we'll simulate the minting process\n      console.log('Minting NFT for achievement:', achievement.name);\n      \n      // Simulate contract interaction\n      const mintData = this.encodeMintFunction(account, achievement);\n      \n      // Send transaction (simulation)\n      const txHash = await this.walletManager.sendTransaction(\n        this.NFT_CONTRACT_ADDRESS,\n        '0', // No ETH required for minting\n        mintData\n      );\n\n      if (txHash) {\n        // In real app, would track NFT ownership\n        console.log('NFT minted successfully:', txHash);\n        return { success: true, txHash };\n      } else {\n        return { success: false, error: 'Transaction failed' };\n      }\n\n    } catch (error) {\n      console.error('NFT minting failed:', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  async mintTokenReward(amount: number): Promise<{\n    success: boolean;\n    txHash?: string;\n    error?: string;\n  }> {\n    try {\n      const account = await this.walletManager.getAccount();\n      if (!account) {\n        return { success: false, error: 'Wallet not connected' };\n      }\n\n      // Simulate STARMINT token minting\n      console.log(`Minting ${amount} STARMINT tokens to ${account}`);\n      \n      // In real implementation, would call token contract mint function\n      return { \n        success: true, \n        txHash: '0x' + Math.random().toString(36).substring(2, 66) \n      };\n      \n    } catch (error) {\n      console.error('Token minting failed:', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  private encodeMintFunction(to: Address, achievement: Achievement): string {\n    // This would encode the actual contract function call\n    // For demo purposes, return mock encoded data\n    return `0x${to.slice(2)}${achievement.id}`;\n  }\n\n  getRarityColor(rarity: NFTReward['rarity']): string {\n    switch (rarity) {\n      case 'common': return 'text-gray-400';\n      case 'rare': return 'text-blue-400';\n      case 'epic': return 'text-purple-400';\n      case 'legendary': return 'text-yellow-400';\n    }\n  }\n\n  getRarityGradient(rarity: NFTReward['rarity']): string {\n    switch (rarity) {\n      case 'common': return 'from-gray-600 to-gray-800';\n      case 'rare': return 'from-blue-600 to-blue-800';\n      case 'epic': return 'from-purple-600 to-purple-800';\n      case 'legendary': return 'from-yellow-600 to-yellow-800';\n    }\n  }\n}","size_bytes":7763},"client/src/lib/security/GameSecurity.ts":{"content":"import CryptoJS from 'crypto-js';\n\nexport class GameSecurity {\n  private static readonly ENCRYPTION_KEY = 'game-security-key-2024'; // Would be env var in production\n  private static readonly INTEGRITY_KEY = 'integrity-check-key';\n  \n  // Anti-cheat timing validation\n  private static gameStartTime: number = 0;\n  private static lastActionTime: number = 0;\n  private static actionCount: number = 0;\n  \n  // Game state integrity tracking\n  private static stateChecksum: string = '';\n  private static validationHistory: Array<{timestamp: number, score: number, level: number}> = [];\n\n  public static startGameSession(): void {\n    this.gameStartTime = Date.now();\n    this.lastActionTime = this.gameStartTime;\n    this.actionCount = 0;\n    this.validationHistory = [];\n    this.stateChecksum = this.generateChecksum({score: 0, level: 1, lives: 3});\n  }\n\n  public static validateAction(actionType: string): boolean {\n    const now = Date.now();\n    const timeSinceLastAction = now - this.lastActionTime;\n    \n    // Prevent impossibly fast actions (human reaction time limits)\n    if (timeSinceLastAction < 16) { // 60fps limit\n      console.warn('Action too fast, possible automation detected');\n      return false;\n    }\n    \n    // Track action frequency for bot detection\n    this.actionCount++;\n    const avgActionsPerSecond = this.actionCount / ((now - this.gameStartTime) / 1000);\n    \n    if (avgActionsPerSecond > 30) { // Unrealistic action rate\n      console.warn('Excessive action rate detected');\n      return false;\n    }\n    \n    this.lastActionTime = now;\n    return true;\n  }\n\n  public static validateGameState(gameState: any): boolean {\n    // Check state progression logic\n    const expectedChecksum = this.generateChecksum(gameState);\n    \n    // Validate score progression\n    if (gameState.score < 0 || gameState.score > gameState.level * 15000) {\n      console.warn('Invalid score for level');\n      return false;\n    }\n    \n    // Validate level progression\n    if (gameState.level < 1 || gameState.level > 100) {\n      console.warn('Invalid level');\n      return false;\n    }\n    \n    // Validate game time consistency\n    const gameTime = Date.now() - this.gameStartTime;\n    if (gameTime < gameState.level * 20000) { // Minimum time per level\n      console.warn('Level completed too quickly');\n      return false;\n    }\n    \n    // Add to validation history\n    this.validationHistory.push({\n      timestamp: Date.now(),\n      score: gameState.score,\n      level: gameState.level\n    });\n    \n    // Keep only last 10 entries\n    if (this.validationHistory.length > 10) {\n      this.validationHistory.shift();\n    }\n    \n    this.stateChecksum = expectedChecksum;\n    return true;\n  }\n\n  public static encryptGameState(gameState: any): string {\n    const stateWithMetadata = {\n      ...gameState,\n      timestamp: Date.now(),\n      sessionStart: this.gameStartTime,\n      actionCount: this.actionCount,\n      validationHistory: this.validationHistory,\n      checksum: this.generateChecksum(gameState)\n    };\n    \n    return CryptoJS.AES.encrypt(JSON.stringify(stateWithMetadata), this.ENCRYPTION_KEY).toString();\n  }\n\n  public static decryptGameState(encryptedData: string): any {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.ENCRYPTION_KEY);\n      const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      \n      // Validate integrity\n      const expectedChecksum = this.generateChecksum({\n        score: decryptedData.score,\n        level: decryptedData.level,\n        lives: decryptedData.lives\n      });\n      \n      if (decryptedData.checksum !== expectedChecksum) {\n        throw new Error('Game state integrity check failed');\n      }\n      \n      return decryptedData;\n    } catch (error) {\n      throw new Error('Invalid or corrupted game state');\n    }\n  }\n\n  private static generateChecksum(gameState: any): string {\n    const stateString = JSON.stringify({\n      score: gameState.score,\n      level: gameState.level,\n      lives: gameState.lives,\n      timestamp: Math.floor(Date.now() / 10000) // 10-second resolution\n    });\n    \n    return CryptoJS.HmacSHA256(stateString, this.INTEGRITY_KEY).toString();\n  }\n\n  public static detectAnomalies(): Array<string> {\n    const anomalies: Array<string> = [];\n    \n    // Check for score jumps\n    if (this.validationHistory.length >= 2) {\n      const recent = this.validationHistory.slice(-2);\n      const scoreDiff = recent[1].score - recent[0].score;\n      const timeDiff = recent[1].timestamp - recent[0].timestamp;\n      \n      if (scoreDiff > 1000 && timeDiff < 5000) {\n        anomalies.push('Unusual score increase detected');\n      }\n    }\n    \n    // Check for consistent performance (bot-like behavior)\n    if (this.validationHistory.length >= 5) {\n      const scores = this.validationHistory.slice(-5).map(h => h.score);\n      const intervals = [];\n      for (let i = 1; i < scores.length; i++) {\n        intervals.push(scores[i] - scores[i-1]);\n      }\n      \n      // Check if score increases are too consistent (low variance)\n      const mean = intervals.reduce((a, b) => a + b) / intervals.length;\n      const variance = intervals.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / intervals.length;\n      \n      if (variance < 10 && mean > 100) {\n        anomalies.push('Suspiciously consistent performance detected');\n      }\n    }\n    \n    return anomalies;\n  }\n}","size_bytes":5412},"client/src/lib/sharing/customImages.ts":{"content":"import { SocialUser } from '../social/neynar';\n\nexport interface ShareImageData {\n  score: number;\n  rank: { global: number; friends: number };\n  user: {\n    displayName: string;\n    pfpUrl: string;\n    username: string;\n  };\n  achievements: string[];\n  friendsPlaying: SocialUser[];\n}\n\nexport class CustomShareGenerator {\n  private static instance: CustomShareGenerator;\n\n  static getInstance(): CustomShareGenerator {\n    if (!CustomShareGenerator.instance) {\n      CustomShareGenerator.instance = new CustomShareGenerator();\n    }\n    return CustomShareGenerator.instance;\n  }\n\n  generateShareImageUrl(data: ShareImageData): string {\n    const baseUrl = window.location.origin;\n    const params = new URLSearchParams({\n      score: data.score.toString(),\n      globalRank: data.rank.global.toString(),\n      friendsRank: data.rank.friends.toString(),\n      username: data.user.username,\n      displayName: data.user.displayName,\n      pfpUrl: data.user.pfpUrl,\n      achievements: data.achievements.join(','),\n      friendsCount: data.friendsPlaying.length.toString(),\n    });\n    \n    return `${baseUrl}/api/share/image?${params.toString()}`;\n  }\n\n  generatePersonalizedShareUrl(fid: number): string {\n    const baseUrl = window.location.origin;\n    return `${baseUrl}/share/${fid}`;\n  }\n\n  generateViralShareText(data: ShareImageData): string {\n    const { score, rank, user, friendsPlaying } = data;\n    \n    let shareText = `🚀 Just scored ${score.toLocaleString()} points in Galaxiga Classic Space Shooter!\\\\n\\\\n`;\n    \n    // Add rank boasting\n    if (rank.friends > 0 && rank.friends <= 5) {\n      shareText += `💪 I'm #${rank.friends} among my friends! `;\n    }\n    \n    if (rank.global > 0 && rank.global <= 100) {\n      shareText += `🌟 Global rank: #${rank.global}! `;\n    }\n    \n    // Add social proof\n    if (friendsPlaying.length > 0) {\n      const friendNames = friendsPlaying.slice(0, 3).map(f => `@${f.username}`);\n      shareText += `\\\\n\\\\n${friendNames.join(', ')} - think you can beat my score? 👾`;\n    }\n    \n    shareText += '\\\\n\\\\n🎮 Play now and compete for the leaderboard!';\n    \n    return shareText;\n  }\n\n  generateAchievementShareText(achievement: string, reward: string): string {\n    return `🏆 Achievement Unlocked: \"${achievement}\"!\\\\n\\\\n` +\n           `💰 Earned: ${reward} STARMINT tokens\\\\n\\\\n` +\n           `🎮 Join me in Galaxiga Classic Space Shooter and unlock your own rewards!`;\n  }\n\n  // Generate dynamic share metadata for embeds\n  generateShareMetadata(data: ShareImageData) {\n    const imageUrl = this.generateShareImageUrl(data);\n    \n    return {\n      title: `🚀 ${data.user.displayName} scored ${data.score.toLocaleString()} points!`,\n      description: `Ranked #${data.rank.friends || data.rank.global} • Join the space battle and compete for the top spot!`,\n      image: imageUrl,\n      url: window.location.origin,\n      type: 'website',\n      siteName: 'Galaxiga Classic Space Shooter'\n    };\n  }\n}","size_bytes":2977},"client/src/lib/social/leaderboard.ts":{"content":"// Social leaderboard system for Galaxiga Mini App\n\nexport interface LeaderboardEntry {\n    fid: number;\n    username: string;\n    displayName: string;\n    pfpUrl: string;\n    score: number;\n    rank: number;\n    lastPlayed: Date;\n    achievements: string[];\n    totalGames: number;\n  }\n  \n  export interface LeaderboardFilters {\n    timeframe: 'daily' | 'weekly' | 'monthly' | 'allTime';\n    friends: boolean;\n    region?: string;\n  }\n  \n  export class SocialLeaderboard {\n    private static instance: SocialLeaderboard;\n    private cache: Map<string, LeaderboardEntry[]> = new Map();\n    private lastUpdate: Map<string, Date> = new Map();\n    private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n  \n    static getInstance(): SocialLeaderboard {\n      if (!SocialLeaderboard.instance) {\n        SocialLeaderboard.instance = new SocialLeaderboard();\n      }\n      return SocialLeaderboard.instance;\n    }\n  \n    async getLeaderboard(filters: LeaderboardFilters): Promise<LeaderboardEntry[]> {\n      const cacheKey = this.getCacheKey(filters);\n      const cached = this.cache.get(cacheKey);\n      const lastUpdate = this.lastUpdate.get(cacheKey);\n  \n      // Return cached data if still fresh\n      if (cached && lastUpdate && Date.now() - lastUpdate.getTime() < this.CACHE_DURATION) {\n        return cached;\n      }\n  \n      try {\n        // In a real implementation, this would fetch from your backend API\n        const leaderboard = await this.fetchLeaderboardData(filters);\n        \n        // Cache the results\n        this.cache.set(cacheKey, leaderboard);\n        this.lastUpdate.set(cacheKey, new Date());\n        \n        return leaderboard;\n      } catch (error) {\n        console.error('Failed to fetch leaderboard:', error);\n        // Return cached data or empty array as fallback\n        return cached || this.getMockLeaderboard();\n      }\n    }\n  \n    async submitScore(score: number, userFid: number): Promise<boolean> {\n      try {\n        // In a real implementation, this would submit to your backend\n        await this.submitScoreToBackend(score, userFid);\n        \n        // Clear relevant caches to force refresh\n        this.clearCaches();\n        \n        return true;\n      } catch (error) {\n        console.error('Failed to submit score:', error);\n        return false;\n      }\n    }\n  \n    async getFriendsRanking(userFid: number): Promise<LeaderboardEntry[]> {\n      // Get friends list from Farcaster\n      const friends = await this.getFriendsList(userFid);\n      \n      // Get leaderboard with friends filter\n      const friendsLeaderboard = await this.getLeaderboard({\n        timeframe: 'weekly',\n        friends: true\n      });\n  \n      return friendsLeaderboard.filter(entry => \n        friends.includes(entry.fid) || entry.fid === userFid\n      );\n    }\n  \n    private getCacheKey(filters: LeaderboardFilters): string {\n      return `${filters.timeframe}_${filters.friends}_${filters.region || 'global'}`;\n    }\n  \n    private async fetchLeaderboardData(filters: LeaderboardFilters): Promise<LeaderboardEntry[]> {\n      // Mock implementation - replace with actual API call\n      const timeframe = filters.timeframe === 'allTime' ? 'all' : filters.timeframe;\n      const response = await fetch(`/api/game/leaderboard?timeframe=${timeframe}&limit=50`);\n  \n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n  \n      return response.json();\n    }\n  \n    private async submitScoreToBackend(score: number, userFid: number): Promise<void> {\n      // Mock implementation - replace with actual API call\n      const response = await fetch('/api/scores', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ score, userFid, timestamp: Date.now() })\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to submit score');\n      }\n    }\n  \n    private async getFriendsList(userFid: number): Promise<number[]> {\n      // Mock implementation - replace with Farcaster API call\n      try {\n        const response = await fetch(`/api/friends/${userFid}`);\n        if (!response.ok) throw new Error('Failed to fetch friends');\n        return response.json();\n      } catch (error) {\n        console.error('Failed to get friends list:', error);\n        return [];\n      }\n    }\n  \n    private clearCaches(): void {\n      this.cache.clear();\n      this.lastUpdate.clear();\n    }\n  \n    private getMockLeaderboard(): LeaderboardEntry[] {\n      return [\n        {\n          fid: 3621,\n          username: 'spacehero',\n          displayName: 'Space Hero',\n          pfpUrl: 'https://example.com/pfp1.png',\n          score: 125420,\n          rank: 1,\n          lastPlayed: new Date(),\n          achievements: ['centurion', 'high_scorer'],\n          totalGames: 47\n        },\n        {\n          fid: 1234,\n          username: 'starhunter',\n          displayName: 'Star Hunter',\n          pfpUrl: 'https://example.com/pfp2.png',\n          score: 98750,\n          rank: 2,\n          lastPlayed: new Date(),\n          achievements: ['first_blood', 'social_butterfly'],\n          totalGames: 32\n        },\n        {\n          fid: 5678,\n          username: 'cosmicrider',\n          displayName: 'Cosmic Rider',\n          pfpUrl: 'https://example.com/pfp3.png',\n          score: 87320,\n          rank: 3,\n          lastPlayed: new Date(),\n          achievements: ['marathon_gamer'],\n          totalGames: 28\n        }\n      ];\n    }\n  }\n  \n  // Real-time leaderboard updates using WebSocket\n  export class RealtimeLeaderboard {\n    private ws: WebSocket | null = null;\n    private callbacks: ((entry: LeaderboardEntry) => void)[] = [];\n  \n    connect(): void {\n      try {\n        this.ws = new WebSocket(`wss://${window.location.host}/ws/leaderboard`);\n        \n        this.ws.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          this.callbacks.forEach(callback => callback(data));\n        };\n  \n        this.ws.onclose = () => {\n          // Reconnect after 5 seconds\n          setTimeout(() => this.connect(), 5000);\n        };\n      } catch (error) {\n        console.error('Failed to connect to realtime leaderboard:', error);\n      }\n    }\n  \n    onUpdate(callback: (entry: LeaderboardEntry) => void): void {\n      this.callbacks.push(callback);\n    }\n  \n    disconnect(): void {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n      this.callbacks = [];\n    }\n  }","size_bytes":6464},"client/src/lib/social/neynar.ts":{"content":"import { NeynarAPIClient, Configuration } from '@neynar/nodejs-sdk';\n\n// Initialize Neynar client with demo key for now\nconst config = new Configuration({\n  apiKey: process.env.NEYNAR_API_KEY || 'NEYNAR_API_DOCS', // Demo key\n});\n\nexport const neynarClient = new NeynarAPIClient(config);\n\nexport interface SocialUser {\n  fid: number;\n  username: string;\n  displayName: string;\n  pfpUrl: string;\n  followerCount: number;\n  followingCount: number;\n  powerBadge: boolean;\n}\n\nexport interface GameScore {\n  fid: number;\n  username: string;\n  displayName: string;\n  pfpUrl: string;\n  score: number;\n  timestamp: Date;\n  rank?: number;\n}\n\nexport class SocialManager {\n  private static instance: SocialManager;\n\n  static getInstance(): SocialManager {\n    if (!SocialManager.instance) {\n      SocialManager.instance = new SocialManager();\n    }\n    return SocialManager.instance;\n  }\n\n  async getUser(fid: number): Promise<SocialUser | null> {\n    try {\n      const response = await neynarClient.fetchBulkUsers({ fids: [fid] });\n      const user = response.users[0];\n      if (!user) return null;\n\n      return {\n        fid: user.fid,\n        username: user.username,\n        displayName: user.displayName || user.username,\n        pfpUrl: user.pfpUrl || '/default-avatar.png',\n        followerCount: user.followerCount,\n        followingCount: user.followingCount,\n        powerBadge: user.powerBadge || false,\n      };\n    } catch (error) {\n      console.error('Failed to fetch user:', error);\n      return null;\n    }\n  }\n\n  async getUserFollowing(fid: number): Promise<SocialUser[]> {\n    try {\n      const response = await neynarClient.fetchUserFollowing({ \n        fid, \n        limit: 150 // Get good sample of following\n      });\n      \n      return response.users.map(user => ({\n        fid: user.fid,\n        username: user.username,\n        displayName: user.displayName || user.username,\n        pfpUrl: user.pfpUrl || '/default-avatar.png',\n        followerCount: user.followerCount,\n        followingCount: user.followingCount,\n        powerBadge: user.powerBadge || false,\n      }));\n    } catch (error) {\n      console.error('Failed to fetch user following:', error);\n      return [];\n    }\n  }\n\n  async getBestFriends(fid: number): Promise<SocialUser[]> {\n    try {\n      const response = await neynarClient.fetchBestFriends({ fid });\n      \n      return response.users.map(user => ({\n        fid: user.fid,\n        username: user.username,\n        displayName: user.displayName || user.username,\n        pfpUrl: user.pfpUrl || '/default-avatar.png',\n        followerCount: user.followerCount,\n        followingCount: user.followingCount,\n        powerBadge: user.powerBadge || false,\n      }));\n    } catch (error) {\n      console.error('Failed to fetch best friends:', error);\n      return [];\n    }\n  }\n\n  async composeCast(text: string, embeds?: string[]): Promise<boolean> {\n    try {\n      // This would typically use the managed signer\n      // For now, we'll return success to indicate the API call would work\n      console.log('Would compose cast:', { text, embeds });\n      return true;\n    } catch (error) {\n      console.error('Failed to compose cast:', error);\n      return false;\n    }\n  }\n\n  // Social leaderboard functionality\n  createSocialLeaderboard(scores: GameScore[], userFid: number, following: SocialUser[]): {\n    globalLeaderboard: GameScore[];\n    friendsLeaderboard: GameScore[];\n    userRank: { global: number; friends: number };\n  } {\n    // Sort scores by highest first\n    const sortedScores = scores.sort((a, b) => b.score - a.score);\n    \n    // Add ranks\n    const globalLeaderboard = sortedScores.map((score, index) => ({\n      ...score,\n      rank: index + 1,\n    }));\n\n    // Get following FIDs for friend filtering\n    const followingFids = new Set(following.map(f => f.fid));\n    followingFids.add(userFid); // Include user in friends leaderboard\n\n    // Create friends-only leaderboard\n    const friendsScores = globalLeaderboard.filter(score => \n      followingFids.has(score.fid)\n    );\n    const friendsLeaderboard = friendsScores.map((score, index) => ({\n      ...score,\n      rank: index + 1,\n    }));\n\n    // Find user ranks\n    const userGlobalRank = globalLeaderboard.findIndex(score => score.fid === userFid) + 1;\n    const userFriendsRank = friendsLeaderboard.findIndex(score => score.fid === userFid) + 1;\n\n    return {\n      globalLeaderboard,\n      friendsLeaderboard,\n      userRank: {\n        global: userGlobalRank || 0,\n        friends: userFriendsRank || 0,\n      },\n    };\n  }\n\n  generateShareText(score: number, userRank: { global: number; friends: number }, bestFriends: SocialUser[]): string {\n    const friendTags = bestFriends.slice(0, 3).map(f => `@${f.username}`).join(' ');\n    \n    let shareText = `🚀 Just scored ${score.toLocaleString()} points in Galaxiga Classic Space Shooter! `;\n    \n    if (userRank.friends > 0 && userRank.friends <= 10) {\n      shareText += `I'm ranked #${userRank.friends} among my friends! `;\n    }\n    \n    if (userRank.global > 0 && userRank.global <= 100) {\n      shareText += `Global rank: #${userRank.global}! `;\n    }\n    \n    shareText += `Think you can beat me? 👾 ${friendTags}`;\n    \n    return shareText;\n  }\n}","size_bytes":5233},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  shootSound: HTMLAudioElement | null;\n  gameOverSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  setShootSound: (sound: HTMLAudioElement) => void;\n  setGameOverSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n  playShoot: () => void;\n  playGameOver: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  shootSound: null,\n  gameOverSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  setShootSound: (sound) => set({ shootSound: sound }),\n  setGameOverSound: (sound) => set({ gameOverSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted, backgroundMusic } = get();\n    const newMutedState = !isMuted;\n    \n    // Update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Control background music based on mute state\n    if (backgroundMusic) {\n      if (newMutedState) {\n        backgroundMusic.pause();\n        backgroundMusic.currentTime = 0;\n      } else {\n        // Only start playing if we're in a playing state\n        const gamePhase = document.querySelector('[data-game-phase]')?.getAttribute('data-game-phase');\n        if (gamePhase === 'playing') {\n          backgroundMusic.play().catch(console.log);\n        }\n      }\n    }\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  },\n\n  playShoot: () => {\n    const { shootSound, isMuted } = get();\n    if (shootSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Shoot sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow rapid overlapping playback\n      const soundClone = shootSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.2; // Quieter than hit sounds\n      soundClone.playbackRate = 1.5; // Slightly faster/higher pitch\n      soundClone.play().catch(error => {\n        console.log(\"Shoot sound play prevented:\", error);\n      });\n    }\n  },\n\n  playGameOver: () => {\n    const { gameOverSound, isMuted } = get();\n    if (gameOverSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Game over sound skipped (muted)\");\n        return;\n      }\n      \n      gameOverSound.currentTime = 0;\n      gameOverSound.volume = 0.5;\n      gameOverSound.playbackRate = 0.7; // Slower/lower pitch for dramatic effect\n      gameOverSound.play().catch(error => {\n        console.log(\"Game over sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":4067},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useGameState.tsx":{"content":"import { create } from \"zustand\";\nimport { usePlayerStats } from \"./usePlayerStats\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"paused\" | \"ended\";\n\ninterface GameSessionData {\n  startTime: number;\n  endTime?: number;\n  enemiesKilled: number;\n  powerUpsCollected: number;\n  bulletsShot: number;\n  bulletsHit: number;\n  maxLevel: number;\n}\n\ninterface GameState {\n  gamePhase: GamePhase;\n  score: number;\n  lives: number;\n  level: number;\n  sessionData: GameSessionData;\n  \n  // Actions\n  startGame: () => void;\n  pauseGame: () => void;\n  resumeGame: () => void;\n  endGame: (finalStats?: Partial<GameSessionData>) => Promise<void>;\n  restartGame: () => void;\n  setScore: (score: number) => void;\n  setLives: (lives: number) => void;\n  setLevel: (level: number) => void;\n  incrementLevel: () => void;\n  updateSessionData: (data: Partial<GameSessionData>) => void;\n  incrementEnemiesKilled: () => void;\n  incrementPowerUpsCollected: () => void;\n  incrementBulletStats: (shot?: boolean, hit?: boolean) => void;\n}\n\nexport const useGameState = create<GameState>((set, get) => ({\n  gamePhase: \"ready\",\n  score: 0,\n  lives: 3,\n  level: 1,\n  sessionData: {\n    startTime: 0,\n    enemiesKilled: 0,\n    powerUpsCollected: 0,\n    bulletsShot: 0,\n    bulletsHit: 0,\n    maxLevel: 1,\n  },\n  \n  startGame: () => {\n    const now = Date.now();\n    set({ \n      gamePhase: \"playing\",\n      sessionData: {\n        startTime: now,\n        enemiesKilled: 0,\n        powerUpsCollected: 0,\n        bulletsShot: 0,\n        bulletsHit: 0,\n        maxLevel: 1,\n      }\n    });\n  },\n  \n  pauseGame: () => set({ gamePhase: \"paused\" }),\n  resumeGame: () => set({ gamePhase: \"playing\" }),\n  \n  endGame: async (finalStats?: Partial<GameSessionData>) => {\n    const state = get();\n    const endTime = Date.now();\n    const gameTime = endTime - state.sessionData.startTime;\n    \n    // Update session data with final stats\n    const finalSessionData = {\n      ...state.sessionData,\n      endTime,\n      ...finalStats,\n    };\n    \n    // Calculate accuracy\n    const accuracy = finalSessionData.bulletsShot > 0 \n      ? finalSessionData.bulletsHit / finalSessionData.bulletsShot \n      : 0;\n    \n    try {\n      console.log('🎮 Starting game save process...');\n      \n      // Get authentication token - always refresh from Farcaster\n      let authToken = null;\n      \n      // Try to get Farcaster user from the playerStats store first\n      const playerStatsState = usePlayerStats.getState();\n      let farcasterFid = playerStatsState.farcasterFid;\n      let displayName = playerStatsState.displayName || 'Player';\n      \n      // Fallback to global context if store doesn't have user data\n      if (!farcasterFid) {\n        console.log('🔄 No FID in store, checking global MiniKit context...');\n        const globalContext = (window as any).__miniKitContext__;\n        if (globalContext?.user) {\n          farcasterFid = globalContext.user.fid;\n          displayName = globalContext.user.displayName || 'Player';\n          console.log('✅ Using FID from global context:', { farcasterFid, displayName });\n        }\n      }\n      \n      console.log('👤 Using Farcaster data for game save:', { farcasterFid, displayName });\n      \n      if (farcasterFid) {\n        console.log('🔐 Authenticating Farcaster user for game save...');\n        try {\n          const authResponse = await fetch('/api/farcaster/auth', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              fid: farcasterFid,\n              username: `farcaster_${farcasterFid}`,\n              displayName: displayName,\n            }),\n          });\n          \n          console.log('🌐 Auth API response status:', authResponse.status);\n          if (authResponse.ok) {\n            const authData = await authResponse.json();\n            authToken = authData.token;\n            if (authToken) {\n              localStorage.setItem('authToken', authToken);\n              console.log('✅ Farcaster authentication successful, token saved');\n            } else {\n              console.error('❌ No token received from auth response:', authData);\n            }\n          } else {\n            const errorText = await authResponse.text();\n            console.error('❌ Farcaster authentication failed:', authResponse.status, errorText);\n          }\n        } catch (authError) {\n          console.error('❌ Error during Farcaster authentication:', authError);\n        }\n      } else {\n        console.error('❌ No Farcaster FID available - user not properly authenticated');\n      }\n      \n      // Save game session to backend (only if we have a valid token)\n      if (!authToken) {\n        console.error('❌ CRITICAL: Cannot save game session - No authentication token available');\n        console.log('🔧 Debug info: playerStats FID:', farcasterFid);\n        console.log('🔧 Debug info: localStorage keys:', Object.keys(localStorage));\n        return;\n      }\n      \n      const gameSessionData = {\n        score: state.score,\n        level: finalSessionData.maxLevel,\n        gameTime,\n        enemiesKilled: finalSessionData.enemiesKilled,\n        powerUpsCollected: finalSessionData.powerUpsCollected,\n        accuracy,\n      };\n      \n      console.log('💾 Attempting to save game session with data:', gameSessionData);\n      console.log('🔑 Using authToken (first 20 chars):', authToken.substring(0, 20) + '...');\n      \n      const response = await fetch('/api/game/session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(gameSessionData),\n      });\n      \n      console.log('🌐 Game save API response:', response.status, response.statusText);\n      \n      if (response.ok) {\n        const responseData = await response.json();\n        console.log('✅ Game session saved successfully:', responseData);\n        \n        // Update player stats store\n        const playerStats = usePlayerStats.getState();\n        playerStats.updateStats({\n          gamesPlayed: playerStats.stats.gamesPlayed + 1,\n          totalScore: playerStats.stats.totalScore + state.score,\n          enemiesDestroyed: playerStats.stats.enemiesDestroyed + finalSessionData.enemiesKilled,\n          timePlayedMinutes: playerStats.stats.timePlayedMinutes + Math.round(gameTime / 60000),\n        });\n        \n        if (state.score > playerStats.stats.highScore) {\n          playerStats.updateStats({ highScore: state.score });\n        }\n        \n        console.log('📊 Local player stats updated successfully');\n        \n        // Dispatch event to notify profile page to refresh data\n        window.dispatchEvent(new CustomEvent('gameCompleted', { \n          detail: { \n            score: state.score, \n            level: finalSessionData.maxLevel,\n            enemiesKilled: finalSessionData.enemiesKilled,\n            gameTime \n          } \n        }));\n        \n      } else {\n        const errorText = await response.text();\n        console.error('❌ Failed to save game session:', response.status, errorText);\n      }\n    } catch (error) {\n      console.error('Error saving game session:', error);\n    }\n    \n    set({ \n      gamePhase: \"ended\",\n      sessionData: finalSessionData\n    });\n  },\n  \n  restartGame: () => set({ \n    gamePhase: \"ready\", \n    score: 0, \n    lives: 3, \n    level: 1,\n    sessionData: {\n      startTime: 0,\n      enemiesKilled: 0,\n      powerUpsCollected: 0,\n      bulletsShot: 0,\n      bulletsHit: 0,\n      maxLevel: 1,\n    }\n  }),\n  \n  setScore: (score: number) => set({ score }),\n  setLives: (lives: number) => set({ lives }),\n  setLevel: (level: number) => set((state) => ({ \n    level,\n    sessionData: {\n      ...state.sessionData,\n      maxLevel: Math.max(state.sessionData.maxLevel, level)\n    }\n  })),\n  incrementLevel: () => set((state) => ({ \n    level: state.level + 1,\n    sessionData: {\n      ...state.sessionData,\n      maxLevel: Math.max(state.sessionData.maxLevel, state.level + 1)\n    }\n  })),\n  \n  updateSessionData: (data: Partial<GameSessionData>) => \n    set((state) => ({\n      sessionData: { ...state.sessionData, ...data }\n    })),\n    \n  incrementEnemiesKilled: () => \n    set((state) => ({\n      sessionData: {\n        ...state.sessionData,\n        enemiesKilled: state.sessionData.enemiesKilled + 1\n      }\n    })),\n    \n  incrementPowerUpsCollected: () => \n    set((state) => ({\n      sessionData: {\n        ...state.sessionData,\n        powerUpsCollected: state.sessionData.powerUpsCollected + 1\n      }\n    })),\n    \n  incrementBulletStats: (shot = false, hit = false) => \n    set((state) => ({\n      sessionData: {\n        ...state.sessionData,\n        bulletsShot: state.sessionData.bulletsShot + (shot ? 1 : 0),\n        bulletsHit: state.sessionData.bulletsHit + (hit ? 1 : 0)\n      }\n    })),\n}));\n\n// Helper function to access game session data\nexport const getGameSessionStats = () => {\n  const state = useGameState.getState();\n  return {\n    ...state.sessionData,\n    gameTime: state.sessionData.endTime \n      ? state.sessionData.endTime - state.sessionData.startTime \n      : Date.now() - state.sessionData.startTime,\n    accuracy: state.sessionData.bulletsShot > 0 \n      ? state.sessionData.bulletsHit / state.sessionData.bulletsShot \n      : 0,\n  };\n};\n","size_bytes":9406},"client/src/lib/stores/usePlayerStats.tsx":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport type { GameStats } from \"../web3/achievements\";\n\ninterface PlayerStatsState {\n  // Player statistics\n  stats: GameStats;\n  \n  // User data from Farcaster\n  farcasterFid: number | null;\n  displayName: string | null;\n  profilePicture: string | null;\n  \n  // Daily login and streak data\n  lastLoginDate: string | null;\n  currentStreak: number;\n  \n  // Purchase history\n  purchaseHistory: PurchaseRecord[];\n  \n  // Loading states\n  isLoading: boolean;\n  lastSynced: Date | null;\n  \n  // Actions\n  updateStats: (newStats: Partial<GameStats>) => void;\n  incrementStat: (statKey: keyof GameStats, amount?: number) => void;\n  setUserData: (fid: number, displayName: string, profilePicture: string) => void;\n  checkDailyLogin: () => Promise<void>;\n  addPurchase: (purchase: PurchaseRecord) => void;\n  syncWithDatabase: () => Promise<void>;\n  loadPlayerStats: (farcasterFid: number) => Promise<void>;\n  loadPurchaseHistory: (farcasterFid: number) => Promise<void>;\n  resetStats: () => void;\n}\n\ninterface PurchaseRecord {\n  id: number;\n  itemName: string;\n  itemType: string;\n  price: number;\n  currency: string;\n  purchasedAt: Date;\n}\n\nconst initialStats: GameStats = {\n  totalScore: 0,\n  highScore: 0,\n  enemiesDestroyed: 0,\n  gamesPlayed: 0,\n  timePlayedMinutes: 0,\n  streakDays: 1,\n  maxStreak: 1,\n  dailyLogins: 1,\n  socialShares: 0,\n  friendsInvited: 0,\n};\n\nexport const usePlayerStats = create<PlayerStatsState>()(\n  persist(\n    (set, get) => ({\n      stats: initialStats,\n      farcasterFid: null,\n      displayName: null,\n      profilePicture: null,\n      lastLoginDate: null,\n      currentStreak: 1,\n      purchaseHistory: [],\n      isLoading: false,\n      lastSynced: null,\n      \n      updateStats: (newStats: Partial<GameStats>) => {\n        set((state) => ({\n          stats: { ...state.stats, ...newStats },\n        }));\n        // Auto-sync with database when stats are updated\n        get().syncWithDatabase();\n      },\n      \n      incrementStat: (statKey: keyof GameStats, amount = 1) => {\n        set((state) => ({\n          stats: {\n            ...state.stats,\n            [statKey]: state.stats[statKey] + amount,\n          },\n        }));\n        // Auto-sync with database when stats are updated\n        get().syncWithDatabase();\n      },\n      \n      setUserData: (fid: number, displayName: string, profilePicture: string) => {\n        set({\n          farcasterFid: fid,\n          displayName,\n          profilePicture,\n        });\n      },\n      \n      loadPlayerStats: async (farcasterFid: number) => {\n        console.log('📊 Loading player stats for FID:', farcasterFid);\n        set({ isLoading: true });\n        try {\n          console.log('🌐 Fetching player stats from API...');\n          const response = await fetch(`/api/player-stats/${farcasterFid}`);\n          console.log('📡 API Response status:', response.status);\n          \n          if (response.ok) {\n            const data = await response.json();\n            console.log('✅ Player stats API data received:', data);\n            \n            const newStats = {\n              totalScore: data.totalScore || 0,\n              highScore: data.highScore || 0,\n              enemiesDestroyed: data.enemiesDestroyed || 0,\n              gamesPlayed: data.gamesPlayed || 0,\n              timePlayedMinutes: data.timePlayedMinutes || 0,\n              streakDays: data.streakDays || 1,\n              maxStreak: data.maxStreak || 1,\n              dailyLogins: data.dailyLogins || 1,\n              socialShares: data.socialShares || 0,\n              friendsInvited: data.friendsInvited || 0,\n            };\n            \n            console.log('📈 Setting new stats in store:', newStats);\n            \n            set({\n              stats: newStats,\n              farcasterFid,\n              lastLoginDate: data.lastLoginAt ? new Date(data.lastLoginAt).toISOString().split('T')[0] : null,\n              currentStreak: data.streakDays || 1,\n              lastSynced: new Date(),\n            });\n            \n            console.log('✅ Player stats store updated successfully');\n          } else {\n            console.error('❌ API request failed:', response.status, await response.text());\n          }\n          \n          // Load purchase history\n          await get().loadPurchaseHistory(farcasterFid);\n        } catch (error) {\n          console.error('❌ Failed to load player stats:', error);\n        } finally {\n          set({ isLoading: false });\n          console.log('🏁 Player stats loading completed');\n        }\n      },\n      \n      syncWithDatabase: async () => {\n        const { stats, farcasterFid } = get();\n        if (!farcasterFid) return;\n        \n        try {\n          await fetch('/api/player-stats', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              farcasterFid,\n              ...stats,\n            }),\n          });\n          set({ lastSynced: new Date() });\n        } catch (error) {\n          console.error('Failed to sync player stats:', error);\n        }\n      },\n      \n      checkDailyLogin: async () => {\n        const { farcasterFid, lastLoginDate } = get();\n        if (!farcasterFid) return;\n        \n        const today = new Date().toISOString().split('T')[0];\n        \n        // Skip if already logged in today\n        if (lastLoginDate === today) return;\n        \n        try {\n          const response = await fetch('/api/daily-login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ farcasterFid }),\n          });\n          \n          if (response.ok) {\n            const data = await response.json();\n            set({\n              lastLoginDate: today,\n              currentStreak: data.streakDays,\n              stats: {\n                ...get().stats,\n                streakDays: data.streakDays,\n                maxStreak: Math.max(get().stats.maxStreak, data.streakDays),\n                dailyLogins: get().stats.dailyLogins + 1,\n              },\n            });\n            get().syncWithDatabase();\n          }\n        } catch (error) {\n          console.error('Failed to check daily login:', error);\n        }\n      },\n      \n      loadPurchaseHistory: async (farcasterFid: number) => {\n        try {\n          const response = await fetch(`/api/purchase-history/${farcasterFid}?limit=50`);\n          if (response.ok) {\n            const data = await response.json();\n            set({\n              purchaseHistory: data.purchases || [],\n            });\n          }\n        } catch (error) {\n          console.error('Failed to load purchase history:', error);\n        }\n      },\n\n      addPurchase: (purchase: PurchaseRecord) => {\n        set((state) => ({\n          purchaseHistory: [purchase, ...state.purchaseHistory],\n        }));\n      },\n      \n      resetStats: () => {\n        set({ stats: initialStats });\n        get().syncWithDatabase();\n      },\n    }),\n    {\n      name: 'player-stats-storage',\n      partialize: (state) => ({\n        stats: state.stats,\n        farcasterFid: state.farcasterFid,\n        displayName: state.displayName,\n        profilePicture: state.profilePicture,\n        lastLoginDate: state.lastLoginDate,\n        currentStreak: state.currentStreak,\n        purchaseHistory: state.purchaseHistory,\n        lastSynced: state.lastSynced,\n      }),\n    }\n  )\n);","size_bytes":7492},"client/src/lib/stores/useVibration.tsx":{"content":"import { create } from \"zustand\";\n\ninterface VibrationState {\n  isVibrationEnabled: boolean;\n  isVibrationSupported: boolean;\n  \n  // Control functions\n  toggleVibration: () => void;\n  checkVibrationSupport: () => void;\n  vibrateShoot: () => void;\n  vibrateHit: () => void;\n  vibrateEnemyDestroyed: () => void;\n  vibratePlayerHit: () => void;\n  vibrateGameOver: () => void;\n}\n\nexport const useVibration = create<VibrationState>((set, get) => ({\n  isVibrationEnabled: true, // Start enabled by default for mobile users\n  isVibrationSupported: false,\n  \n  checkVibrationSupport: () => {\n    // Check if the device supports vibration\n    const supported = 'vibrate' in navigator && typeof navigator.vibrate === 'function';\n    set({ isVibrationSupported: supported });\n    \n    if (supported) {\n      console.log(\"Vibration is supported on this device\");\n    } else {\n      console.log(\"Vibration is not supported on this device\");\n    }\n  },\n  \n  toggleVibration: () => {\n    const { isVibrationEnabled } = get();\n    const newVibrationState = !isVibrationEnabled;\n    \n    set({ isVibrationEnabled: newVibrationState });\n    \n    console.log(`Vibration ${newVibrationState ? 'enabled' : 'disabled'}`);\n    \n    // Give feedback when toggling\n    if (newVibrationState && get().isVibrationSupported) {\n      navigator.vibrate(50); // Short feedback vibration\n    }\n  },\n  \n  vibrateShoot: () => {\n    const { isVibrationEnabled, isVibrationSupported } = get();\n    if (isVibrationEnabled && isVibrationSupported) {\n      // Light, quick vibration for shooting (10ms)\n      navigator.vibrate(10);\n    }\n  },\n  \n  vibrateHit: () => {\n    const { isVibrationEnabled, isVibrationSupported } = get();\n    if (isVibrationEnabled && isVibrationSupported) {\n      // Medium vibration for general hits (50ms)\n      navigator.vibrate(50);\n    }\n  },\n  \n  vibrateEnemyDestroyed: () => {\n    const { isVibrationEnabled, isVibrationSupported } = get();\n    if (isVibrationEnabled && isVibrationSupported) {\n      // Satisfying pattern for destroying enemies [hit-pause-hit]\n      navigator.vibrate([30, 20, 40]);\n    }\n  },\n  \n  vibratePlayerHit: () => {\n    const { isVibrationEnabled, isVibrationSupported } = get();\n    if (isVibrationEnabled && isVibrationSupported) {\n      // Strong vibration for player taking damage (100ms)\n      navigator.vibrate(100);\n    }\n  },\n  \n  vibrateGameOver: () => {\n    const { isVibrationEnabled, isVibrationSupported } = get();\n    if (isVibrationEnabled && isVibrationSupported) {\n      // Dramatic pattern for game over [long-pause-short-pause-short]\n      navigator.vibrate([200, 100, 50, 50, 50]);\n    }\n  }\n}));","size_bytes":2640},"client/src/lib/ux/AdvancedHaptics.ts":{"content":"export class AdvancedHaptics {\n    private static isSupported: boolean = false;\n    private static isEnabled: boolean = true;\n    private static intensity: number = 1.0;\n    \n    // Haptic pattern library\n    private static patterns = {\n      // Combat feedback\n      weakHit: [30],\n      strongHit: [80],\n      criticalHit: [20, 20, 100],\n      playerHit: [200],\n      \n      // UI feedback\n      buttonPress: [10],\n      menuOpen: [15, 10, 25],\n      levelUp: [50, 50, 100, 50, 150],\n      achievement: [30, 30, 30, 30, 100],\n      \n      // Game events\n      enemyDestroyed: [40, 30, 60],\n      powerUpCollected: [25, 25, 50],\n      bossAppear: [100, 100, 200],\n      gameOver: [300, 200, 100, 200, 100],\n      \n      // Weapons\n      laserShot: [8],\n      rapidFire: [5],\n      chargedShot: [15, 10, 80],\n      \n      // Environment\n      backgroundTension: [5, 995], // Very subtle, long interval\n      warningPulse: [30, 50, 30],\n      countdown: [50, 950] // One pulse per second\n    };\n  \n    // Advanced haptic effects\n    private static activePatterns: Map<string, NodeJS.Timeout> = new Map();\n  \n    public static initialize(): void {\n      this.checkSupport();\n      this.loadUserPreferences();\n      console.log(`Haptic feedback ${this.isSupported ? 'supported' : 'not supported'}`);\n    }\n  \n    private static checkSupport(): void {\n      this.isSupported = 'vibrate' in navigator && \n                        typeof navigator.vibrate === 'function' &&\n                        navigator.vibrate !== undefined;\n                        \n      // Enhanced detection for better haptic support\n      if (this.isSupported) {\n        // Test with a minimal vibration\n        try {\n          navigator.vibrate(1);\n        } catch (error) {\n          this.isSupported = false;\n          console.warn('Haptic feedback disabled due to vibration test failure');\n        }\n      }\n    }\n  \n    private static loadUserPreferences(): void {\n      const saved = localStorage.getItem('haptic-preferences');\n      if (saved) {\n        try {\n          const prefs = JSON.parse(saved);\n          this.isEnabled = prefs.enabled ?? true;\n          this.intensity = prefs.intensity ?? 1.0;\n        } catch (error) {\n          console.warn('Failed to load haptic preferences');\n        }\n      }\n    }\n  \n    public static savePreferences(): void {\n      const prefs = {\n        enabled: this.isEnabled,\n        intensity: this.intensity\n      };\n      localStorage.setItem('haptic-preferences', JSON.stringify(prefs));\n    }\n  \n    public static setEnabled(enabled: boolean): void {\n      this.isEnabled = enabled;\n      this.savePreferences();\n      \n      if (!enabled) {\n        this.stopAllPatterns();\n      }\n    }\n  \n    public static setIntensity(intensity: number): void {\n      this.intensity = Math.max(0, Math.min(2, intensity));\n      this.savePreferences();\n    }\n  \n    // Basic haptic feedback\n    public static vibrate(pattern: string | number[]): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      let vibratePattern: number[];\n      \n      if (typeof pattern === 'string') {\n        vibratePattern = this.patterns[pattern as keyof typeof this.patterns] || [50];\n      } else {\n        vibratePattern = pattern;\n      }\n  \n      // Apply intensity scaling\n      const scaledPattern = vibratePattern.map((duration, index) => {\n        // Only scale vibration durations (odd indices), not pauses (even indices)\n        return index % 2 === 0 ? Math.round(duration * this.intensity) : duration;\n      });\n  \n      try {\n        navigator.vibrate(scaledPattern);\n      } catch (error) {\n        console.warn('Haptic feedback failed:', error);\n      }\n    }\n  \n    // Advanced haptic patterns with timing\n    public static startContinuousPattern(patternName: string, interval: number = 1000): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      this.stopPattern(patternName);\n  \n      const pattern = this.patterns[patternName as keyof typeof this.patterns];\n      if (!pattern) return;\n  \n      const intervalId = setInterval(() => {\n        this.vibrate(pattern);\n      }, interval);\n  \n      this.activePatterns.set(patternName, intervalId);\n    }\n  \n    public static stopPattern(patternName: string): void {\n      const intervalId = this.activePatterns.get(patternName);\n      if (intervalId) {\n        clearInterval(intervalId);\n        this.activePatterns.delete(patternName);\n      }\n    }\n  \n    public static stopAllPatterns(): void {\n      this.activePatterns.forEach((intervalId) => {\n        clearInterval(intervalId);\n      });\n      this.activePatterns.clear();\n      navigator.vibrate(0); // Stop any current vibration\n    }\n  \n    // Context-aware haptic feedback\n    public static contextualFeedback(event: string, intensity: 'light' | 'medium' | 'heavy' = 'medium'): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      const intensityMultiplier = {\n        light: 0.5,\n        medium: 1.0,\n        heavy: 1.5\n      }[intensity];\n  \n      const originalIntensity = this.intensity;\n      this.intensity = originalIntensity * intensityMultiplier;\n  \n      switch (event) {\n        case 'enemy-hit-weak':\n          this.vibrate('weakHit');\n          break;\n        case 'enemy-hit-strong':\n          this.vibrate('strongHit');\n          break;\n        case 'enemy-destroyed':\n          this.vibrate('enemyDestroyed');\n          break;\n        case 'player-hit':\n          this.vibrate('playerHit');\n          break;\n        case 'player-shoot':\n          this.vibrate('laserShot');\n          break;\n        case 'power-up':\n          this.vibrate('powerUpCollected');\n          break;\n        case 'level-up':\n          this.vibrate('levelUp');\n          break;\n        case 'boss-appear':\n          this.vibrate('bossAppear');\n          break;\n        case 'game-over':\n          this.vibrate('gameOver');\n          break;\n        case 'menu-select':\n          this.vibrate('buttonPress');\n          break;\n        default:\n          this.vibrate([50]);\n      }\n  \n      this.intensity = originalIntensity;\n    }\n  \n    // Adaptive haptics based on game state\n    public static adaptiveGameFeedback(gameState: any): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      // Background tension based on enemy count and player health\n      if (gameState.enemies > 10 && gameState.playerHealth < 30) {\n        this.startContinuousPattern('backgroundTension', 2000);\n      } else {\n        this.stopPattern('backgroundTension');\n      }\n  \n      // Warning pulse when health is critically low\n      if (gameState.playerHealth <= 10) {\n        this.startContinuousPattern('warningPulse', 1500);\n      } else {\n        this.stopPattern('warningPulse');\n      }\n  \n      // Boss battle intensity\n      if (gameState.bossActive) {\n        // Increase base intensity during boss fights\n        this.intensity = Math.min(2.0, this.intensity * 1.2);\n      }\n    }\n  \n    // Directional haptics (for devices that support it)\n    public static directionalFeedback(direction: 'left' | 'right' | 'center', intensity: number = 50): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      // For devices without directional haptics, vary the pattern\n      switch (direction) {\n        case 'left':\n          this.vibrate([intensity, 100, intensity * 0.5]);\n          break;\n        case 'right':\n          this.vibrate([intensity * 0.5, 100, intensity]);\n          break;\n        case 'center':\n          this.vibrate([intensity]);\n          break;\n      }\n    }\n  \n    // Accessibility features\n    public static accessibilityAlert(type: 'warning' | 'error' | 'success' | 'info'): void {\n      if (!this.isSupported || !this.isEnabled) return;\n  \n      const patterns = {\n        warning: [100, 100, 100],\n        error: [200, 100, 200],\n        success: [50, 50, 50, 50, 100],\n        info: [75]\n      };\n  \n      this.vibrate(patterns[type]);\n    }\n  \n    public static getStatus() {\n      return {\n        supported: this.isSupported,\n        enabled: this.isEnabled,\n        intensity: this.intensity,\n        activePatterns: Array.from(this.activePatterns.keys())\n      };\n    }\n  }","size_bytes":8184},"client/src/lib/web3/achievements.ts":{"content":"// Achievement system for Starmint Mini App\n\nexport interface Achievement {\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    condition: (stats: GameStats) => boolean;\n    reward: number; // STARMINT tokens\n    nftMetadata?: {\n      name: string;\n      description: string;\n      image: string;\n    };\n  }\n  \n  export interface GameStats {\n    totalScore: number;\n    highScore: number;\n    enemiesDestroyed: number;\n    gamesPlayed: number;\n    timePlayedMinutes: number;\n    streakDays: number;\n    maxStreak: number;\n    dailyLogins: number;\n    socialShares: number;\n    friendsInvited: number;\n  }\n  \n  export const ACHIEVEMENTS: Achievement[] = [\n    {\n      id: 'first_blood',\n      name: 'First Blood',\n      description: 'Destroy your first enemy',\n      icon: '🎯',\n      condition: (stats) => stats.enemiesDestroyed >= 1,\n      reward: 10,\n      nftMetadata: {\n        name: 'Starmint First Blood',\n        description: 'Commemorating your first enemy destroyed in Starmint',\n        image: '/achievements/first-blood.png'\n      }\n    },\n    {\n      id: 'centurion',\n      name: 'Centurion',\n      description: 'Destroy 100 enemies',\n      icon: '💯',\n      condition: (stats) => stats.enemiesDestroyed >= 100,\n      reward: 100,\n      nftMetadata: {\n        name: 'Starmint Centurion',\n        description: 'Elite warrior who has destroyed 100 enemies',\n        image: '/achievements/centurion.png'\n      }\n    },\n    {\n      id: 'high_scorer',\n      name: 'High Scorer',\n      description: 'Reach 10,000 points in a single game',\n      icon: '🏆',\n      condition: (stats) => stats.highScore >= 10000,\n      reward: 50,\n    },\n    {\n      id: 'social_butterfly',\n      name: 'Social Butterfly',\n      description: 'Share your score 5 times',\n      icon: '🦋',\n      condition: (stats) => stats.socialShares >= 5,\n      reward: 25,\n    },\n    {\n      id: 'friend_magnet',\n      name: 'Friend Magnet',\n      description: 'Invite 3 friends to play',\n      icon: '🧲',\n      condition: (stats) => stats.friendsInvited >= 3,\n      reward: 75,\n    },\n    {\n      id: 'dedicated_player',\n      name: 'Dedicated Player',\n      description: 'Play for 7 consecutive days',\n      icon: '📅',\n      condition: (stats) => stats.streakDays >= 7,\n      reward: 200,\n      nftMetadata: {\n        name: 'Starmint Dedication Badge',\n        description: 'Awarded for playing 7 consecutive days',\n        image: '/achievements/dedicated.png'\n      }\n    },\n    {\n      id: 'marathon_gamer',\n      name: 'Marathon Gamer',\n      description: 'Play for 60 minutes total',\n      icon: '🏃',\n      condition: (stats) => stats.timePlayedMinutes >= 60,\n      reward: 30,\n    },\n    {\n      id: 'login_warrior',\n      name: 'Login Warrior',\n      description: 'Login 30 days total',\n      icon: '⚔️',\n      condition: (stats) => stats.dailyLogins >= 30,\n      reward: 300,\n      nftMetadata: {\n        name: 'Starmint Login Warrior',\n        description: 'Committed player with 30 total login days',\n        image: '/achievements/login-warrior.png'\n      }\n    },\n    {\n      id: 'streak_master',\n      name: 'Streak Master',\n      description: 'Achieve a 30-day login streak',\n      icon: '🔥',\n      condition: (stats) => stats.maxStreak >= 30,\n      reward: 500,\n      nftMetadata: {\n        name: 'Starmint Streak Master',\n        description: 'Elite dedication with 30 consecutive days',\n        image: '/achievements/streak-master.png'\n      }\n    }\n  ];\n  \n  export class AchievementSystem {\n    private static instance: AchievementSystem;\n    private unlockedAchievements: Set<string> = new Set();\n  \n    static getInstance(): AchievementSystem {\n      if (!AchievementSystem.instance) {\n        AchievementSystem.instance = new AchievementSystem();\n      }\n      return AchievementSystem.instance;\n    }\n  \n    checkAchievements(stats: GameStats): Achievement[] {\n      const newlyUnlocked: Achievement[] = [];\n  \n      ACHIEVEMENTS.forEach(achievement => {\n        if (!this.unlockedAchievements.has(achievement.id) && achievement.condition(stats)) {\n          this.unlockedAchievements.add(achievement.id);\n          newlyUnlocked.push(achievement);\n          this.showAchievementNotification(achievement);\n        }\n      });\n  \n      return newlyUnlocked;\n    }\n  \n    private showAchievementNotification(achievement: Achievement) {\n      // Create achievement popup notification\n      const notification = document.createElement('div');\n      notification.className = 'achievement-notification';\n      notification.innerHTML = `\n        <div class=\"achievement-popup\">\n          <div class=\"achievement-icon\">${achievement.icon}</div>\n          <div class=\"achievement-text\">\n            <h3>Achievement Unlocked!</h3>\n            <p>${achievement.name}</p>\n            <span>+${achievement.reward} STARMINT</span>\n          </div>\n        </div>\n      `;\n      \n      document.body.appendChild(notification);\n      \n      // Remove after 3 seconds\n      setTimeout(() => {\n        notification.remove();\n      }, 3000);\n    }\n  \n    getUnlockedAchievements(): string[] {\n      return Array.from(this.unlockedAchievements);\n    }\n  \n    getTotalRewards(): number {\n      return ACHIEVEMENTS\n        .filter(achievement => this.unlockedAchievements.has(achievement.id))\n        .reduce((total, achievement) => total + achievement.reward, 0);\n    }\n  }","size_bytes":5401},"client/src/lib/web3/config.ts":{"content":"import { createConfig, http } from 'wagmi';\nimport { base, mainnet, optimism } from 'wagmi/chains';\nimport { farcasterMiniApp } from '@farcaster/miniapp-wagmi-connector';\nimport { sdk } from '@farcaster/miniapp-sdk';\n\n// Base network configuration\nexport const BASE_CHAIN_ID = 8453;\n\n// Wagmi configuration for Base and other chains\nexport const wagmiConfig = createConfig({\n  chains: [base, mainnet, optimism],\n  transports: {\n    [base.id]: http('https://mainnet.base.org'),\n    [mainnet.id]: http(),\n    [optimism.id]: http(),\n  },\n  connectors: [\n    farcasterMiniApp()\n  ],\n});\n\n// Get Ethereum provider from MiniKit\nexport const getEthereumProvider = async () => {\n  try {\n    return await sdk.wallet.getEthereumProvider();\n  } catch (error) {\n    console.error('Failed to get Ethereum provider:', error);\n    return null;\n  }\n};\n\n// Base network details\nexport const BASE_NETWORK = {\n  chainId: BASE_CHAIN_ID,\n  name: 'Base',\n  currency: 'ETH',\n  explorerUrl: 'https://basescan.org',\n  rpcUrl: 'https://mainnet.base.org',\n};","size_bytes":1031},"client/src/lib/web3/wallet.ts":{"content":"import { sdk } from '@farcaster/miniapp-sdk';\nimport { parseEther, type Address } from 'viem';\n\nexport class WalletManager {\n  private static instance: WalletManager;\n\n  static getInstance(): WalletManager {\n    if (!WalletManager.instance) {\n      WalletManager.instance = new WalletManager();\n    }\n    return WalletManager.instance;\n  }\n\n  async getProvider() {\n    try {\n      return await sdk.wallet.ethProvider;\n    } catch (error) {\n      console.error('Failed to get Ethereum provider:', error);\n      return null;\n    }\n  }\n\n  async getAccount(): Promise<Address | null> {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) return null;\n      \n      const accounts = await provider.request({ method: 'eth_accounts' }) as Address[];\n      return accounts[0] || null;\n    } catch (error) {\n      console.error('Failed to get account:', error);\n      return null;\n    }\n  }\n\n  async switchToBase(): Promise<boolean> {\n    try {\n      const provider = await this.getProvider();\n      if (!provider) return false;\n\n      await provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x2105' }], // Base Chain ID in hex\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to switch to Base chain:', error);\n      return false;\n    }\n  }\n\n  async sendTransaction(to: Address, value: string, data?: string): Promise<string | null> {\n    try {\n      const provider = await this.getProvider();\n      const account = await this.getAccount();\n      \n      if (!provider || !account) return null;\n\n      const txHash = await provider.request({\n        method: 'eth_sendTransaction',\n        params: [{\n          from: account,\n          to,\n          value: `0x${parseEther(value).toString(16)}`,\n          data: (data || '0x') as `0x${string}`,\n        }],\n      }) as string;\n\n      return txHash;\n    } catch (error) {\n      console.error('Failed to send transaction:', error);\n      return null;\n    }\n  }\n\n  async getBalance(): Promise<string | null> {\n    try {\n      const provider = await this.getProvider();\n      const account = await this.getAccount();\n      \n      if (!provider || !account) return null;\n\n      const balance = await provider.request({\n        method: 'eth_getBalance',\n        params: [account, 'latest'],\n      }) as string;\n\n      return balance;\n    } catch (error) {\n      console.error('Failed to get balance:', error);\n      return null;\n    }\n  }\n}","size_bytes":2475},"replit.md":{"content":"# Farcaster Miniapp Game Project\n\n## Overview\nThis is a full-stack React + Express.js application featuring a Farcaster miniapp game. The project includes:\n- Interactive 3D space shooter game built with React Three Fiber\n- Real-time leaderboards and social features\n- Farcaster authentication integration\n- PostgreSQL database with comprehensive player statistics\n- Web3 wallet integration with wagmi\n\n## Architecture\n- **Frontend**: React 18 + TypeScript + Vite + Tailwind CSS\n- **Backend**: Express.js + TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Game Engine**: React Three Fiber + WebGL\n- **Authentication**: JWT + Farcaster integration\n- **Deployment**: Configured for Replit autoscale\n\n## Project Structure\n```\n├── client/                 # React frontend application\n│   ├── src/\n│   │   ├── components/    # React components including game engine\n│   │   ├── lib/           # Utility libraries and game logic\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── styles/        # CSS and styling\n├── server/                # Express.js backend\n│   ├── api/              # API route handlers\n│   ├── db.ts             # Database configuration\n│   ├── storage.ts        # Data access layer\n│   └── routes.ts         # API route definitions\n├── shared/               # Shared TypeScript types and schemas\n└── public/              # Static assets and Farcaster manifest\n```\n\n## Recent Changes\n- **2024-09-26**: Fresh GitHub import successfully configured for Replit environment\n  - Created new PostgreSQL database and ran schema migrations with Drizzle\n  - Installed all dependencies successfully using npm\n  - Configured \"Game Server\" workflow with proper environment variables\n  - Verified React Three Fiber game engine is running correctly\n  - Set up deployment configuration for production autoscale\n  - Confirmed all systems operational: frontend, backend, database, and Farcaster integration\n\n## Development Setup\n1. Environment variables are set in the workflow:\n   - `JWT_SECRET`: For user authentication tokens\n   - `GAME_ENCRYPTION_KEY`: For game state encryption\n   - `DATABASE_URL`: PostgreSQL connection (automatically configured)\n\n2. Database schema includes:\n   - User management with Farcaster FID support\n   - Player statistics and game sessions\n   - Leaderboards and rankings\n   - Achievement tracking\n   - Daily login streaks\n\n## Running the Project\n- **Development**: Workflow \"Server\" runs `npm run dev` on port 5000\n- **Database**: Automatically configured PostgreSQL with Drizzle ORM\n- **Build**: `npm run build` creates production bundle\n- **Production**: `npm start` serves built application\n\n## Key Features\n- 3D space shooter game with multiple enemy types and power-ups\n- Real-time score validation and anti-cheat measures\n- Social leaderboards with daily/weekly/monthly rankings\n- Farcaster integration for social sharing\n- Web3 wallet connection with wagmi\n- Progressive Web App capabilities\n- Responsive design for mobile and desktop\n\n## User Preferences\n- Full-stack TypeScript application\n- Modern React patterns with hooks and functional components\n- Tailwind CSS for styling\n- Comprehensive error handling and validation\n- Security-focused development with encryption and JWT","size_bytes":3339}},"version":1}